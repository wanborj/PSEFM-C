!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ACT	plibs/PSEFMconfigure.h	/^typedef enum {SEN=1, CONT, ACT} servant_t;$/;"	e	enum:__anon1
CONT	plibs/PSEFMconfigure.h	/^typedef enum {SEN=1, CONT, ACT} servant_t;$/;"	e	enum:__anon1
LED	plibs/include/servant.h	/^    tick_t LED;$/;"	m	struct:servant
LET	plibs/include/task.h	/^    tick_t LET;$/;"	m	struct:task
NUMOFCONDS	plibs/PSEFMconfigure.h	9;"	d
NUMOFMODES	plibs/PSEFMconfigure.h	8;"	d
NUMOFSERVANTS	plibs/PSEFMconfigure.h	11;"	d
NUMOFTASKS	plibs/PSEFMconfigure.h	10;"	d
SEN	plibs/PSEFMconfigure.h	/^typedef enum {SEN=1, CONT, ACT} servant_t;$/;"	e	enum:__anon1
__MODE_H	plibs/include/mode.h	2;"	d
__PSEFMCONFIGURE_H	plibs/PSEFMconfigure.h	2;"	d
__PSEFMPORT_H	plibs/PSEFMport.h	2;"	d
__SERVANT_H	plibs/include/servant.h	2;"	d
__TASK_H	plibs/include/task.h	2;"	d
arrive	plibs/include/servant.h	/^    int arrive; \/\/ arrived number of events from src servants$/;"	m	struct:servant
bool	plibs/PSEFMconfigure.h	6;"	d
cond	plibs/include/mode.h	/^typedef struct cond{$/;"	s
cond	plibs/mode.c	/^struct ps_condition_array_t cond;$/;"	v	typeref:struct:ps_condition_array_t
condition	plibs/include/mode.h	/^    bool (*condition)(void);$/;"	m	struct:cond
conditions	plibs/include/mode.h	/^    ps_mode_cond conditions[NUMOFCONDS];$/;"	m	struct:ps_condition_array_t
current_mode	plibs/mode.c	/^static ps_mode_t current_mode;$/;"	v	file:
deadline	plibs/include/task.h	/^    tick_t deadline;$/;"	m	struct:task
id_t	plibs/PSEFMconfigure.h	4;"	d
mode	plibs/include/mode.h	/^typedef struct mode{$/;"	s
mode_dest	plibs/include/mode.h	/^    id_t mode_dest;$/;"	m	struct:cond
mode_id	plibs/include/mode.h	/^    id_t mode_id; \/\/ equal to the serial number of array$/;"	m	struct:mode
modes	plibs/mode.c	/^ps_mode_t modes[NUMOFMODES];$/;"	v
num	plibs/include/mode.h	/^    int num;  \/\/ number of tasks$/;"	m	struct:mode
num	plibs/include/mode.h	/^    int num;$/;"	m	struct:ps_condition_array_t
num	plibs/include/servant.h	/^    int num;   \/\/ the src servants of this servant$/;"	m	struct:servant
num	plibs/include/task.h	/^    int num;$/;"	m	struct:ps_task_array_t
period	plibs/include/task.h	/^    tick_t period;$/;"	m	struct:task
prv_mode_add_task	plibs/mode.c	/^void prv_mode_add_task(id_t mode_id, ps_task_t * ptask)$/;"	f
prv_mode_get_current_mode	plibs/mode.c	/^ps_mode_t * prv_mode_get_current_mode()$/;"	f
prv_mode_get_num	plibs/mode.c	/^int prv_mode_get_num(id_t mode_id)$/;"	f
prv_servant_add_arrive	plibs/servant.c	/^void      prv_servant_add_arrive(ps_servant_t *pservant)$/;"	f
prv_servant_create	plibs/PSEFMport.h	5;"	d
prv_servant_get_LED	plibs/servant.c	/^tick_t    prv_servant_get_LED(ps_servant_t *pservant)$/;"	f
prv_servant_get_arrive	plibs/servant.c	/^int       prv_servant_get_arrive(ps_servant_t *pservant)$/;"	f
prv_servant_get_id	plibs/servant.c	/^id_t      prv_servant_get_id(ps_servant_t *pservant)$/;"	f
prv_servant_get_num	plibs/servant.c	/^int       prv_servant_get_num(ps_servant_t *pservant)$/;"	f
prv_servant_get_type	plibs/servant.c	/^servant_t prv_servant_get_type(ps_servant_t * pservant)$/;"	f
prv_servant_yield	plibs/PSEFMport.h	6;"	d
prv_task_get_LET	plibs/task.c	/^tick_t prv_task_get_LET(ps_task_t * ptask)$/;"	f
prv_task_get_actuator	plibs/task.c	/^ps_servant_t * prv_task_get_actuator(ps_task_t * ptask)$/;"	f
prv_task_get_deadline	plibs/task.c	/^tick_t prv_task_get_deadline(ps_task_t * ptask)$/;"	f
prv_task_get_id	plibs/task.c	/^id_t   prv_task_get_id(ps_task_t * ptask)$/;"	f
prv_task_get_period	plibs/task.c	/^tick_t prv_task_get_period(ps_task_t * ptask)$/;"	f
prv_task_get_sensor	plibs/task.c	/^ps_servant_t * prv_task_get_sensor(ps_task_t * ptask)$/;"	f
prv_task_get_servant_num	plibs/task.c	/^int    prv_task_get_servant_num(ps_task_t * ptask)$/;"	f
prv_task_start	plibs/task.c	/^void   prv_task_start(ps_task_t * ptask)$/;"	f
prv_wait_event	plibs/PSEFMport.h	10;"	d
ps_condition_array_t	plibs/include/mode.h	/^struct ps_condition_array_t{$/;"	s
ps_mode_cond	plibs/include/mode.h	/^}ps_mode_cond;$/;"	t	typeref:struct:cond
ps_mode_create	plibs/mode.c	/^void ps_mode_create(id_t mode_id, ps_task_t * task_array[], int num)$/;"	f
ps_mode_start	plibs/mode.c	/^void ps_mode_start(id_t mode_id)$/;"	f
ps_mode_switch	plibs/mode.c	/^void ps_mode_switch()$/;"	f
ps_mode_switch_create	plibs/mode.c	/^void ps_mode_switch_create(bool (*condition)(void), id_t mode_dest)$/;"	f
ps_mode_t	plibs/include/mode.h	/^}ps_mode_t;$/;"	t	typeref:struct:mode
ps_servant_cooperate	plibs/servant.c	/^void ps_servant_cooperate()$/;"	f
ps_servant_create	plibs/servant.c	/^void ps_servant_create(id_t servant_id, int servant_type, tick_t LED,$/;"	f
ps_servant_t	plibs/include/servant.h	/^}ps_servant_t;$/;"	t	typeref:struct:servant
ps_task_array_t	plibs/include/task.h	/^struct ps_task_array_t{$/;"	s
ps_task_create	plibs/task.c	/^void ps_task_create(id_t task_id, tick_t LET, int servant_num,$/;"	f
ps_task_t	plibs/include/task.h	/^}ps_task_t;$/;"	t	typeref:struct:task
servant	plibs/include/servant.h	/^typedef struct servant{$/;"	s
servant_id	plibs/include/servant.h	/^    id_t servant_id;$/;"	m	struct:servant
servant_num	plibs/include/task.h	/^    int servant_num;      \/\/ number of I-servants$/;"	m	struct:task
servant_t	plibs/PSEFMconfigure.h	/^typedef enum {SEN=1, CONT, ACT} servant_t;$/;"	t	typeref:enum:__anon1
servant_type	plibs/include/servant.h	/^    int servant_type; \/\/ one of the elements in enum variable$/;"	m	struct:servant
servants	plibs/include/task.h	/^    ps_servant_t * servants[NUMOFSERVANTS];  \/\/ I-servants in this task$/;"	m	struct:task
task	plibs/include/task.h	/^typedef struct task{$/;"	s
task_id	plibs/include/task.h	/^    id_t task_id;$/;"	m	struct:task
tasks	plibs/include/mode.h	/^    ps_task_t * tasks[NUMOFTASKS];$/;"	m	struct:mode
tasks	plibs/include/task.h	/^    ps_task_t tasks[NUMOFTASKS*NUMOFMODES];$/;"	m	struct:ps_task_array_t
tick_t	plibs/PSEFMconfigure.h	5;"	d
tsk	plibs/task.c	/^struct ps_task_array_t tsk;$/;"	v	typeref:struct:ps_task_array_t
