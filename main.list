
main.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:
       0:	00 00 01 20 79 65 00 00 bd 65 00 00 bd 65 00 00     ... ye...e...e..
      10:	bd 65 00 00 bd 65 00 00 bd 65 00 00 00 00 00 00     .e...e...e......
	...
      2c:	c5 44 00 00 bd 65 00 00 00 00 00 00 d1 45 00 00     .D...e.......E..
      3c:	0d 46 00 00 bd 65 00 00 bd 65 00 00 bd 65 00 00     .F...e...e...e..
      4c:	bd 65 00 00 bd 65 00 00 bd 65 00 00 bd 65 00 00     .e...e...e...e..
      5c:	bd 65 00 00 bd 65 00 00 bd 65 00 00 bd 65 00 00     .e...e...e...e..
      6c:	bd 65 00 00 bd 65 00 00 bd 65 00 00 bd 65 00 00     .e...e...e...e..
      7c:	bd 65 00 00 bd 65 00 00 bd 65 00 00 bd 65 00 00     .e...e...e...e..
      8c:	bd 65 00 00 bd 65 00 00 bd 65 00 00 bd 65 00 00     .e...e...e...e..
      9c:	bd 65 00 00 bd 65 00 00 bd 65 00 00 bd 65 00 00     .e...e...e...e..
      ac:	bd 65 00 00 bd 65 00 00 bd 65 00 00 bd 65 00 00     .e...e...e...e..
      bc:	bd 65 00 00 bd 65 00 00 bd 65 00 00 bd 65 00 00     .e...e...e...e..
      cc:	bd 65 00 00 bd 65 00 00 bd 65 00 00 bd 65 00 00     .e...e...e...e..
      dc:	bd 65 00 00 bd 65 00 00 bd 65 00 00 bd 65 00 00     .e...e...e...e..
	...
     108:	5f f8 08 f1                                         _...

0000010c <__get_PSP>:
 * Return the actual process stack pointer
 */
uint32_t __get_PSP(void) __attribute__( ( naked ) );
uint32_t __get_PSP(void)
{
  uint32_t result=0;
     10c:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, psp\n\t" 
     10e:	f3ef 8309 	mrs	r3, PSP
     112:	4618      	mov	r0, r3
     114:	4770      	bx	lr
     116:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     118:	4623      	mov	r3, r4
}
     11a:	4618      	mov	r0, r3

0000011c <__set_PSP>:
 * Assign the value ProcessStackPointer to the MSP 
 * (process stack pointer) Cortex processor register
 */
void __set_PSP(uint32_t topOfProcStack) __attribute__( ( naked ) );
void __set_PSP(uint32_t topOfProcStack)
{
     11c:	4603      	mov	r3, r0
  __ASM volatile ("MSR psp, %0\n\t"
     11e:	f383 8809 	msr	PSP, r3
     122:	4770      	bx	lr

00000124 <__get_MSP>:
 * Cortex processor register
 */
uint32_t __get_MSP(void) __attribute__( ( naked ) );
uint32_t __get_MSP(void)
{
  uint32_t result=0;
     124:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, msp\n\t" 
     126:	f3ef 8308 	mrs	r3, MSP
     12a:	4618      	mov	r0, r3
     12c:	4770      	bx	lr
     12e:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     130:	4623      	mov	r3, r4
}
     132:	4618      	mov	r0, r3

00000134 <__set_MSP>:
 * Assign the value mainStackPointer to the MSP 
 * (main stack pointer) Cortex processor register
 */
void __set_MSP(uint32_t topOfMainStack) __attribute__( ( naked ) );
void __set_MSP(uint32_t topOfMainStack)
{
     134:	4603      	mov	r3, r0
  __ASM volatile ("MSR msp, %0\n\t"
     136:	f383 8808 	msr	MSP, r3
     13a:	4770      	bx	lr

0000013c <__get_BASEPRI>:
 * @return BasePriority
 *
 * Return the content of the base priority register
 */
uint32_t __get_BASEPRI(void)
{
     13c:	b480      	push	{r7}
     13e:	b083      	sub	sp, #12
     140:	af00      	add	r7, sp, #0
  uint32_t result=0;
     142:	2300      	movs	r3, #0
     144:	607b      	str	r3, [r7, #4]
  
  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
     146:	f3ef 8312 	mrs	r3, BASEPRI_MAX
     14a:	607b      	str	r3, [r7, #4]
  return(result);
     14c:	687b      	ldr	r3, [r7, #4]
}
     14e:	4618      	mov	r0, r3
     150:	370c      	adds	r7, #12
     152:	46bd      	mov	sp, r7
     154:	f85d 7b04 	ldr.w	r7, [sp], #4
     158:	4770      	bx	lr
     15a:	bf00      	nop

0000015c <__set_BASEPRI>:
 * @param  basePri  BasePriority
 *
 * Set the base priority register
 */
void __set_BASEPRI(uint32_t value)
{
     15c:	b480      	push	{r7}
     15e:	b083      	sub	sp, #12
     160:	af00      	add	r7, sp, #0
     162:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) );
     164:	687b      	ldr	r3, [r7, #4]
     166:	f383 8811 	msr	BASEPRI, r3
}
     16a:	370c      	adds	r7, #12
     16c:	46bd      	mov	sp, r7
     16e:	f85d 7b04 	ldr.w	r7, [sp], #4
     172:	4770      	bx	lr

00000174 <__get_PRIMASK>:
 * @return PriMask
 *
 * Return state of the priority mask bit from the priority mask register
 */
uint32_t __get_PRIMASK(void)
{
     174:	b480      	push	{r7}
     176:	b083      	sub	sp, #12
     178:	af00      	add	r7, sp, #0
  uint32_t result=0;
     17a:	2300      	movs	r3, #0
     17c:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     17e:	f3ef 8310 	mrs	r3, PRIMASK
     182:	607b      	str	r3, [r7, #4]
  return(result);
     184:	687b      	ldr	r3, [r7, #4]
}
     186:	4618      	mov	r0, r3
     188:	370c      	adds	r7, #12
     18a:	46bd      	mov	sp, r7
     18c:	f85d 7b04 	ldr.w	r7, [sp], #4
     190:	4770      	bx	lr
     192:	bf00      	nop

00000194 <__set_PRIMASK>:
 * @param  priMask  PriMask
 *
 * Set the priority mask bit in the priority mask register
 */
void __set_PRIMASK(uint32_t priMask)
{
     194:	b480      	push	{r7}
     196:	b083      	sub	sp, #12
     198:	af00      	add	r7, sp, #0
     19a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
     19c:	687b      	ldr	r3, [r7, #4]
     19e:	f383 8810 	msr	PRIMASK, r3
}
     1a2:	370c      	adds	r7, #12
     1a4:	46bd      	mov	sp, r7
     1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
     1aa:	4770      	bx	lr

000001ac <__get_FAULTMASK>:
 * @return FaultMask
 *
 * Return the content of the fault mask register
 */
uint32_t __get_FAULTMASK(void)
{
     1ac:	b480      	push	{r7}
     1ae:	b083      	sub	sp, #12
     1b0:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1b2:	2300      	movs	r3, #0
     1b4:	607b      	str	r3, [r7, #4]
  
  __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
     1b6:	f3ef 8313 	mrs	r3, FAULTMASK
     1ba:	607b      	str	r3, [r7, #4]
  return(result);
     1bc:	687b      	ldr	r3, [r7, #4]
}
     1be:	4618      	mov	r0, r3
     1c0:	370c      	adds	r7, #12
     1c2:	46bd      	mov	sp, r7
     1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     1c8:	4770      	bx	lr
     1ca:	bf00      	nop

000001cc <__set_FAULTMASK>:
 * @param  faultMask  faultMask value
 *
 * Set the fault mask register
 */
void __set_FAULTMASK(uint32_t faultMask)
{
     1cc:	b480      	push	{r7}
     1ce:	b083      	sub	sp, #12
     1d0:	af00      	add	r7, sp, #0
     1d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) );
     1d4:	687b      	ldr	r3, [r7, #4]
     1d6:	f383 8813 	msr	FAULTMASK, r3
}
     1da:	370c      	adds	r7, #12
     1dc:	46bd      	mov	sp, r7
     1de:	f85d 7b04 	ldr.w	r7, [sp], #4
     1e2:	4770      	bx	lr

000001e4 <__get_CONTROL>:
*  @return Control value
 *
 * Return the content of the control register
 */
uint32_t __get_CONTROL(void)
{
     1e4:	b480      	push	{r7}
     1e6:	b083      	sub	sp, #12
     1e8:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1ea:	2300      	movs	r3, #0
     1ec:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, control" : "=r" (result) );
     1ee:	f3ef 8314 	mrs	r3, CONTROL
     1f2:	607b      	str	r3, [r7, #4]
  return(result);
     1f4:	687b      	ldr	r3, [r7, #4]
}
     1f6:	4618      	mov	r0, r3
     1f8:	370c      	adds	r7, #12
     1fa:	46bd      	mov	sp, r7
     1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
     200:	4770      	bx	lr
     202:	bf00      	nop

00000204 <__set_CONTROL>:
 * @param  control  Control value
 *
 * Set the control register
 */
void __set_CONTROL(uint32_t control)
{
     204:	b480      	push	{r7}
     206:	b083      	sub	sp, #12
     208:	af00      	add	r7, sp, #0
     20a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR control, %0" : : "r" (control) );
     20c:	687b      	ldr	r3, [r7, #4]
     20e:	f383 8814 	msr	CONTROL, r3
}
     212:	370c      	adds	r7, #12
     214:	46bd      	mov	sp, r7
     216:	f85d 7b04 	ldr.w	r7, [sp], #4
     21a:	4770      	bx	lr

0000021c <__REV>:
 * @return        reversed value
 *
 * Reverse byte order in integer value
 */
uint32_t __REV(uint32_t value)
{
     21c:	b480      	push	{r7}
     21e:	b085      	sub	sp, #20
     220:	af00      	add	r7, sp, #0
     222:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     224:	2300      	movs	r3, #0
     226:	60fb      	str	r3, [r7, #12]
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
     228:	687b      	ldr	r3, [r7, #4]
     22a:	ba1b      	rev	r3, r3
     22c:	60fb      	str	r3, [r7, #12]
  return(result);
     22e:	68fb      	ldr	r3, [r7, #12]
}
     230:	4618      	mov	r0, r3
     232:	3714      	adds	r7, #20
     234:	46bd      	mov	sp, r7
     236:	f85d 7b04 	ldr.w	r7, [sp], #4
     23a:	4770      	bx	lr

0000023c <__REV16>:
 * @return        reversed value
 *
 * Reverse byte order in unsigned short value
 */
uint32_t __REV16(uint16_t value)
{
     23c:	b480      	push	{r7}
     23e:	b085      	sub	sp, #20
     240:	af00      	add	r7, sp, #0
     242:	4603      	mov	r3, r0
     244:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     246:	2300      	movs	r3, #0
     248:	60fb      	str	r3, [r7, #12]
  
  __ASM volatile ("rev16 %0, %1" : "=r" (result) : "r" (value) );
     24a:	88fb      	ldrh	r3, [r7, #6]
     24c:	ba5b      	rev16	r3, r3
     24e:	60fb      	str	r3, [r7, #12]
  return(result);
     250:	68fb      	ldr	r3, [r7, #12]
}
     252:	4618      	mov	r0, r3
     254:	3714      	adds	r7, #20
     256:	46bd      	mov	sp, r7
     258:	f85d 7b04 	ldr.w	r7, [sp], #4
     25c:	4770      	bx	lr
     25e:	bf00      	nop

00000260 <__REVSH>:
 * @return        reversed value
 *
 * Reverse byte order in signed short value with sign extension to integer
 */
int32_t __REVSH(int16_t value)
{
     260:	b480      	push	{r7}
     262:	b085      	sub	sp, #20
     264:	af00      	add	r7, sp, #0
     266:	4603      	mov	r3, r0
     268:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     26a:	2300      	movs	r3, #0
     26c:	60fb      	str	r3, [r7, #12]
  
  __ASM volatile ("revsh %0, %1" : "=r" (result) : "r" (value) );
     26e:	88fb      	ldrh	r3, [r7, #6]
     270:	badb      	revsh	r3, r3
     272:	60fb      	str	r3, [r7, #12]
  return(result);
     274:	68fb      	ldr	r3, [r7, #12]
}
     276:	4618      	mov	r0, r3
     278:	3714      	adds	r7, #20
     27a:	46bd      	mov	sp, r7
     27c:	f85d 7b04 	ldr.w	r7, [sp], #4
     280:	4770      	bx	lr
     282:	bf00      	nop

00000284 <__RBIT>:
 * @return        reversed value
 *
 * Reverse bit order of value
 */
uint32_t __RBIT(uint32_t value)
{
     284:	b480      	push	{r7}
     286:	b085      	sub	sp, #20
     288:	af00      	add	r7, sp, #0
     28a:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     28c:	2300      	movs	r3, #0
     28e:	60fb      	str	r3, [r7, #12]
  
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
     290:	687b      	ldr	r3, [r7, #4]
     292:	fa93 f3a3 	rbit	r3, r3
     296:	60fb      	str	r3, [r7, #12]
   return(result);
     298:	68fb      	ldr	r3, [r7, #12]
}
     29a:	4618      	mov	r0, r3
     29c:	3714      	adds	r7, #20
     29e:	46bd      	mov	sp, r7
     2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
     2a4:	4770      	bx	lr
     2a6:	bf00      	nop

000002a8 <__LDREXB>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 8 bit value
 */
uint8_t __LDREXB(uint8_t *addr)
{
     2a8:	b480      	push	{r7}
     2aa:	b085      	sub	sp, #20
     2ac:	af00      	add	r7, sp, #0
     2ae:	6078      	str	r0, [r7, #4]
    uint8_t result=0;
     2b0:	2300      	movs	r3, #0
     2b2:	73fb      	strb	r3, [r7, #15]
  
   __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) );
     2b4:	687b      	ldr	r3, [r7, #4]
     2b6:	e8d3 3f4f 	ldrexb	r3, [r3]
     2ba:	73fb      	strb	r3, [r7, #15]
   return(result);
     2bc:	7bfb      	ldrb	r3, [r7, #15]
}
     2be:	4618      	mov	r0, r3
     2c0:	3714      	adds	r7, #20
     2c2:	46bd      	mov	sp, r7
     2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     2c8:	4770      	bx	lr
     2ca:	bf00      	nop

000002cc <__LDREXH>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 16 bit values
 */
uint16_t __LDREXH(uint16_t *addr)
{
     2cc:	b480      	push	{r7}
     2ce:	b085      	sub	sp, #20
     2d0:	af00      	add	r7, sp, #0
     2d2:	6078      	str	r0, [r7, #4]
    uint16_t result=0;
     2d4:	2300      	movs	r3, #0
     2d6:	81fb      	strh	r3, [r7, #14]
  
   __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) );
     2d8:	687b      	ldr	r3, [r7, #4]
     2da:	e8d3 3f5f 	ldrexh	r3, [r3]
     2de:	81fb      	strh	r3, [r7, #14]
   return(result);
     2e0:	89fb      	ldrh	r3, [r7, #14]
}
     2e2:	4618      	mov	r0, r3
     2e4:	3714      	adds	r7, #20
     2e6:	46bd      	mov	sp, r7
     2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
     2ec:	4770      	bx	lr
     2ee:	bf00      	nop

000002f0 <__LDREXW>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 32 bit values
 */
uint32_t __LDREXW(uint32_t *addr)
{
     2f0:	b480      	push	{r7}
     2f2:	b085      	sub	sp, #20
     2f4:	af00      	add	r7, sp, #0
     2f6:	6078      	str	r0, [r7, #4]
    uint32_t result=0;
     2f8:	2300      	movs	r3, #0
     2fa:	60fb      	str	r3, [r7, #12]
  
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     2fc:	687b      	ldr	r3, [r7, #4]
     2fe:	e853 3f00 	ldrex	r3, [r3]
     302:	60fb      	str	r3, [r7, #12]
   return(result);
     304:	68fb      	ldr	r3, [r7, #12]
}
     306:	4618      	mov	r0, r3
     308:	3714      	adds	r7, #20
     30a:	46bd      	mov	sp, r7
     30c:	f85d 7b04 	ldr.w	r7, [sp], #4
     310:	4770      	bx	lr
     312:	bf00      	nop

00000314 <__STREXB>:
 * @return        successful / failed
 *
 * Exclusive STR command for 8 bit values
 */
uint32_t __STREXB(uint8_t value, uint8_t *addr)
{
     314:	b480      	push	{r7}
     316:	b085      	sub	sp, #20
     318:	af00      	add	r7, sp, #0
     31a:	4603      	mov	r3, r0
     31c:	6039      	str	r1, [r7, #0]
     31e:	71fb      	strb	r3, [r7, #7]
   uint32_t result=0;
     320:	2300      	movs	r3, #0
     322:	60fb      	str	r3, [r7, #12]
  
   __ASM volatile ("strexb %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     324:	683a      	ldr	r2, [r7, #0]
     326:	79f9      	ldrb	r1, [r7, #7]
     328:	e8c2 1f43 	strexb	r3, r1, [r2]
     32c:	60fb      	str	r3, [r7, #12]
   return(result);
     32e:	68fb      	ldr	r3, [r7, #12]
}
     330:	4618      	mov	r0, r3
     332:	3714      	adds	r7, #20
     334:	46bd      	mov	sp, r7
     336:	f85d 7b04 	ldr.w	r7, [sp], #4
     33a:	4770      	bx	lr

0000033c <__STREXH>:
 * @return        successful / failed
 *
 * Exclusive STR command for 16 bit values
 */
uint32_t __STREXH(uint16_t value, uint16_t *addr)
{
     33c:	b480      	push	{r7}
     33e:	b085      	sub	sp, #20
     340:	af00      	add	r7, sp, #0
     342:	4603      	mov	r3, r0
     344:	6039      	str	r1, [r7, #0]
     346:	80fb      	strh	r3, [r7, #6]
   uint32_t result=0;
     348:	2300      	movs	r3, #0
     34a:	60fb      	str	r3, [r7, #12]
  
   __ASM volatile ("strexh %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     34c:	683a      	ldr	r2, [r7, #0]
     34e:	88f9      	ldrh	r1, [r7, #6]
     350:	e8c2 1f53 	strexh	r3, r1, [r2]
     354:	60fb      	str	r3, [r7, #12]
   return(result);
     356:	68fb      	ldr	r3, [r7, #12]
}
     358:	4618      	mov	r0, r3
     35a:	3714      	adds	r7, #20
     35c:	46bd      	mov	sp, r7
     35e:	f85d 7b04 	ldr.w	r7, [sp], #4
     362:	4770      	bx	lr

00000364 <__STREXW>:
 * @return        successful / failed
 *
 * Exclusive STR command for 32 bit values
 */
uint32_t __STREXW(uint32_t value, uint32_t *addr)
{
     364:	b480      	push	{r7}
     366:	b085      	sub	sp, #20
     368:	af00      	add	r7, sp, #0
     36a:	6078      	str	r0, [r7, #4]
     36c:	6039      	str	r1, [r7, #0]
   uint32_t result=0;
     36e:	2300      	movs	r3, #0
     370:	60fb      	str	r3, [r7, #12]
  
   __ASM volatile ("strex %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
     372:	683b      	ldr	r3, [r7, #0]
     374:	687a      	ldr	r2, [r7, #4]
     376:	e843 2300 	strex	r3, r2, [r3]
     37a:	60fb      	str	r3, [r7, #12]
   return(result);
     37c:	68fb      	ldr	r3, [r7, #12]
}
     37e:	4618      	mov	r0, r3
     380:	3714      	adds	r7, #20
     382:	46bd      	mov	sp, r7
     384:	f85d 7b04 	ldr.w	r7, [sp], #4
     388:	4770      	bx	lr
     38a:	bf00      	nop

0000038c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
     38c:	b580      	push	{r7, lr}
     38e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     390:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     394:	f2c4 0302 	movt	r3, #16386	; 0x4002
     398:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     39c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3a0:	6812      	ldr	r2, [r2, #0]
     3a2:	f042 0201 	orr.w	r2, r2, #1
     3a6:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     3a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     3ac:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3b4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3b8:	6859      	ldr	r1, [r3, #4]
     3ba:	2300      	movs	r3, #0
     3bc:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     3c0:	400b      	ands	r3, r1
     3c2:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     3c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3c8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     3d0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3d4:	6812      	ldr	r2, [r2, #0]
     3d6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     3da:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     3de:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     3e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3e4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     3ec:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3f0:	6812      	ldr	r2, [r2, #0]
     3f2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     3f6:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     3f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3fc:	f2c4 0302 	movt	r3, #16386	; 0x4002
     400:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     404:	f2c4 0202 	movt	r2, #16386	; 0x4002
     408:	6852      	ldr	r2, [r2, #4]
     40a:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     40e:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     410:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     414:	f2c4 0302 	movt	r3, #16386	; 0x4002
     418:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     41c:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
     41e:	f000 f8a7 	bl	570 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
     422:	f44f 436d 	mov.w	r3, #60672	; 0xed00
     426:	f2ce 0300 	movt	r3, #57344	; 0xe000
     42a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
     42e:	609a      	str	r2, [r3, #8]
#endif 
}
     430:	bd80      	pop	{r7, pc}
     432:	bf00      	nop

00000434 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
     434:	b480      	push	{r7}
     436:	b085      	sub	sp, #20
     438:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
     43a:	2300      	movs	r3, #0
     43c:	60fb      	str	r3, [r7, #12]
     43e:	2300      	movs	r3, #0
     440:	60bb      	str	r3, [r7, #8]
     442:	2300      	movs	r3, #0
     444:	607b      	str	r3, [r7, #4]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
     446:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     44a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     44e:	685b      	ldr	r3, [r3, #4]
     450:	f003 030c 	and.w	r3, r3, #12
     454:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
     456:	68fb      	ldr	r3, [r7, #12]
     458:	2b04      	cmp	r3, #4
     45a:	d00d      	beq.n	478 <SystemCoreClockUpdate+0x44>
     45c:	2b08      	cmp	r3, #8
     45e:	d015      	beq.n	48c <SystemCoreClockUpdate+0x58>
     460:	2b00      	cmp	r3, #0
     462:	d15b      	bne.n	51c <SystemCoreClockUpdate+0xe8>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
     464:	f240 0300 	movw	r3, #0
     468:	f2c2 0300 	movt	r3, #8192	; 0x2000
     46c:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     470:	f2c0 027a 	movt	r2, #122	; 0x7a
     474:	601a      	str	r2, [r3, #0]
      break;
     476:	e05b      	b.n	530 <SystemCoreClockUpdate+0xfc>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
     478:	f240 0300 	movw	r3, #0
     47c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     480:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     484:	f2c0 027a 	movt	r2, #122	; 0x7a
     488:	601a      	str	r2, [r3, #0]
      break;
     48a:	e051      	b.n	530 <SystemCoreClockUpdate+0xfc>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
     48c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     490:	f2c4 0302 	movt	r3, #16386	; 0x4002
     494:	685b      	ldr	r3, [r3, #4]
     496:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     49a:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
     49c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     4a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     4a4:	685b      	ldr	r3, [r3, #4]
     4a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     4aa:	607b      	str	r3, [r7, #4]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
     4ac:	68bb      	ldr	r3, [r7, #8]
     4ae:	0c9b      	lsrs	r3, r3, #18
     4b0:	3302      	adds	r3, #2
     4b2:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00)
     4b4:	687b      	ldr	r3, [r7, #4]
     4b6:	2b00      	cmp	r3, #0
     4b8:	d10c      	bne.n	4d4 <SystemCoreClockUpdate+0xa0>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
     4ba:	68ba      	ldr	r2, [r7, #8]
     4bc:	f44f 6310 	mov.w	r3, #2304	; 0x900
     4c0:	f2c0 033d 	movt	r3, #61	; 0x3d
     4c4:	fb03 f202 	mul.w	r2, r3, r2
     4c8:	f240 0300 	movw	r3, #0
     4cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4d0:	601a      	str	r2, [r3, #0]
     4d2:	e022      	b.n	51a <SystemCoreClockUpdate+0xe6>
       prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
     4d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     4d8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     4dc:	685b      	ldr	r3, [r3, #4]
     4de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     4e2:	2b00      	cmp	r3, #0
     4e4:	d00c      	beq.n	500 <SystemCoreClockUpdate+0xcc>
        {/* HSE oscillator clock divided by 2 */
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
     4e6:	68ba      	ldr	r2, [r7, #8]
     4e8:	f44f 6310 	mov.w	r3, #2304	; 0x900
     4ec:	f2c0 033d 	movt	r3, #61	; 0x3d
     4f0:	fb03 f202 	mul.w	r2, r3, r2
     4f4:	f240 0300 	movw	r3, #0
     4f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4fc:	601a      	str	r2, [r3, #0]
     4fe:	e00c      	b.n	51a <SystemCoreClockUpdate+0xe6>
        }
        else
        {
          SystemCoreClock = HSE_VALUE * pllmull;
     500:	68ba      	ldr	r2, [r7, #8]
     502:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     506:	f2c0 037a 	movt	r3, #122	; 0x7a
     50a:	fb03 f202 	mul.w	r2, r3, r2
     50e:	f240 0300 	movw	r3, #0
     512:	f2c2 0300 	movt	r3, #8192	; 0x2000
     516:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
     518:	e00a      	b.n	530 <SystemCoreClockUpdate+0xfc>
     51a:	e009      	b.n	530 <SystemCoreClockUpdate+0xfc>

    default:
      SystemCoreClock = HSI_VALUE;
     51c:	f240 0300 	movw	r3, #0
     520:	f2c2 0300 	movt	r3, #8192	; 0x2000
     524:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     528:	f2c0 027a 	movt	r2, #122	; 0x7a
     52c:	601a      	str	r2, [r3, #0]
      break;
     52e:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
     530:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     534:	f2c4 0302 	movt	r3, #16386	; 0x4002
     538:	685b      	ldr	r3, [r3, #4]
     53a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     53e:	091a      	lsrs	r2, r3, #4
     540:	f240 0304 	movw	r3, #4
     544:	f2c2 0300 	movt	r3, #8192	; 0x2000
     548:	5c9b      	ldrb	r3, [r3, r2]
     54a:	b2db      	uxtb	r3, r3
     54c:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
     54e:	f240 0300 	movw	r3, #0
     552:	f2c2 0300 	movt	r3, #8192	; 0x2000
     556:	681a      	ldr	r2, [r3, #0]
     558:	68fb      	ldr	r3, [r7, #12]
     55a:	40da      	lsrs	r2, r3
     55c:	f240 0300 	movw	r3, #0
     560:	f2c2 0300 	movt	r3, #8192	; 0x2000
     564:	601a      	str	r2, [r3, #0]
}
     566:	3714      	adds	r7, #20
     568:	46bd      	mov	sp, r7
     56a:	f85d 7b04 	ldr.w	r7, [sp], #4
     56e:	4770      	bx	lr

00000570 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
     570:	b580      	push	{r7, lr}
     572:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
     574:	f000 f802 	bl	57c <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
     578:	bd80      	pop	{r7, pc}
     57a:	bf00      	nop

0000057c <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
     57c:	b480      	push	{r7}
     57e:	b083      	sub	sp, #12
     580:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
     582:	2300      	movs	r3, #0
     584:	607b      	str	r3, [r7, #4]
     586:	2300      	movs	r3, #0
     588:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
     58a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     58e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     592:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     596:	f2c4 0202 	movt	r2, #16386	; 0x4002
     59a:	6812      	ldr	r2, [r2, #0]
     59c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     5a0:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
     5a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5a6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5aa:	681b      	ldr	r3, [r3, #0]
     5ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     5b0:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
     5b2:	687b      	ldr	r3, [r7, #4]
     5b4:	3301      	adds	r3, #1
     5b6:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
     5b8:	683b      	ldr	r3, [r7, #0]
     5ba:	2b00      	cmp	r3, #0
     5bc:	d103      	bne.n	5c6 <SetSysClockTo72+0x4a>
     5be:	687b      	ldr	r3, [r7, #4]
     5c0:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     5c4:	d1ed      	bne.n	5a2 <SetSysClockTo72+0x26>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
     5c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5ca:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5ce:	681b      	ldr	r3, [r3, #0]
     5d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     5d4:	2b00      	cmp	r3, #0
     5d6:	d002      	beq.n	5de <SetSysClockTo72+0x62>
  {
    HSEStatus = (uint32_t)0x01;
     5d8:	2301      	movs	r3, #1
     5da:	603b      	str	r3, [r7, #0]
     5dc:	e001      	b.n	5e2 <SetSysClockTo72+0x66>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
     5de:	2300      	movs	r3, #0
     5e0:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
     5e2:	683b      	ldr	r3, [r7, #0]
     5e4:	2b01      	cmp	r3, #1
     5e6:	f040 8094 	bne.w	712 <SetSysClockTo72+0x196>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
     5ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     5ee:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5f6:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5fa:	6812      	ldr	r2, [r2, #0]
     5fc:	f042 0210 	orr.w	r2, r2, #16
     600:	601a      	str	r2, [r3, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
     602:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     606:	f2c4 0302 	movt	r3, #16386	; 0x4002
     60a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     60e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     612:	6812      	ldr	r2, [r2, #0]
     614:	f022 0203 	bic.w	r2, r2, #3
     618:	601a      	str	r2, [r3, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
     61a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     61e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     622:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     626:	f2c4 0202 	movt	r2, #16386	; 0x4002
     62a:	6812      	ldr	r2, [r2, #0]
     62c:	f042 0202 	orr.w	r2, r2, #2
     630:	601a      	str	r2, [r3, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
     632:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     636:	f2c4 0302 	movt	r3, #16386	; 0x4002
     63a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     63e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     642:	6852      	ldr	r2, [r2, #4]
     644:	605a      	str	r2, [r3, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
     646:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     64a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     64e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     652:	f2c4 0202 	movt	r2, #16386	; 0x4002
     656:	6852      	ldr	r2, [r2, #4]
     658:	605a      	str	r2, [r3, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
     65a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     65e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     662:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     666:	f2c4 0202 	movt	r2, #16386	; 0x4002
     66a:	6852      	ldr	r2, [r2, #4]
     66c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     670:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
     672:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     676:	f2c4 0302 	movt	r3, #16386	; 0x4002
     67a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     67e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     682:	6852      	ldr	r2, [r2, #4]
     684:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
     688:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
     68a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     68e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     692:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     696:	f2c4 0202 	movt	r2, #16386	; 0x4002
     69a:	6852      	ldr	r2, [r2, #4]
     69c:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
     6a0:	605a      	str	r2, [r3, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
     6a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6a6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6ae:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6b2:	6812      	ldr	r2, [r2, #0]
     6b4:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     6b8:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
     6ba:	bf00      	nop
     6bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6c0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6c4:	681b      	ldr	r3, [r3, #0]
     6c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
     6ca:	2b00      	cmp	r3, #0
     6cc:	d0f6      	beq.n	6bc <SetSysClockTo72+0x140>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
     6ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6d2:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6da:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6de:	6852      	ldr	r2, [r2, #4]
     6e0:	f022 0203 	bic.w	r2, r2, #3
     6e4:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
     6e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6ea:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6ee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6f2:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6f6:	6852      	ldr	r2, [r2, #4]
     6f8:	f042 0202 	orr.w	r2, r2, #2
     6fc:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
     6fe:	bf00      	nop
     700:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     704:	f2c4 0302 	movt	r3, #16386	; 0x4002
     708:	685b      	ldr	r3, [r3, #4]
     70a:	f003 030c 	and.w	r3, r3, #12
     70e:	2b08      	cmp	r3, #8
     710:	d1f6      	bne.n	700 <SetSysClockTo72+0x184>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
     712:	370c      	adds	r7, #12
     714:	46bd      	mov	sp, r7
     716:	f85d 7b04 	ldr.w	r7, [sp], #4
     71a:	4770      	bx	lr
     71c:	00006644 	.word	0x00006644
     720:	20000000 	.word	0x20000000
     724:	20000034 	.word	0x20000034
     728:	20000038 	.word	0x20000038
     72c:	2000d938 	.word	0x2000d938

00000730 <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
     730:	b480      	push	{r7}
     732:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     734:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     738:	f2c4 0302 	movt	r3, #16386	; 0x4002
     73c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     740:	f2c4 0202 	movt	r2, #16386	; 0x4002
     744:	6812      	ldr	r2, [r2, #0]
     746:	f042 0201 	orr.w	r2, r2, #1
     74a:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     74c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     750:	f2c4 0202 	movt	r2, #16386	; 0x4002
     754:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     758:	f2c4 0302 	movt	r3, #16386	; 0x4002
     75c:	6859      	ldr	r1, [r3, #4]
     75e:	2300      	movs	r3, #0
     760:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     764:	400b      	ands	r3, r1
     766:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     768:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     76c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     770:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     774:	f2c4 0202 	movt	r2, #16386	; 0x4002
     778:	6812      	ldr	r2, [r2, #0]
     77a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     77e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     782:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     784:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     788:	f2c4 0302 	movt	r3, #16386	; 0x4002
     78c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     790:	f2c4 0202 	movt	r2, #16386	; 0x4002
     794:	6812      	ldr	r2, [r2, #0]
     796:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     79a:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     79c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7a8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7ac:	6852      	ldr	r2, [r2, #4]
     7ae:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     7b2:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     7b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7b8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7bc:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     7c0:	609a      	str	r2, [r3, #8]
#endif /* STM32F10X_CL */

}
     7c2:	46bd      	mov	sp, r7
     7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     7c8:	4770      	bx	lr
     7ca:	bf00      	nop

000007cc <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
     7cc:	b480      	push	{r7}
     7ce:	b083      	sub	sp, #12
     7d0:	af00      	add	r7, sp, #0
     7d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
     7d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7d8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7e0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7e4:	6812      	ldr	r2, [r2, #0]
     7e6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     7ea:	601a      	str	r2, [r3, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
     7ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7f0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7f8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7fc:	6812      	ldr	r2, [r2, #0]
     7fe:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     802:	601a      	str	r2, [r3, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
     804:	687b      	ldr	r3, [r7, #4]
     806:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
     80a:	d003      	beq.n	814 <RCC_HSEConfig+0x48>
     80c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
     810:	d00d      	beq.n	82e <RCC_HSEConfig+0x62>
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
      break;
      
    default:
      break;
     812:	e019      	b.n	848 <RCC_HSEConfig+0x7c>
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
     814:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     818:	f2c4 0302 	movt	r3, #16386	; 0x4002
     81c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     820:	f2c4 0202 	movt	r2, #16386	; 0x4002
     824:	6812      	ldr	r2, [r2, #0]
     826:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     82a:	601a      	str	r2, [r3, #0]
      break;
     82c:	e00c      	b.n	848 <RCC_HSEConfig+0x7c>
      
    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
     82e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     832:	f2c4 0302 	movt	r3, #16386	; 0x4002
     836:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     83a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     83e:	6812      	ldr	r2, [r2, #0]
     840:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
     844:	601a      	str	r2, [r3, #0]
      break;
     846:	bf00      	nop
      
    default:
      break;
  }
}
     848:	370c      	adds	r7, #12
     84a:	46bd      	mov	sp, r7
     84c:	f85d 7b04 	ldr.w	r7, [sp], #4
     850:	4770      	bx	lr
     852:	bf00      	nop

00000854 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
     854:	b580      	push	{r7, lr}
     856:	b082      	sub	sp, #8
     858:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0;
     85a:	2300      	movs	r3, #0
     85c:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
     85e:	2300      	movs	r3, #0
     860:	71fb      	strb	r3, [r7, #7]
  FlagStatus HSEStatus = RESET;
     862:	2300      	movs	r3, #0
     864:	71bb      	strb	r3, [r7, #6]
  
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
     866:	2031      	movs	r0, #49	; 0x31
     868:	f000 fba2 	bl	fb0 <RCC_GetFlagStatus>
     86c:	4603      	mov	r3, r0
     86e:	71bb      	strb	r3, [r7, #6]
    StartUpCounter++;  
     870:	683b      	ldr	r3, [r7, #0]
     872:	3301      	adds	r3, #1
     874:	603b      	str	r3, [r7, #0]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
     876:	683b      	ldr	r3, [r7, #0]
     878:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     87c:	d002      	beq.n	884 <RCC_WaitForHSEStartUp+0x30>
     87e:	79bb      	ldrb	r3, [r7, #6]
     880:	2b00      	cmp	r3, #0
     882:	d0f0      	beq.n	866 <RCC_WaitForHSEStartUp+0x12>
  
  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
     884:	2031      	movs	r0, #49	; 0x31
     886:	f000 fb93 	bl	fb0 <RCC_GetFlagStatus>
     88a:	4603      	mov	r3, r0
     88c:	2b00      	cmp	r3, #0
     88e:	d002      	beq.n	896 <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
     890:	2301      	movs	r3, #1
     892:	71fb      	strb	r3, [r7, #7]
     894:	e001      	b.n	89a <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
     896:	2300      	movs	r3, #0
     898:	71fb      	strb	r3, [r7, #7]
  }  
  return (status);
     89a:	79fb      	ldrb	r3, [r7, #7]
}
     89c:	4618      	mov	r0, r3
     89e:	3708      	adds	r7, #8
     8a0:	46bd      	mov	sp, r7
     8a2:	bd80      	pop	{r7, pc}

000008a4 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *   This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
     8a4:	b480      	push	{r7}
     8a6:	b085      	sub	sp, #20
     8a8:	af00      	add	r7, sp, #0
     8aa:	4603      	mov	r3, r0
     8ac:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
     8ae:	2300      	movs	r3, #0
     8b0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
  tmpreg = RCC->CR;
     8b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     8b6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     8ba:	681b      	ldr	r3, [r3, #0]
     8bc:	60fb      	str	r3, [r7, #12]
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
     8be:	68fb      	ldr	r3, [r7, #12]
     8c0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
     8c4:	60fb      	str	r3, [r7, #12]
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
     8c6:	79fb      	ldrb	r3, [r7, #7]
     8c8:	00db      	lsls	r3, r3, #3
     8ca:	68fa      	ldr	r2, [r7, #12]
     8cc:	4313      	orrs	r3, r2
     8ce:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CR = tmpreg;
     8d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     8d4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     8d8:	68fa      	ldr	r2, [r7, #12]
     8da:	601a      	str	r2, [r3, #0]
}
     8dc:	3714      	adds	r7, #20
     8de:	46bd      	mov	sp, r7
     8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
     8e4:	4770      	bx	lr
     8e6:	bf00      	nop

000008e8 <RCC_HSICmd>:
  * @note   HSI can not be stopped if it is used directly or through the PLL as system clock.
  * @param  NewState: new state of the HSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
     8e8:	b480      	push	{r7}
     8ea:	b083      	sub	sp, #12
     8ec:	af00      	add	r7, sp, #0
     8ee:	4603      	mov	r3, r0
     8f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
     8f2:	2300      	movs	r3, #0
     8f4:	f2c4 2342 	movt	r3, #16962	; 0x4242
     8f8:	79fa      	ldrb	r2, [r7, #7]
     8fa:	601a      	str	r2, [r3, #0]
}
     8fc:	370c      	adds	r7, #12
     8fe:	46bd      	mov	sp, r7
     900:	f85d 7b04 	ldr.w	r7, [sp], #4
     904:	4770      	bx	lr
     906:	bf00      	nop

00000908 <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]  
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
     908:	b480      	push	{r7}
     90a:	b085      	sub	sp, #20
     90c:	af00      	add	r7, sp, #0
     90e:	6078      	str	r0, [r7, #4]
     910:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
     912:	2300      	movs	r3, #0
     914:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
     916:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     91a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     91e:	685b      	ldr	r3, [r3, #4]
     920:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
     922:	68fb      	ldr	r3, [r7, #12]
     924:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
     928:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
     92a:	687a      	ldr	r2, [r7, #4]
     92c:	683b      	ldr	r3, [r7, #0]
     92e:	4313      	orrs	r3, r2
     930:	68fa      	ldr	r2, [r7, #12]
     932:	4313      	orrs	r3, r2
     934:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     936:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     93a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     93e:	68fa      	ldr	r2, [r7, #12]
     940:	605a      	str	r2, [r3, #4]
}
     942:	3714      	adds	r7, #20
     944:	46bd      	mov	sp, r7
     946:	f85d 7b04 	ldr.w	r7, [sp], #4
     94a:	4770      	bx	lr

0000094c <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
     94c:	b480      	push	{r7}
     94e:	b083      	sub	sp, #12
     950:	af00      	add	r7, sp, #0
     952:	4603      	mov	r3, r0
     954:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
     956:	2360      	movs	r3, #96	; 0x60
     958:	f2c4 2342 	movt	r3, #16962	; 0x4242
     95c:	79fa      	ldrb	r2, [r7, #7]
     95e:	601a      	str	r2, [r3, #0]
}
     960:	370c      	adds	r7, #12
     962:	46bd      	mov	sp, r7
     964:	f85d 7b04 	ldr.w	r7, [sp], #4
     968:	4770      	bx	lr
     96a:	bf00      	nop

0000096c <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
     96c:	b480      	push	{r7}
     96e:	b085      	sub	sp, #20
     970:	af00      	add	r7, sp, #0
     972:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     974:	2300      	movs	r3, #0
     976:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
     978:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     97c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     980:	685b      	ldr	r3, [r3, #4]
     982:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
     984:	68fb      	ldr	r3, [r7, #12]
     986:	f023 0303 	bic.w	r3, r3, #3
     98a:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
     98c:	68fa      	ldr	r2, [r7, #12]
     98e:	687b      	ldr	r3, [r7, #4]
     990:	4313      	orrs	r3, r2
     992:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     994:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     998:	f2c4 0302 	movt	r3, #16386	; 0x4002
     99c:	68fa      	ldr	r2, [r7, #12]
     99e:	605a      	str	r2, [r3, #4]
}
     9a0:	3714      	adds	r7, #20
     9a2:	46bd      	mov	sp, r7
     9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9a8:	4770      	bx	lr
     9aa:	bf00      	nop

000009ac <RCC_GetSYSCLKSource>:
  *     - 0x00: HSI used as system clock
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
     9ac:	b480      	push	{r7}
     9ae:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
     9b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9b4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9b8:	685b      	ldr	r3, [r3, #4]
     9ba:	b2db      	uxtb	r3, r3
     9bc:	f003 030c 	and.w	r3, r3, #12
     9c0:	b2db      	uxtb	r3, r3
}
     9c2:	4618      	mov	r0, r3
     9c4:	46bd      	mov	sp, r7
     9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
     9ca:	4770      	bx	lr

000009cc <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
     9cc:	b480      	push	{r7}
     9ce:	b085      	sub	sp, #20
     9d0:	af00      	add	r7, sp, #0
     9d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     9d4:	2300      	movs	r3, #0
     9d6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
     9d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9dc:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9e0:	685b      	ldr	r3, [r3, #4]
     9e2:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
     9e4:	68fb      	ldr	r3, [r7, #12]
     9e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
     9ea:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
     9ec:	68fa      	ldr	r2, [r7, #12]
     9ee:	687b      	ldr	r3, [r7, #4]
     9f0:	4313      	orrs	r3, r2
     9f2:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     9f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9f8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9fc:	68fa      	ldr	r2, [r7, #12]
     9fe:	605a      	str	r2, [r3, #4]
}
     a00:	3714      	adds	r7, #20
     a02:	46bd      	mov	sp, r7
     a04:	f85d 7b04 	ldr.w	r7, [sp], #4
     a08:	4770      	bx	lr
     a0a:	bf00      	nop

00000a0c <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
     a0c:	b480      	push	{r7}
     a0e:	b085      	sub	sp, #20
     a10:	af00      	add	r7, sp, #0
     a12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     a14:	2300      	movs	r3, #0
     a16:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     a18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a1c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a20:	685b      	ldr	r3, [r3, #4]
     a22:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
     a24:	68fb      	ldr	r3, [r7, #12]
     a26:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
     a2a:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
     a2c:	68fa      	ldr	r2, [r7, #12]
     a2e:	687b      	ldr	r3, [r7, #4]
     a30:	4313      	orrs	r3, r2
     a32:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     a34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a38:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a3c:	68fa      	ldr	r2, [r7, #12]
     a3e:	605a      	str	r2, [r3, #4]
}
     a40:	3714      	adds	r7, #20
     a42:	46bd      	mov	sp, r7
     a44:	f85d 7b04 	ldr.w	r7, [sp], #4
     a48:	4770      	bx	lr
     a4a:	bf00      	nop

00000a4c <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
     a4c:	b480      	push	{r7}
     a4e:	b085      	sub	sp, #20
     a50:	af00      	add	r7, sp, #0
     a52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     a54:	2300      	movs	r3, #0
     a56:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     a58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a5c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a60:	685b      	ldr	r3, [r3, #4]
     a62:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
     a64:	68fb      	ldr	r3, [r7, #12]
     a66:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
     a6a:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
     a6c:	687b      	ldr	r3, [r7, #4]
     a6e:	00db      	lsls	r3, r3, #3
     a70:	68fa      	ldr	r2, [r7, #12]
     a72:	4313      	orrs	r3, r2
     a74:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     a76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a7a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a7e:	68fa      	ldr	r2, [r7, #12]
     a80:	605a      	str	r2, [r3, #4]
}
     a82:	3714      	adds	r7, #20
     a84:	46bd      	mov	sp, r7
     a86:	f85d 7b04 	ldr.w	r7, [sp], #4
     a8a:	4770      	bx	lr

00000a8c <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
     a8c:	b480      	push	{r7}
     a8e:	b083      	sub	sp, #12
     a90:	af00      	add	r7, sp, #0
     a92:	4602      	mov	r2, r0
     a94:	460b      	mov	r3, r1
     a96:	71fa      	strb	r2, [r7, #7]
     a98:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     a9a:	79bb      	ldrb	r3, [r7, #6]
     a9c:	2b00      	cmp	r3, #0
     a9e:	d00e      	beq.n	abe <RCC_ITConfig+0x32>
  {
    /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
     aa0:	f241 0309 	movw	r3, #4105	; 0x1009
     aa4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     aa8:	f241 0209 	movw	r2, #4105	; 0x1009
     aac:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ab0:	7812      	ldrb	r2, [r2, #0]
     ab2:	b2d1      	uxtb	r1, r2
     ab4:	79fa      	ldrb	r2, [r7, #7]
     ab6:	430a      	orrs	r2, r1
     ab8:	b2d2      	uxtb	r2, r2
     aba:	701a      	strb	r2, [r3, #0]
     abc:	e00f      	b.n	ade <RCC_ITConfig+0x52>
  }
  else
  {
    /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
     abe:	f241 0309 	movw	r3, #4105	; 0x1009
     ac2:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ac6:	f241 0209 	movw	r2, #4105	; 0x1009
     aca:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ace:	7812      	ldrb	r2, [r2, #0]
     ad0:	b2d1      	uxtb	r1, r2
     ad2:	79fa      	ldrb	r2, [r7, #7]
     ad4:	43d2      	mvns	r2, r2
     ad6:	b2d2      	uxtb	r2, r2
     ad8:	400a      	ands	r2, r1
     ada:	b2d2      	uxtb	r2, r2
     adc:	701a      	strb	r2, [r3, #0]
  }
}
     ade:	370c      	adds	r7, #12
     ae0:	46bd      	mov	sp, r7
     ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
     ae6:	4770      	bx	lr

00000ae8 <RCC_USBCLKConfig>:
  *                                     clock source
  *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
  * @retval None
  */
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
     ae8:	b480      	push	{r7}
     aea:	b083      	sub	sp, #12
     aec:	af00      	add	r7, sp, #0
     aee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
     af0:	23d8      	movs	r3, #216	; 0xd8
     af2:	f2c4 2342 	movt	r3, #16962	; 0x4242
     af6:	687a      	ldr	r2, [r7, #4]
     af8:	601a      	str	r2, [r3, #0]
}
     afa:	370c      	adds	r7, #12
     afc:	46bd      	mov	sp, r7
     afe:	f85d 7b04 	ldr.w	r7, [sp], #4
     b02:	4770      	bx	lr

00000b04 <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
     b04:	b480      	push	{r7}
     b06:	b085      	sub	sp, #20
     b08:	af00      	add	r7, sp, #0
     b0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     b0c:	2300      	movs	r3, #0
     b0e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
     b10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     b14:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b18:	685b      	ldr	r3, [r3, #4]
     b1a:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
     b1c:	68fb      	ldr	r3, [r7, #12]
     b1e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
     b22:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
     b24:	68fa      	ldr	r2, [r7, #12]
     b26:	687b      	ldr	r3, [r7, #4]
     b28:	4313      	orrs	r3, r2
     b2a:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     b2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     b30:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b34:	68fa      	ldr	r2, [r7, #12]
     b36:	605a      	str	r2, [r3, #4]
}
     b38:	3714      	adds	r7, #20
     b3a:	46bd      	mov	sp, r7
     b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
     b40:	4770      	bx	lr
     b42:	bf00      	nop

00000b44 <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: LSE oscillator ON
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
     b44:	b480      	push	{r7}
     b46:	b083      	sub	sp, #12
     b48:	af00      	add	r7, sp, #0
     b4a:	4603      	mov	r3, r0
     b4c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     b4e:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b52:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b56:	2200      	movs	r2, #0
     b58:	701a      	strb	r2, [r3, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     b5a:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b5e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b62:	2200      	movs	r2, #0
     b64:	701a      	strb	r2, [r3, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
     b66:	79fb      	ldrb	r3, [r7, #7]
     b68:	2b01      	cmp	r3, #1
     b6a:	d002      	beq.n	b72 <RCC_LSEConfig+0x2e>
     b6c:	2b04      	cmp	r3, #4
     b6e:	d007      	beq.n	b80 <RCC_LSEConfig+0x3c>
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;            
      
    default:
      break;      
     b70:	e00d      	b.n	b8e <RCC_LSEConfig+0x4a>
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
     b72:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b76:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b7a:	2201      	movs	r2, #1
     b7c:	701a      	strb	r2, [r3, #0]
      break;
     b7e:	e006      	b.n	b8e <RCC_LSEConfig+0x4a>
      
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
     b80:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b84:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b88:	2205      	movs	r2, #5
     b8a:	701a      	strb	r2, [r3, #0]
      break;            
     b8c:	bf00      	nop
      
    default:
      break;      
  }
}
     b8e:	370c      	adds	r7, #12
     b90:	46bd      	mov	sp, r7
     b92:	f85d 7b04 	ldr.w	r7, [sp], #4
     b96:	4770      	bx	lr

00000b98 <RCC_LSICmd>:
  * @note   LSI can not be disabled if the IWDG is running.
  * @param  NewState: new state of the LSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
     b98:	b480      	push	{r7}
     b9a:	b083      	sub	sp, #12
     b9c:	af00      	add	r7, sp, #0
     b9e:	4603      	mov	r3, r0
     ba0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
     ba2:	f44f 6390 	mov.w	r3, #1152	; 0x480
     ba6:	f2c4 2342 	movt	r3, #16962	; 0x4242
     baa:	79fa      	ldrb	r2, [r7, #7]
     bac:	601a      	str	r2, [r3, #0]
}
     bae:	370c      	adds	r7, #12
     bb0:	46bd      	mov	sp, r7
     bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
     bb6:	4770      	bx	lr

00000bb8 <RCC_RTCCLKConfig>:
  *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
  *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
     bb8:	b480      	push	{r7}
     bba:	b083      	sub	sp, #12
     bbc:	af00      	add	r7, sp, #0
     bbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
     bc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     bc4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     bc8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     bcc:	f2c4 0202 	movt	r2, #16386	; 0x4002
     bd0:	6a11      	ldr	r1, [r2, #32]
     bd2:	687a      	ldr	r2, [r7, #4]
     bd4:	430a      	orrs	r2, r1
     bd6:	621a      	str	r2, [r3, #32]
}
     bd8:	370c      	adds	r7, #12
     bda:	46bd      	mov	sp, r7
     bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
     be0:	4770      	bx	lr
     be2:	bf00      	nop

00000be4 <RCC_RTCCLKCmd>:
  * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
     be4:	b480      	push	{r7}
     be6:	b083      	sub	sp, #12
     be8:	af00      	add	r7, sp, #0
     bea:	4603      	mov	r3, r0
     bec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
     bee:	f240 433c 	movw	r3, #1084	; 0x43c
     bf2:	f2c4 2342 	movt	r3, #16962	; 0x4242
     bf6:	79fa      	ldrb	r2, [r7, #7]
     bf8:	601a      	str	r2, [r3, #0]
}
     bfa:	370c      	adds	r7, #12
     bfc:	46bd      	mov	sp, r7
     bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
     c02:	4770      	bx	lr

00000c04 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
     c04:	b480      	push	{r7}
     c06:	b087      	sub	sp, #28
     c08:	af00      	add	r7, sp, #0
     c0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
     c0c:	2300      	movs	r3, #0
     c0e:	617b      	str	r3, [r7, #20]
     c10:	2300      	movs	r3, #0
     c12:	613b      	str	r3, [r7, #16]
     c14:	2300      	movs	r3, #0
     c16:	60fb      	str	r3, [r7, #12]
     c18:	2300      	movs	r3, #0
     c1a:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
     c1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c20:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c24:	685b      	ldr	r3, [r3, #4]
     c26:	f003 030c 	and.w	r3, r3, #12
     c2a:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
     c2c:	697b      	ldr	r3, [r7, #20]
     c2e:	2b04      	cmp	r3, #4
     c30:	d00a      	beq.n	c48 <RCC_GetClocksFreq+0x44>
     c32:	2b08      	cmp	r3, #8
     c34:	d00f      	beq.n	c56 <RCC_GetClocksFreq+0x52>
     c36:	2b00      	cmp	r3, #0
     c38:	d14c      	bne.n	cd4 <RCC_GetClocksFreq+0xd0>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     c3a:	687a      	ldr	r2, [r7, #4]
     c3c:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     c40:	f2c0 037a 	movt	r3, #122	; 0x7a
     c44:	6013      	str	r3, [r2, #0]
      break;
     c46:	e04c      	b.n	ce2 <RCC_GetClocksFreq+0xde>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
     c48:	687a      	ldr	r2, [r7, #4]
     c4a:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     c4e:	f2c0 037a 	movt	r3, #122	; 0x7a
     c52:	6013      	str	r3, [r2, #0]
      break;
     c54:	e045      	b.n	ce2 <RCC_GetClocksFreq+0xde>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
     c56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c5a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c5e:	685b      	ldr	r3, [r3, #4]
     c60:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     c64:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
     c66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c6a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c6e:	685b      	ldr	r3, [r3, #4]
     c70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     c74:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
     c76:	693b      	ldr	r3, [r7, #16]
     c78:	0c9b      	lsrs	r3, r3, #18
     c7a:	3302      	adds	r3, #2
     c7c:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
     c7e:	68fb      	ldr	r3, [r7, #12]
     c80:	2b00      	cmp	r3, #0
     c82:	d109      	bne.n	c98 <RCC_GetClocksFreq+0x94>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
     c84:	693a      	ldr	r2, [r7, #16]
     c86:	f44f 6310 	mov.w	r3, #2304	; 0x900
     c8a:	f2c0 033d 	movt	r3, #61	; 0x3d
     c8e:	fb03 f202 	mul.w	r2, r3, r2
     c92:	687b      	ldr	r3, [r7, #4]
     c94:	601a      	str	r2, [r3, #0]
     c96:	e01c      	b.n	cd2 <RCC_GetClocksFreq+0xce>
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
     c98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c9c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ca0:	685b      	ldr	r3, [r3, #4]
     ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     ca6:	2b00      	cmp	r3, #0
     ca8:	d009      	beq.n	cbe <RCC_GetClocksFreq+0xba>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
     caa:	693a      	ldr	r2, [r7, #16]
     cac:	f44f 6310 	mov.w	r3, #2304	; 0x900
     cb0:	f2c0 033d 	movt	r3, #61	; 0x3d
     cb4:	fb03 f202 	mul.w	r2, r3, r2
     cb8:	687b      	ldr	r3, [r7, #4]
     cba:	601a      	str	r2, [r3, #0]
     cbc:	e009      	b.n	cd2 <RCC_GetClocksFreq+0xce>
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
     cbe:	693a      	ldr	r2, [r7, #16]
     cc0:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     cc4:	f2c0 037a 	movt	r3, #122	; 0x7a
     cc8:	fb03 f202 	mul.w	r2, r3, r2
     ccc:	687b      	ldr	r3, [r7, #4]
     cce:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
     cd0:	e007      	b.n	ce2 <RCC_GetClocksFreq+0xde>
     cd2:	e006      	b.n	ce2 <RCC_GetClocksFreq+0xde>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     cd4:	687a      	ldr	r2, [r7, #4]
     cd6:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     cda:	f2c0 037a 	movt	r3, #122	; 0x7a
     cde:	6013      	str	r3, [r2, #0]
      break;
     ce0:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
     ce2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ce6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     cea:	685b      	ldr	r3, [r3, #4]
     cec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     cf0:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
     cf2:	697b      	ldr	r3, [r7, #20]
     cf4:	091b      	lsrs	r3, r3, #4
     cf6:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     cf8:	f240 0314 	movw	r3, #20
     cfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d00:	697a      	ldr	r2, [r7, #20]
     d02:	4413      	add	r3, r2
     d04:	781b      	ldrb	r3, [r3, #0]
     d06:	b2db      	uxtb	r3, r3
     d08:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
     d0a:	687b      	ldr	r3, [r7, #4]
     d0c:	681a      	ldr	r2, [r3, #0]
     d0e:	68bb      	ldr	r3, [r7, #8]
     d10:	40da      	lsrs	r2, r3
     d12:	687b      	ldr	r3, [r7, #4]
     d14:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
     d16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d1a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d1e:	685b      	ldr	r3, [r3, #4]
     d20:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
     d24:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
     d26:	697b      	ldr	r3, [r7, #20]
     d28:	0a1b      	lsrs	r3, r3, #8
     d2a:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     d2c:	f240 0314 	movw	r3, #20
     d30:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d34:	697a      	ldr	r2, [r7, #20]
     d36:	4413      	add	r3, r2
     d38:	781b      	ldrb	r3, [r3, #0]
     d3a:	b2db      	uxtb	r3, r3
     d3c:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     d3e:	687b      	ldr	r3, [r7, #4]
     d40:	685a      	ldr	r2, [r3, #4]
     d42:	68bb      	ldr	r3, [r7, #8]
     d44:	40da      	lsrs	r2, r3
     d46:	687b      	ldr	r3, [r7, #4]
     d48:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
     d4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d4e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d52:	685b      	ldr	r3, [r3, #4]
     d54:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
     d58:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
     d5a:	697b      	ldr	r3, [r7, #20]
     d5c:	0adb      	lsrs	r3, r3, #11
     d5e:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     d60:	f240 0314 	movw	r3, #20
     d64:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d68:	697a      	ldr	r2, [r7, #20]
     d6a:	4413      	add	r3, r2
     d6c:	781b      	ldrb	r3, [r3, #0]
     d6e:	b2db      	uxtb	r3, r3
     d70:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     d72:	687b      	ldr	r3, [r7, #4]
     d74:	685a      	ldr	r2, [r3, #4]
     d76:	68bb      	ldr	r3, [r7, #8]
     d78:	40da      	lsrs	r2, r3
     d7a:	687b      	ldr	r3, [r7, #4]
     d7c:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
     d7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d82:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d86:	685b      	ldr	r3, [r3, #4]
     d88:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
     d8c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
     d8e:	697b      	ldr	r3, [r7, #20]
     d90:	0b9b      	lsrs	r3, r3, #14
     d92:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
     d94:	f240 0324 	movw	r3, #36	; 0x24
     d98:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d9c:	697a      	ldr	r2, [r7, #20]
     d9e:	4413      	add	r3, r2
     da0:	781b      	ldrb	r3, [r3, #0]
     da2:	b2db      	uxtb	r3, r3
     da4:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
     da6:	687b      	ldr	r3, [r7, #4]
     da8:	68da      	ldr	r2, [r3, #12]
     daa:	68bb      	ldr	r3, [r7, #8]
     dac:	fbb2 f2f3 	udiv	r2, r2, r3
     db0:	687b      	ldr	r3, [r7, #4]
     db2:	611a      	str	r2, [r3, #16]
}
     db4:	371c      	adds	r7, #28
     db6:	46bd      	mov	sp, r7
     db8:	f85d 7b04 	ldr.w	r7, [sp], #4
     dbc:	4770      	bx	lr
     dbe:	bf00      	nop

00000dc0 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
     dc0:	b480      	push	{r7}
     dc2:	b083      	sub	sp, #12
     dc4:	af00      	add	r7, sp, #0
     dc6:	6078      	str	r0, [r7, #4]
     dc8:	460b      	mov	r3, r1
     dca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
     dcc:	78fb      	ldrb	r3, [r7, #3]
     dce:	2b00      	cmp	r3, #0
     dd0:	d00c      	beq.n	dec <RCC_AHBPeriphClockCmd+0x2c>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
     dd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     dd6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     dda:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     dde:	f2c4 0202 	movt	r2, #16386	; 0x4002
     de2:	6951      	ldr	r1, [r2, #20]
     de4:	687a      	ldr	r2, [r7, #4]
     de6:	430a      	orrs	r2, r1
     de8:	615a      	str	r2, [r3, #20]
     dea:	e00c      	b.n	e06 <RCC_AHBPeriphClockCmd+0x46>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
     dec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     df0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     df4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     df8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     dfc:	6951      	ldr	r1, [r2, #20]
     dfe:	687a      	ldr	r2, [r7, #4]
     e00:	43d2      	mvns	r2, r2
     e02:	400a      	ands	r2, r1
     e04:	615a      	str	r2, [r3, #20]
  }
}
     e06:	370c      	adds	r7, #12
     e08:	46bd      	mov	sp, r7
     e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
     e0e:	4770      	bx	lr

00000e10 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     e10:	b480      	push	{r7}
     e12:	b083      	sub	sp, #12
     e14:	af00      	add	r7, sp, #0
     e16:	6078      	str	r0, [r7, #4]
     e18:	460b      	mov	r3, r1
     e1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     e1c:	78fb      	ldrb	r3, [r7, #3]
     e1e:	2b00      	cmp	r3, #0
     e20:	d00c      	beq.n	e3c <RCC_APB2PeriphClockCmd+0x2c>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
     e22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e26:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e2a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e2e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e32:	6991      	ldr	r1, [r2, #24]
     e34:	687a      	ldr	r2, [r7, #4]
     e36:	430a      	orrs	r2, r1
     e38:	619a      	str	r2, [r3, #24]
     e3a:	e00c      	b.n	e56 <RCC_APB2PeriphClockCmd+0x46>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
     e3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e40:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e48:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e4c:	6991      	ldr	r1, [r2, #24]
     e4e:	687a      	ldr	r2, [r7, #4]
     e50:	43d2      	mvns	r2, r2
     e52:	400a      	ands	r2, r1
     e54:	619a      	str	r2, [r3, #24]
  }
}
     e56:	370c      	adds	r7, #12
     e58:	46bd      	mov	sp, r7
     e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
     e5e:	4770      	bx	lr

00000e60 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     e60:	b480      	push	{r7}
     e62:	b083      	sub	sp, #12
     e64:	af00      	add	r7, sp, #0
     e66:	6078      	str	r0, [r7, #4]
     e68:	460b      	mov	r3, r1
     e6a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     e6c:	78fb      	ldrb	r3, [r7, #3]
     e6e:	2b00      	cmp	r3, #0
     e70:	d00c      	beq.n	e8c <RCC_APB1PeriphClockCmd+0x2c>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
     e72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e76:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e7a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e7e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e82:	69d1      	ldr	r1, [r2, #28]
     e84:	687a      	ldr	r2, [r7, #4]
     e86:	430a      	orrs	r2, r1
     e88:	61da      	str	r2, [r3, #28]
     e8a:	e00c      	b.n	ea6 <RCC_APB1PeriphClockCmd+0x46>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
     e8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e90:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e98:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e9c:	69d1      	ldr	r1, [r2, #28]
     e9e:	687a      	ldr	r2, [r7, #4]
     ea0:	43d2      	mvns	r2, r2
     ea2:	400a      	ands	r2, r1
     ea4:	61da      	str	r2, [r3, #28]
  }
}
     ea6:	370c      	adds	r7, #12
     ea8:	46bd      	mov	sp, r7
     eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
     eae:	4770      	bx	lr

00000eb0 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     eb0:	b480      	push	{r7}
     eb2:	b083      	sub	sp, #12
     eb4:	af00      	add	r7, sp, #0
     eb6:	6078      	str	r0, [r7, #4]
     eb8:	460b      	mov	r3, r1
     eba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     ebc:	78fb      	ldrb	r3, [r7, #3]
     ebe:	2b00      	cmp	r3, #0
     ec0:	d00c      	beq.n	edc <RCC_APB2PeriphResetCmd+0x2c>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
     ec2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ec6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     eca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ece:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ed2:	68d1      	ldr	r1, [r2, #12]
     ed4:	687a      	ldr	r2, [r7, #4]
     ed6:	430a      	orrs	r2, r1
     ed8:	60da      	str	r2, [r3, #12]
     eda:	e00c      	b.n	ef6 <RCC_APB2PeriphResetCmd+0x46>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
     edc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ee0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ee4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ee8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     eec:	68d1      	ldr	r1, [r2, #12]
     eee:	687a      	ldr	r2, [r7, #4]
     ef0:	43d2      	mvns	r2, r2
     ef2:	400a      	ands	r2, r1
     ef4:	60da      	str	r2, [r3, #12]
  }
}
     ef6:	370c      	adds	r7, #12
     ef8:	46bd      	mov	sp, r7
     efa:	f85d 7b04 	ldr.w	r7, [sp], #4
     efe:	4770      	bx	lr

00000f00 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     f00:	b480      	push	{r7}
     f02:	b083      	sub	sp, #12
     f04:	af00      	add	r7, sp, #0
     f06:	6078      	str	r0, [r7, #4]
     f08:	460b      	mov	r3, r1
     f0a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     f0c:	78fb      	ldrb	r3, [r7, #3]
     f0e:	2b00      	cmp	r3, #0
     f10:	d00c      	beq.n	f2c <RCC_APB1PeriphResetCmd+0x2c>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
     f12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f16:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f1a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     f1e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     f22:	6911      	ldr	r1, [r2, #16]
     f24:	687a      	ldr	r2, [r7, #4]
     f26:	430a      	orrs	r2, r1
     f28:	611a      	str	r2, [r3, #16]
     f2a:	e00c      	b.n	f46 <RCC_APB1PeriphResetCmd+0x46>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
     f2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f30:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f34:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     f38:	f2c4 0202 	movt	r2, #16386	; 0x4002
     f3c:	6911      	ldr	r1, [r2, #16]
     f3e:	687a      	ldr	r2, [r7, #4]
     f40:	43d2      	mvns	r2, r2
     f42:	400a      	ands	r2, r1
     f44:	611a      	str	r2, [r3, #16]
  }
}
     f46:	370c      	adds	r7, #12
     f48:	46bd      	mov	sp, r7
     f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
     f4e:	4770      	bx	lr

00000f50 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
     f50:	b480      	push	{r7}
     f52:	b083      	sub	sp, #12
     f54:	af00      	add	r7, sp, #0
     f56:	4603      	mov	r3, r0
     f58:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
     f5a:	f44f 6388 	mov.w	r3, #1088	; 0x440
     f5e:	f2c4 2342 	movt	r3, #16962	; 0x4242
     f62:	79fa      	ldrb	r2, [r7, #7]
     f64:	601a      	str	r2, [r3, #0]
}
     f66:	370c      	adds	r7, #12
     f68:	46bd      	mov	sp, r7
     f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
     f6e:	4770      	bx	lr

00000f70 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System..
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
     f70:	b480      	push	{r7}
     f72:	b083      	sub	sp, #12
     f74:	af00      	add	r7, sp, #0
     f76:	4603      	mov	r3, r0
     f78:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
     f7a:	234c      	movs	r3, #76	; 0x4c
     f7c:	f2c4 2342 	movt	r3, #16962	; 0x4242
     f80:	79fa      	ldrb	r2, [r7, #7]
     f82:	601a      	str	r2, [r3, #0]
}
     f84:	370c      	adds	r7, #12
     f86:	46bd      	mov	sp, r7
     f88:	f85d 7b04 	ldr.w	r7, [sp], #4
     f8c:	4770      	bx	lr
     f8e:	bf00      	nop

00000f90 <RCC_MCOConfig>:
  *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
  *   
  * @retval None
  */
void RCC_MCOConfig(uint8_t RCC_MCO)
{
     f90:	b480      	push	{r7}
     f92:	b083      	sub	sp, #12
     f94:	af00      	add	r7, sp, #0
     f96:	4603      	mov	r3, r0
     f98:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO bits to select the MCO source */
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
     f9a:	f241 0307 	movw	r3, #4103	; 0x1007
     f9e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     fa2:	79fa      	ldrb	r2, [r7, #7]
     fa4:	701a      	strb	r2, [r3, #0]
}
     fa6:	370c      	adds	r7, #12
     fa8:	46bd      	mov	sp, r7
     faa:	f85d 7b04 	ldr.w	r7, [sp], #4
     fae:	4770      	bx	lr

00000fb0 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *   
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
     fb0:	b480      	push	{r7}
     fb2:	b087      	sub	sp, #28
     fb4:	af00      	add	r7, sp, #0
     fb6:	4603      	mov	r3, r0
     fb8:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
     fba:	2300      	movs	r3, #0
     fbc:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
     fbe:	2300      	movs	r3, #0
     fc0:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
     fc2:	2300      	movs	r3, #0
     fc4:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
     fc6:	79fb      	ldrb	r3, [r7, #7]
     fc8:	095b      	lsrs	r3, r3, #5
     fca:	b2db      	uxtb	r3, r3
     fcc:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
     fce:	68fb      	ldr	r3, [r7, #12]
     fd0:	2b01      	cmp	r3, #1
     fd2:	d106      	bne.n	fe2 <RCC_GetFlagStatus+0x32>
  {
    statusreg = RCC->CR;
     fd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     fd8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     fdc:	681b      	ldr	r3, [r3, #0]
     fde:	617b      	str	r3, [r7, #20]
     fe0:	e00f      	b.n	1002 <RCC_GetFlagStatus+0x52>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
     fe2:	68fb      	ldr	r3, [r7, #12]
     fe4:	2b02      	cmp	r3, #2
     fe6:	d106      	bne.n	ff6 <RCC_GetFlagStatus+0x46>
  {
    statusreg = RCC->BDCR;
     fe8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     fec:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ff0:	6a1b      	ldr	r3, [r3, #32]
     ff2:	617b      	str	r3, [r7, #20]
     ff4:	e005      	b.n	1002 <RCC_GetFlagStatus+0x52>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
     ff6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ffa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1000:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
    1002:	79fb      	ldrb	r3, [r7, #7]
    1004:	f003 031f 	and.w	r3, r3, #31
    1008:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
    100a:	68fb      	ldr	r3, [r7, #12]
    100c:	697a      	ldr	r2, [r7, #20]
    100e:	fa22 f303 	lsr.w	r3, r2, r3
    1012:	f003 0301 	and.w	r3, r3, #1
    1016:	2b00      	cmp	r3, #0
    1018:	d002      	beq.n	1020 <RCC_GetFlagStatus+0x70>
  {
    bitstatus = SET;
    101a:	2301      	movs	r3, #1
    101c:	74fb      	strb	r3, [r7, #19]
    101e:	e001      	b.n	1024 <RCC_GetFlagStatus+0x74>
  }
  else
  {
    bitstatus = RESET;
    1020:	2300      	movs	r3, #0
    1022:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
    1024:	7cfb      	ldrb	r3, [r7, #19]
}
    1026:	4618      	mov	r0, r3
    1028:	371c      	adds	r7, #28
    102a:	46bd      	mov	sp, r7
    102c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1030:	4770      	bx	lr
    1032:	bf00      	nop

00001034 <RCC_ClearFlag>:
  *   RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
    1034:	b480      	push	{r7}
    1036:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
    1038:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    103c:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1040:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    1044:	f2c4 0202 	movt	r2, #16386	; 0x4002
    1048:	6a52      	ldr	r2, [r2, #36]	; 0x24
    104a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    104e:	625a      	str	r2, [r3, #36]	; 0x24
}
    1050:	46bd      	mov	sp, r7
    1052:	f85d 7b04 	ldr.w	r7, [sp], #4
    1056:	4770      	bx	lr

00001058 <RCC_GetITStatus>:
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  *   
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
    1058:	b480      	push	{r7}
    105a:	b085      	sub	sp, #20
    105c:	af00      	add	r7, sp, #0
    105e:	4603      	mov	r3, r0
    1060:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
    1062:	2300      	movs	r3, #0
    1064:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
    1066:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    106a:	f2c4 0302 	movt	r3, #16386	; 0x4002
    106e:	689a      	ldr	r2, [r3, #8]
    1070:	79fb      	ldrb	r3, [r7, #7]
    1072:	4013      	ands	r3, r2
    1074:	2b00      	cmp	r3, #0
    1076:	d002      	beq.n	107e <RCC_GetITStatus+0x26>
  {
    bitstatus = SET;
    1078:	2301      	movs	r3, #1
    107a:	73fb      	strb	r3, [r7, #15]
    107c:	e001      	b.n	1082 <RCC_GetITStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    107e:	2300      	movs	r3, #0
    1080:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the RCC_IT status */
  return  bitstatus;
    1082:	7bfb      	ldrb	r3, [r7, #15]
}
    1084:	4618      	mov	r0, r3
    1086:	3714      	adds	r7, #20
    1088:	46bd      	mov	sp, r7
    108a:	f85d 7b04 	ldr.w	r7, [sp], #4
    108e:	4770      	bx	lr

00001090 <RCC_ClearITPendingBit>:
  *   
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
    1090:	b480      	push	{r7}
    1092:	b083      	sub	sp, #12
    1094:	af00      	add	r7, sp, #0
    1096:	4603      	mov	r3, r0
    1098:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
    109a:	f241 030a 	movw	r3, #4106	; 0x100a
    109e:	f2c4 0302 	movt	r3, #16386	; 0x4002
    10a2:	79fa      	ldrb	r2, [r7, #7]
    10a4:	701a      	strb	r2, [r3, #0]
}
    10a6:	370c      	adds	r7, #12
    10a8:	46bd      	mov	sp, r7
    10aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    10ae:	4770      	bx	lr

000010b0 <GPIO_DeInit>:
  * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
    10b0:	b580      	push	{r7, lr}
    10b2:	b082      	sub	sp, #8
    10b4:	af00      	add	r7, sp, #0
    10b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  if (GPIOx == GPIOA)
    10b8:	687a      	ldr	r2, [r7, #4]
    10ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
    10be:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10c2:	429a      	cmp	r2, r3
    10c4:	d108      	bne.n	10d8 <GPIO_DeInit+0x28>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
    10c6:	2004      	movs	r0, #4
    10c8:	2101      	movs	r1, #1
    10ca:	f7ff fef1 	bl	eb0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
    10ce:	2004      	movs	r0, #4
    10d0:	2100      	movs	r1, #0
    10d2:	f7ff feed 	bl	eb0 <RCC_APB2PeriphResetCmd>
    10d6:	e060      	b.n	119a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOB)
    10d8:	687a      	ldr	r2, [r7, #4]
    10da:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    10de:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10e2:	429a      	cmp	r2, r3
    10e4:	d108      	bne.n	10f8 <GPIO_DeInit+0x48>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
    10e6:	2008      	movs	r0, #8
    10e8:	2101      	movs	r1, #1
    10ea:	f7ff fee1 	bl	eb0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
    10ee:	2008      	movs	r0, #8
    10f0:	2100      	movs	r1, #0
    10f2:	f7ff fedd 	bl	eb0 <RCC_APB2PeriphResetCmd>
    10f6:	e050      	b.n	119a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOC)
    10f8:	687a      	ldr	r2, [r7, #4]
    10fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    10fe:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1102:	429a      	cmp	r2, r3
    1104:	d108      	bne.n	1118 <GPIO_DeInit+0x68>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
    1106:	2010      	movs	r0, #16
    1108:	2101      	movs	r1, #1
    110a:	f7ff fed1 	bl	eb0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
    110e:	2010      	movs	r0, #16
    1110:	2100      	movs	r1, #0
    1112:	f7ff fecd 	bl	eb0 <RCC_APB2PeriphResetCmd>
    1116:	e040      	b.n	119a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOD)
    1118:	687a      	ldr	r2, [r7, #4]
    111a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    111e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1122:	429a      	cmp	r2, r3
    1124:	d108      	bne.n	1138 <GPIO_DeInit+0x88>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
    1126:	2020      	movs	r0, #32
    1128:	2101      	movs	r1, #1
    112a:	f7ff fec1 	bl	eb0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
    112e:	2020      	movs	r0, #32
    1130:	2100      	movs	r1, #0
    1132:	f7ff febd 	bl	eb0 <RCC_APB2PeriphResetCmd>
    1136:	e030      	b.n	119a <GPIO_DeInit+0xea>
  }    
  else if (GPIOx == GPIOE)
    1138:	687a      	ldr	r2, [r7, #4]
    113a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    113e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1142:	429a      	cmp	r2, r3
    1144:	d108      	bne.n	1158 <GPIO_DeInit+0xa8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
    1146:	2040      	movs	r0, #64	; 0x40
    1148:	2101      	movs	r1, #1
    114a:	f7ff feb1 	bl	eb0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
    114e:	2040      	movs	r0, #64	; 0x40
    1150:	2100      	movs	r1, #0
    1152:	f7ff fead 	bl	eb0 <RCC_APB2PeriphResetCmd>
    1156:	e020      	b.n	119a <GPIO_DeInit+0xea>
  } 
  else if (GPIOx == GPIOF)
    1158:	687a      	ldr	r2, [r7, #4]
    115a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
    115e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1162:	429a      	cmp	r2, r3
    1164:	d108      	bne.n	1178 <GPIO_DeInit+0xc8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
    1166:	2080      	movs	r0, #128	; 0x80
    1168:	2101      	movs	r1, #1
    116a:	f7ff fea1 	bl	eb0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
    116e:	2080      	movs	r0, #128	; 0x80
    1170:	2100      	movs	r1, #0
    1172:	f7ff fe9d 	bl	eb0 <RCC_APB2PeriphResetCmd>
    1176:	e010      	b.n	119a <GPIO_DeInit+0xea>
  }
  else
  {
    if (GPIOx == GPIOG)
    1178:	687a      	ldr	r2, [r7, #4]
    117a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    117e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1182:	429a      	cmp	r2, r3
    1184:	d109      	bne.n	119a <GPIO_DeInit+0xea>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
    1186:	f44f 7080 	mov.w	r0, #256	; 0x100
    118a:	2101      	movs	r1, #1
    118c:	f7ff fe90 	bl	eb0 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    1190:	f44f 7080 	mov.w	r0, #256	; 0x100
    1194:	2100      	movs	r1, #0
    1196:	f7ff fe8b 	bl	eb0 <RCC_APB2PeriphResetCmd>
    }
  }
}
    119a:	3708      	adds	r7, #8
    119c:	46bd      	mov	sp, r7
    119e:	bd80      	pop	{r7, pc}

000011a0 <GPIO_AFIODeInit>:
  *   and EXTI configuration) registers to their default reset values.
  * @param  None
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
    11a0:	b580      	push	{r7, lr}
    11a2:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
    11a4:	2001      	movs	r0, #1
    11a6:	2101      	movs	r1, #1
    11a8:	f7ff fe82 	bl	eb0 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
    11ac:	2001      	movs	r0, #1
    11ae:	2100      	movs	r1, #0
    11b0:	f7ff fe7e 	bl	eb0 <RCC_APB2PeriphResetCmd>
}
    11b4:	bd80      	pop	{r7, pc}
    11b6:	bf00      	nop

000011b8 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
    11b8:	b480      	push	{r7}
    11ba:	b089      	sub	sp, #36	; 0x24
    11bc:	af00      	add	r7, sp, #0
    11be:	6078      	str	r0, [r7, #4]
    11c0:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
    11c2:	2300      	movs	r3, #0
    11c4:	61fb      	str	r3, [r7, #28]
    11c6:	2300      	movs	r3, #0
    11c8:	613b      	str	r3, [r7, #16]
    11ca:	2300      	movs	r3, #0
    11cc:	61bb      	str	r3, [r7, #24]
    11ce:	2300      	movs	r3, #0
    11d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
    11d2:	2300      	movs	r3, #0
    11d4:	617b      	str	r3, [r7, #20]
    11d6:	2300      	movs	r3, #0
    11d8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
    11da:	683b      	ldr	r3, [r7, #0]
    11dc:	78db      	ldrb	r3, [r3, #3]
    11de:	f003 030f 	and.w	r3, r3, #15
    11e2:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
    11e4:	683b      	ldr	r3, [r7, #0]
    11e6:	78db      	ldrb	r3, [r3, #3]
    11e8:	f003 0310 	and.w	r3, r3, #16
    11ec:	2b00      	cmp	r3, #0
    11ee:	d004      	beq.n	11fa <GPIO_Init+0x42>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
    11f0:	683b      	ldr	r3, [r7, #0]
    11f2:	789b      	ldrb	r3, [r3, #2]
    11f4:	69fa      	ldr	r2, [r7, #28]
    11f6:	4313      	orrs	r3, r2
    11f8:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
    11fa:	683b      	ldr	r3, [r7, #0]
    11fc:	881b      	ldrh	r3, [r3, #0]
    11fe:	b2db      	uxtb	r3, r3
    1200:	2b00      	cmp	r3, #0
    1202:	d044      	beq.n	128e <GPIO_Init+0xd6>
  {
    tmpreg = GPIOx->CRL;
    1204:	687b      	ldr	r3, [r7, #4]
    1206:	681b      	ldr	r3, [r3, #0]
    1208:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    120a:	2300      	movs	r3, #0
    120c:	61bb      	str	r3, [r7, #24]
    120e:	e038      	b.n	1282 <GPIO_Init+0xca>
    {
      pos = ((uint32_t)0x01) << pinpos;
    1210:	69bb      	ldr	r3, [r7, #24]
    1212:	2201      	movs	r2, #1
    1214:	fa02 f303 	lsl.w	r3, r2, r3
    1218:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
    121a:	683b      	ldr	r3, [r7, #0]
    121c:	881b      	ldrh	r3, [r3, #0]
    121e:	461a      	mov	r2, r3
    1220:	68fb      	ldr	r3, [r7, #12]
    1222:	4013      	ands	r3, r2
    1224:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    1226:	693a      	ldr	r2, [r7, #16]
    1228:	68fb      	ldr	r3, [r7, #12]
    122a:	429a      	cmp	r2, r3
    122c:	d126      	bne.n	127c <GPIO_Init+0xc4>
      {
        pos = pinpos << 2;
    122e:	69bb      	ldr	r3, [r7, #24]
    1230:	009b      	lsls	r3, r3, #2
    1232:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    1234:	68fb      	ldr	r3, [r7, #12]
    1236:	220f      	movs	r2, #15
    1238:	fa02 f303 	lsl.w	r3, r2, r3
    123c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    123e:	68bb      	ldr	r3, [r7, #8]
    1240:	43db      	mvns	r3, r3
    1242:	697a      	ldr	r2, [r7, #20]
    1244:	4013      	ands	r3, r2
    1246:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    1248:	68fb      	ldr	r3, [r7, #12]
    124a:	69fa      	ldr	r2, [r7, #28]
    124c:	fa02 f303 	lsl.w	r3, r2, r3
    1250:	697a      	ldr	r2, [r7, #20]
    1252:	4313      	orrs	r3, r2
    1254:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    1256:	683b      	ldr	r3, [r7, #0]
    1258:	78db      	ldrb	r3, [r3, #3]
    125a:	2b28      	cmp	r3, #40	; 0x28
    125c:	d105      	bne.n	126a <GPIO_Init+0xb2>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
    125e:	69bb      	ldr	r3, [r7, #24]
    1260:	2201      	movs	r2, #1
    1262:	409a      	lsls	r2, r3
    1264:	687b      	ldr	r3, [r7, #4]
    1266:	615a      	str	r2, [r3, #20]
    1268:	e008      	b.n	127c <GPIO_Init+0xc4>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    126a:	683b      	ldr	r3, [r7, #0]
    126c:	78db      	ldrb	r3, [r3, #3]
    126e:	2b48      	cmp	r3, #72	; 0x48
    1270:	d104      	bne.n	127c <GPIO_Init+0xc4>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
    1272:	69bb      	ldr	r3, [r7, #24]
    1274:	2201      	movs	r2, #1
    1276:	409a      	lsls	r2, r3
    1278:	687b      	ldr	r3, [r7, #4]
    127a:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    127c:	69bb      	ldr	r3, [r7, #24]
    127e:	3301      	adds	r3, #1
    1280:	61bb      	str	r3, [r7, #24]
    1282:	69bb      	ldr	r3, [r7, #24]
    1284:	2b07      	cmp	r3, #7
    1286:	d9c3      	bls.n	1210 <GPIO_Init+0x58>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
    1288:	687b      	ldr	r3, [r7, #4]
    128a:	697a      	ldr	r2, [r7, #20]
    128c:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
    128e:	683b      	ldr	r3, [r7, #0]
    1290:	881b      	ldrh	r3, [r3, #0]
    1292:	2bff      	cmp	r3, #255	; 0xff
    1294:	d946      	bls.n	1324 <GPIO_Init+0x16c>
  {
    tmpreg = GPIOx->CRH;
    1296:	687b      	ldr	r3, [r7, #4]
    1298:	685b      	ldr	r3, [r3, #4]
    129a:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    129c:	2300      	movs	r3, #0
    129e:	61bb      	str	r3, [r7, #24]
    12a0:	e03a      	b.n	1318 <GPIO_Init+0x160>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
    12a2:	69bb      	ldr	r3, [r7, #24]
    12a4:	3308      	adds	r3, #8
    12a6:	2201      	movs	r2, #1
    12a8:	fa02 f303 	lsl.w	r3, r2, r3
    12ac:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
    12ae:	683b      	ldr	r3, [r7, #0]
    12b0:	881b      	ldrh	r3, [r3, #0]
    12b2:	461a      	mov	r2, r3
    12b4:	68fb      	ldr	r3, [r7, #12]
    12b6:	4013      	ands	r3, r2
    12b8:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    12ba:	693a      	ldr	r2, [r7, #16]
    12bc:	68fb      	ldr	r3, [r7, #12]
    12be:	429a      	cmp	r2, r3
    12c0:	d127      	bne.n	1312 <GPIO_Init+0x15a>
      {
        pos = pinpos << 2;
    12c2:	69bb      	ldr	r3, [r7, #24]
    12c4:	009b      	lsls	r3, r3, #2
    12c6:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    12c8:	68fb      	ldr	r3, [r7, #12]
    12ca:	220f      	movs	r2, #15
    12cc:	fa02 f303 	lsl.w	r3, r2, r3
    12d0:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    12d2:	68bb      	ldr	r3, [r7, #8]
    12d4:	43db      	mvns	r3, r3
    12d6:	697a      	ldr	r2, [r7, #20]
    12d8:	4013      	ands	r3, r2
    12da:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    12dc:	68fb      	ldr	r3, [r7, #12]
    12de:	69fa      	ldr	r2, [r7, #28]
    12e0:	fa02 f303 	lsl.w	r3, r2, r3
    12e4:	697a      	ldr	r2, [r7, #20]
    12e6:	4313      	orrs	r3, r2
    12e8:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    12ea:	683b      	ldr	r3, [r7, #0]
    12ec:	78db      	ldrb	r3, [r3, #3]
    12ee:	2b28      	cmp	r3, #40	; 0x28
    12f0:	d105      	bne.n	12fe <GPIO_Init+0x146>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
    12f2:	69bb      	ldr	r3, [r7, #24]
    12f4:	3308      	adds	r3, #8
    12f6:	2201      	movs	r2, #1
    12f8:	409a      	lsls	r2, r3
    12fa:	687b      	ldr	r3, [r7, #4]
    12fc:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    12fe:	683b      	ldr	r3, [r7, #0]
    1300:	78db      	ldrb	r3, [r3, #3]
    1302:	2b48      	cmp	r3, #72	; 0x48
    1304:	d105      	bne.n	1312 <GPIO_Init+0x15a>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
    1306:	69bb      	ldr	r3, [r7, #24]
    1308:	3308      	adds	r3, #8
    130a:	2201      	movs	r2, #1
    130c:	409a      	lsls	r2, r3
    130e:	687b      	ldr	r3, [r7, #4]
    1310:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    1312:	69bb      	ldr	r3, [r7, #24]
    1314:	3301      	adds	r3, #1
    1316:	61bb      	str	r3, [r7, #24]
    1318:	69bb      	ldr	r3, [r7, #24]
    131a:	2b07      	cmp	r3, #7
    131c:	d9c1      	bls.n	12a2 <GPIO_Init+0xea>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
    131e:	687b      	ldr	r3, [r7, #4]
    1320:	697a      	ldr	r2, [r7, #20]
    1322:	605a      	str	r2, [r3, #4]
  }
}
    1324:	3724      	adds	r7, #36	; 0x24
    1326:	46bd      	mov	sp, r7
    1328:	f85d 7b04 	ldr.w	r7, [sp], #4
    132c:	4770      	bx	lr
    132e:	bf00      	nop

00001330 <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
    1330:	b480      	push	{r7}
    1332:	b083      	sub	sp, #12
    1334:	af00      	add	r7, sp, #0
    1336:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
    1338:	687b      	ldr	r3, [r7, #4]
    133a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    133e:	801a      	strh	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
    1340:	687b      	ldr	r3, [r7, #4]
    1342:	2202      	movs	r2, #2
    1344:	709a      	strb	r2, [r3, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
    1346:	687b      	ldr	r3, [r7, #4]
    1348:	2204      	movs	r2, #4
    134a:	70da      	strb	r2, [r3, #3]
}
    134c:	370c      	adds	r7, #12
    134e:	46bd      	mov	sp, r7
    1350:	f85d 7b04 	ldr.w	r7, [sp], #4
    1354:	4770      	bx	lr
    1356:	bf00      	nop

00001358 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1358:	b480      	push	{r7}
    135a:	b085      	sub	sp, #20
    135c:	af00      	add	r7, sp, #0
    135e:	6078      	str	r0, [r7, #4]
    1360:	460b      	mov	r3, r1
    1362:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1364:	2300      	movs	r3, #0
    1366:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
    1368:	687b      	ldr	r3, [r7, #4]
    136a:	689a      	ldr	r2, [r3, #8]
    136c:	887b      	ldrh	r3, [r7, #2]
    136e:	4013      	ands	r3, r2
    1370:	2b00      	cmp	r3, #0
    1372:	d002      	beq.n	137a <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    1374:	2301      	movs	r3, #1
    1376:	73fb      	strb	r3, [r7, #15]
    1378:	e001      	b.n	137e <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    137a:	2300      	movs	r3, #0
    137c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    137e:	7bfb      	ldrb	r3, [r7, #15]
}
    1380:	4618      	mov	r0, r3
    1382:	3714      	adds	r7, #20
    1384:	46bd      	mov	sp, r7
    1386:	f85d 7b04 	ldr.w	r7, [sp], #4
    138a:	4770      	bx	lr

0000138c <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
    138c:	b480      	push	{r7}
    138e:	b083      	sub	sp, #12
    1390:	af00      	add	r7, sp, #0
    1392:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  return ((uint16_t)GPIOx->IDR);
    1394:	687b      	ldr	r3, [r7, #4]
    1396:	689b      	ldr	r3, [r3, #8]
    1398:	b29b      	uxth	r3, r3
}
    139a:	4618      	mov	r0, r3
    139c:	370c      	adds	r7, #12
    139e:	46bd      	mov	sp, r7
    13a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    13a4:	4770      	bx	lr
    13a6:	bf00      	nop

000013a8 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    13a8:	b480      	push	{r7}
    13aa:	b085      	sub	sp, #20
    13ac:	af00      	add	r7, sp, #0
    13ae:	6078      	str	r0, [r7, #4]
    13b0:	460b      	mov	r3, r1
    13b2:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    13b4:	2300      	movs	r3, #0
    13b6:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
    13b8:	687b      	ldr	r3, [r7, #4]
    13ba:	68da      	ldr	r2, [r3, #12]
    13bc:	887b      	ldrh	r3, [r7, #2]
    13be:	4013      	ands	r3, r2
    13c0:	2b00      	cmp	r3, #0
    13c2:	d002      	beq.n	13ca <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    13c4:	2301      	movs	r3, #1
    13c6:	73fb      	strb	r3, [r7, #15]
    13c8:	e001      	b.n	13ce <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    13ca:	2300      	movs	r3, #0
    13cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    13ce:	7bfb      	ldrb	r3, [r7, #15]
}
    13d0:	4618      	mov	r0, r3
    13d2:	3714      	adds	r7, #20
    13d4:	46bd      	mov	sp, r7
    13d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    13da:	4770      	bx	lr

000013dc <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
    13dc:	b480      	push	{r7}
    13de:	b083      	sub	sp, #12
    13e0:	af00      	add	r7, sp, #0
    13e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    
  return ((uint16_t)GPIOx->ODR);
    13e4:	687b      	ldr	r3, [r7, #4]
    13e6:	68db      	ldr	r3, [r3, #12]
    13e8:	b29b      	uxth	r3, r3
}
    13ea:	4618      	mov	r0, r3
    13ec:	370c      	adds	r7, #12
    13ee:	46bd      	mov	sp, r7
    13f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    13f4:	4770      	bx	lr
    13f6:	bf00      	nop

000013f8 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    13f8:	b480      	push	{r7}
    13fa:	b083      	sub	sp, #12
    13fc:	af00      	add	r7, sp, #0
    13fe:	6078      	str	r0, [r7, #4]
    1400:	460b      	mov	r3, r1
    1402:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
    1404:	887a      	ldrh	r2, [r7, #2]
    1406:	687b      	ldr	r3, [r7, #4]
    1408:	611a      	str	r2, [r3, #16]
}
    140a:	370c      	adds	r7, #12
    140c:	46bd      	mov	sp, r7
    140e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1412:	4770      	bx	lr

00001414 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1414:	b480      	push	{r7}
    1416:	b083      	sub	sp, #12
    1418:	af00      	add	r7, sp, #0
    141a:	6078      	str	r0, [r7, #4]
    141c:	460b      	mov	r3, r1
    141e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
    1420:	887a      	ldrh	r2, [r7, #2]
    1422:	687b      	ldr	r3, [r7, #4]
    1424:	615a      	str	r2, [r3, #20]
}
    1426:	370c      	adds	r7, #12
    1428:	46bd      	mov	sp, r7
    142a:	f85d 7b04 	ldr.w	r7, [sp], #4
    142e:	4770      	bx	lr

00001430 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
    1430:	b480      	push	{r7}
    1432:	b083      	sub	sp, #12
    1434:	af00      	add	r7, sp, #0
    1436:	6078      	str	r0, [r7, #4]
    1438:	4613      	mov	r3, r2
    143a:	460a      	mov	r2, r1
    143c:	807a      	strh	r2, [r7, #2]
    143e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
    1440:	787b      	ldrb	r3, [r7, #1]
    1442:	2b00      	cmp	r3, #0
    1444:	d003      	beq.n	144e <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
    1446:	887a      	ldrh	r2, [r7, #2]
    1448:	687b      	ldr	r3, [r7, #4]
    144a:	611a      	str	r2, [r3, #16]
    144c:	e002      	b.n	1454 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
    144e:	887a      	ldrh	r2, [r7, #2]
    1450:	687b      	ldr	r3, [r7, #4]
    1452:	615a      	str	r2, [r3, #20]
  }
}
    1454:	370c      	adds	r7, #12
    1456:	46bd      	mov	sp, r7
    1458:	f85d 7b04 	ldr.w	r7, [sp], #4
    145c:	4770      	bx	lr
    145e:	bf00      	nop

00001460 <GPIO_Write>:
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
    1460:	b480      	push	{r7}
    1462:	b083      	sub	sp, #12
    1464:	af00      	add	r7, sp, #0
    1466:	6078      	str	r0, [r7, #4]
    1468:	460b      	mov	r3, r1
    146a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  GPIOx->ODR = PortVal;
    146c:	887a      	ldrh	r2, [r7, #2]
    146e:	687b      	ldr	r3, [r7, #4]
    1470:	60da      	str	r2, [r3, #12]
}
    1472:	370c      	adds	r7, #12
    1474:	46bd      	mov	sp, r7
    1476:	f85d 7b04 	ldr.w	r7, [sp], #4
    147a:	4770      	bx	lr

0000147c <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    147c:	b480      	push	{r7}
    147e:	b085      	sub	sp, #20
    1480:	af00      	add	r7, sp, #0
    1482:	6078      	str	r0, [r7, #4]
    1484:	460b      	mov	r3, r1
    1486:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0x00010000;
    1488:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    148c:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  tmp |= GPIO_Pin;
    148e:	887b      	ldrh	r3, [r7, #2]
    1490:	68fa      	ldr	r2, [r7, #12]
    1492:	4313      	orrs	r3, r2
    1494:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1496:	687b      	ldr	r3, [r7, #4]
    1498:	68fa      	ldr	r2, [r7, #12]
    149a:	619a      	str	r2, [r3, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
    149c:	887a      	ldrh	r2, [r7, #2]
    149e:	687b      	ldr	r3, [r7, #4]
    14a0:	619a      	str	r2, [r3, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    14a2:	687b      	ldr	r3, [r7, #4]
    14a4:	68fa      	ldr	r2, [r7, #12]
    14a6:	619a      	str	r2, [r3, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    14a8:	687b      	ldr	r3, [r7, #4]
    14aa:	699b      	ldr	r3, [r3, #24]
    14ac:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    14ae:	687b      	ldr	r3, [r7, #4]
    14b0:	699b      	ldr	r3, [r3, #24]
    14b2:	60fb      	str	r3, [r7, #12]
}
    14b4:	3714      	adds	r7, #20
    14b6:	46bd      	mov	sp, r7
    14b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    14bc:	4770      	bx	lr
    14be:	bf00      	nop

000014c0 <GPIO_EventOutputConfig>:
  * @param  GPIO_PinSource: specifies the pin for the Event output.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    14c0:	b480      	push	{r7}
    14c2:	b085      	sub	sp, #20
    14c4:	af00      	add	r7, sp, #0
    14c6:	4602      	mov	r2, r0
    14c8:	460b      	mov	r3, r1
    14ca:	71fa      	strb	r2, [r7, #7]
    14cc:	71bb      	strb	r3, [r7, #6]
  uint32_t tmpreg = 0x00;
    14ce:	2300      	movs	r3, #0
    14d0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
    
  tmpreg = AFIO->EVCR;
    14d2:	2300      	movs	r3, #0
    14d4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    14d8:	681b      	ldr	r3, [r3, #0]
    14da:	60fb      	str	r3, [r7, #12]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
    14dc:	68fa      	ldr	r2, [r7, #12]
    14de:	f64f 7380 	movw	r3, #65408	; 0xff80
    14e2:	4013      	ands	r3, r2
    14e4:	60fb      	str	r3, [r7, #12]
  tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
    14e6:	79fb      	ldrb	r3, [r7, #7]
    14e8:	011b      	lsls	r3, r3, #4
    14ea:	68fa      	ldr	r2, [r7, #12]
    14ec:	4313      	orrs	r3, r2
    14ee:	60fb      	str	r3, [r7, #12]
  tmpreg |= GPIO_PinSource;
    14f0:	79bb      	ldrb	r3, [r7, #6]
    14f2:	68fa      	ldr	r2, [r7, #12]
    14f4:	4313      	orrs	r3, r2
    14f6:	60fb      	str	r3, [r7, #12]
  AFIO->EVCR = tmpreg;
    14f8:	2300      	movs	r3, #0
    14fa:	f2c4 0301 	movt	r3, #16385	; 0x4001
    14fe:	68fa      	ldr	r2, [r7, #12]
    1500:	601a      	str	r2, [r3, #0]
}
    1502:	3714      	adds	r7, #20
    1504:	46bd      	mov	sp, r7
    1506:	f85d 7b04 	ldr.w	r7, [sp], #4
    150a:	4770      	bx	lr

0000150c <GPIO_EventOutputCmd>:
  * @param  NewState: new state of the Event output.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_EventOutputCmd(FunctionalState NewState)
{
    150c:	b480      	push	{r7}
    150e:	b083      	sub	sp, #12
    1510:	af00      	add	r7, sp, #0
    1512:	4603      	mov	r3, r0
    1514:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
    1516:	231c      	movs	r3, #28
    1518:	f2c4 2320 	movt	r3, #16928	; 0x4220
    151c:	79fa      	ldrb	r2, [r7, #7]
    151e:	601a      	str	r2, [r3, #0]
}
    1520:	370c      	adds	r7, #12
    1522:	46bd      	mov	sp, r7
    1524:	f85d 7b04 	ldr.w	r7, [sp], #4
    1528:	4770      	bx	lr
    152a:	bf00      	nop

0000152c <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
    152c:	b480      	push	{r7}
    152e:	b087      	sub	sp, #28
    1530:	af00      	add	r7, sp, #0
    1532:	6078      	str	r0, [r7, #4]
    1534:	460b      	mov	r3, r1
    1536:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
    1538:	2300      	movs	r3, #0
    153a:	613b      	str	r3, [r7, #16]
    153c:	2300      	movs	r3, #0
    153e:	60fb      	str	r3, [r7, #12]
    1540:	2300      	movs	r3, #0
    1542:	617b      	str	r3, [r7, #20]
    1544:	2300      	movs	r3, #0
    1546:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if((GPIO_Remap & 0x80000000) == 0x80000000)
    1548:	687b      	ldr	r3, [r7, #4]
    154a:	2b00      	cmp	r3, #0
    154c:	da05      	bge.n	155a <GPIO_PinRemapConfig+0x2e>
  {
    tmpreg = AFIO->MAPR2;
    154e:	2300      	movs	r3, #0
    1550:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1554:	69db      	ldr	r3, [r3, #28]
    1556:	617b      	str	r3, [r7, #20]
    1558:	e004      	b.n	1564 <GPIO_PinRemapConfig+0x38>
  }
  else
  {
    tmpreg = AFIO->MAPR;
    155a:	2300      	movs	r3, #0
    155c:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1560:	685b      	ldr	r3, [r3, #4]
    1562:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
    1564:	687b      	ldr	r3, [r7, #4]
    1566:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    156a:	0c1b      	lsrs	r3, r3, #16
    156c:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
    156e:	687b      	ldr	r3, [r7, #4]
    1570:	b29b      	uxth	r3, r3
    1572:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
    1574:	687b      	ldr	r3, [r7, #4]
    1576:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    157a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
    157e:	d10e      	bne.n	159e <GPIO_PinRemapConfig+0x72>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    1580:	697b      	ldr	r3, [r7, #20]
    1582:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    1586:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
    1588:	2300      	movs	r3, #0
    158a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    158e:	2200      	movs	r2, #0
    1590:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1594:	6852      	ldr	r2, [r2, #4]
    1596:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
    159a:	605a      	str	r2, [r3, #4]
    159c:	e021      	b.n	15e2 <GPIO_PinRemapConfig+0xb6>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
    159e:	687b      	ldr	r3, [r7, #4]
    15a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    15a4:	2b00      	cmp	r3, #0
    15a6:	d00e      	beq.n	15c6 <GPIO_PinRemapConfig+0x9a>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
    15a8:	68bb      	ldr	r3, [r7, #8]
    15aa:	2203      	movs	r2, #3
    15ac:	fa02 f303 	lsl.w	r3, r2, r3
    15b0:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
    15b2:	68fb      	ldr	r3, [r7, #12]
    15b4:	43db      	mvns	r3, r3
    15b6:	697a      	ldr	r2, [r7, #20]
    15b8:	4013      	ands	r3, r2
    15ba:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    15bc:	697b      	ldr	r3, [r7, #20]
    15be:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    15c2:	617b      	str	r3, [r7, #20]
    15c4:	e00d      	b.n	15e2 <GPIO_PinRemapConfig+0xb6>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
    15c6:	687b      	ldr	r3, [r7, #4]
    15c8:	0d5b      	lsrs	r3, r3, #21
    15ca:	011b      	lsls	r3, r3, #4
    15cc:	693a      	ldr	r2, [r7, #16]
    15ce:	fa02 f303 	lsl.w	r3, r2, r3
    15d2:	43db      	mvns	r3, r3
    15d4:	697a      	ldr	r2, [r7, #20]
    15d6:	4013      	ands	r3, r2
    15d8:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    15da:	697b      	ldr	r3, [r7, #20]
    15dc:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    15e0:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
    15e2:	78fb      	ldrb	r3, [r7, #3]
    15e4:	2b00      	cmp	r3, #0
    15e6:	d008      	beq.n	15fa <GPIO_PinRemapConfig+0xce>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
    15e8:	687b      	ldr	r3, [r7, #4]
    15ea:	0d5b      	lsrs	r3, r3, #21
    15ec:	011b      	lsls	r3, r3, #4
    15ee:	693a      	ldr	r2, [r7, #16]
    15f0:	fa02 f303 	lsl.w	r3, r2, r3
    15f4:	697a      	ldr	r2, [r7, #20]
    15f6:	4313      	orrs	r3, r2
    15f8:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    15fa:	687b      	ldr	r3, [r7, #4]
    15fc:	2b00      	cmp	r3, #0
    15fe:	da05      	bge.n	160c <GPIO_PinRemapConfig+0xe0>
  {
    AFIO->MAPR2 = tmpreg;
    1600:	2300      	movs	r3, #0
    1602:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1606:	697a      	ldr	r2, [r7, #20]
    1608:	61da      	str	r2, [r3, #28]
    160a:	e004      	b.n	1616 <GPIO_PinRemapConfig+0xea>
  }
  else
  {
    AFIO->MAPR = tmpreg;
    160c:	2300      	movs	r3, #0
    160e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1612:	697a      	ldr	r2, [r7, #20]
    1614:	605a      	str	r2, [r3, #4]
  }  
}
    1616:	371c      	adds	r7, #28
    1618:	46bd      	mov	sp, r7
    161a:	f85d 7b04 	ldr.w	r7, [sp], #4
    161e:	4770      	bx	lr

00001620 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    1620:	b490      	push	{r4, r7}
    1622:	b084      	sub	sp, #16
    1624:	af00      	add	r7, sp, #0
    1626:	4602      	mov	r2, r0
    1628:	460b      	mov	r3, r1
    162a:	71fa      	strb	r2, [r7, #7]
    162c:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
    162e:	2300      	movs	r3, #0
    1630:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
    1632:	79bb      	ldrb	r3, [r7, #6]
    1634:	f003 0303 	and.w	r3, r3, #3
    1638:	009b      	lsls	r3, r3, #2
    163a:	220f      	movs	r2, #15
    163c:	fa02 f303 	lsl.w	r3, r2, r3
    1640:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
    1642:	2300      	movs	r3, #0
    1644:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1648:	79ba      	ldrb	r2, [r7, #6]
    164a:	0892      	lsrs	r2, r2, #2
    164c:	b2d2      	uxtb	r2, r2
    164e:	4610      	mov	r0, r2
    1650:	2200      	movs	r2, #0
    1652:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1656:	79b9      	ldrb	r1, [r7, #6]
    1658:	0889      	lsrs	r1, r1, #2
    165a:	b2c9      	uxtb	r1, r1
    165c:	3102      	adds	r1, #2
    165e:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    1662:	68fa      	ldr	r2, [r7, #12]
    1664:	43d2      	mvns	r2, r2
    1666:	4011      	ands	r1, r2
    1668:	1c82      	adds	r2, r0, #2
    166a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
    166e:	2300      	movs	r3, #0
    1670:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1674:	79ba      	ldrb	r2, [r7, #6]
    1676:	0892      	lsrs	r2, r2, #2
    1678:	b2d2      	uxtb	r2, r2
    167a:	4610      	mov	r0, r2
    167c:	2200      	movs	r2, #0
    167e:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1682:	79b9      	ldrb	r1, [r7, #6]
    1684:	0889      	lsrs	r1, r1, #2
    1686:	b2c9      	uxtb	r1, r1
    1688:	3102      	adds	r1, #2
    168a:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    168e:	79fc      	ldrb	r4, [r7, #7]
    1690:	79ba      	ldrb	r2, [r7, #6]
    1692:	f002 0203 	and.w	r2, r2, #3
    1696:	0092      	lsls	r2, r2, #2
    1698:	fa04 f202 	lsl.w	r2, r4, r2
    169c:	4311      	orrs	r1, r2
    169e:	1c82      	adds	r2, r0, #2
    16a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    16a4:	3710      	adds	r7, #16
    16a6:	46bd      	mov	sp, r7
    16a8:	bc90      	pop	{r4, r7}
    16aa:	4770      	bx	lr

000016ac <GPIO_ETH_MediaInterfaceConfig>:
  *     @arg GPIO_ETH_MediaInterface_MII: MII mode
  *     @arg GPIO_ETH_MediaInterface_RMII: RMII mode    
  * @retval None
  */
void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface) 
{ 
    16ac:	b480      	push	{r7}
    16ae:	b083      	sub	sp, #12
    16b0:	af00      	add	r7, sp, #0
    16b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface)); 

  /* Configure MII_RMII selection bit */ 
  *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface; 
    16b4:	23dc      	movs	r3, #220	; 0xdc
    16b6:	f2c4 2320 	movt	r3, #16928	; 0x4220
    16ba:	687a      	ldr	r2, [r7, #4]
    16bc:	601a      	str	r2, [r3, #0]
}
    16be:	370c      	adds	r7, #12
    16c0:	46bd      	mov	sp, r7
    16c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    16c6:	4770      	bx	lr

000016c8 <USART_DeInit>:
  *   This parameter can be one of the following values: 
  *      USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
    16c8:	b580      	push	{r7, lr}
    16ca:	b082      	sub	sp, #8
    16cc:	af00      	add	r7, sp, #0
    16ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
    16d0:	687a      	ldr	r2, [r7, #4]
    16d2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    16d6:	f2c4 0301 	movt	r3, #16385	; 0x4001
    16da:	429a      	cmp	r2, r3
    16dc:	d10a      	bne.n	16f4 <USART_DeInit+0x2c>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    16de:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    16e2:	2101      	movs	r1, #1
    16e4:	f7ff fbe4 	bl	eb0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
    16e8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    16ec:	2100      	movs	r1, #0
    16ee:	f7ff fbdf 	bl	eb0 <RCC_APB2PeriphResetCmd>
    16f2:	e046      	b.n	1782 <USART_DeInit+0xba>
  }
  else if (USARTx == USART2)
    16f4:	687a      	ldr	r2, [r7, #4]
    16f6:	f44f 4388 	mov.w	r3, #17408	; 0x4400
    16fa:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16fe:	429a      	cmp	r2, r3
    1700:	d10a      	bne.n	1718 <USART_DeInit+0x50>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    1702:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    1706:	2101      	movs	r1, #1
    1708:	f7ff fbfa 	bl	f00 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
    170c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    1710:	2100      	movs	r1, #0
    1712:	f7ff fbf5 	bl	f00 <RCC_APB1PeriphResetCmd>
    1716:	e034      	b.n	1782 <USART_DeInit+0xba>
  }
  else if (USARTx == USART3)
    1718:	687a      	ldr	r2, [r7, #4]
    171a:	f44f 4390 	mov.w	r3, #18432	; 0x4800
    171e:	f2c4 0300 	movt	r3, #16384	; 0x4000
    1722:	429a      	cmp	r2, r3
    1724:	d10a      	bne.n	173c <USART_DeInit+0x74>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    1726:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    172a:	2101      	movs	r1, #1
    172c:	f7ff fbe8 	bl	f00 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
    1730:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    1734:	2100      	movs	r1, #0
    1736:	f7ff fbe3 	bl	f00 <RCC_APB1PeriphResetCmd>
    173a:	e022      	b.n	1782 <USART_DeInit+0xba>
  }    
  else if (USARTx == UART4)
    173c:	687a      	ldr	r2, [r7, #4]
    173e:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
    1742:	f2c4 0300 	movt	r3, #16384	; 0x4000
    1746:	429a      	cmp	r2, r3
    1748:	d10a      	bne.n	1760 <USART_DeInit+0x98>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    174a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    174e:	2101      	movs	r1, #1
    1750:	f7ff fbd6 	bl	f00 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
    1754:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1758:	2100      	movs	r1, #0
    175a:	f7ff fbd1 	bl	f00 <RCC_APB1PeriphResetCmd>
    175e:	e010      	b.n	1782 <USART_DeInit+0xba>
  }    
  else
  {
    if (USARTx == UART5)
    1760:	687a      	ldr	r2, [r7, #4]
    1762:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
    1766:	f2c4 0300 	movt	r3, #16384	; 0x4000
    176a:	429a      	cmp	r2, r3
    176c:	d109      	bne.n	1782 <USART_DeInit+0xba>
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    176e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    1772:	2101      	movs	r1, #1
    1774:	f7ff fbc4 	bl	f00 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    1778:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    177c:	2100      	movs	r1, #0
    177e:	f7ff fbbf 	bl	f00 <RCC_APB1PeriphResetCmd>
    }
  }
}
    1782:	3708      	adds	r7, #8
    1784:	46bd      	mov	sp, r7
    1786:	bd80      	pop	{r7, pc}

00001788 <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
    1788:	b580      	push	{r7, lr}
    178a:	b08c      	sub	sp, #48	; 0x30
    178c:	af00      	add	r7, sp, #0
    178e:	6078      	str	r0, [r7, #4]
    1790:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
    1792:	2300      	movs	r3, #0
    1794:	62fb      	str	r3, [r7, #44]	; 0x2c
    1796:	2300      	movs	r3, #0
    1798:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
    179a:	2300      	movs	r3, #0
    179c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
    179e:	2300      	movs	r3, #0
    17a0:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
    17a2:	2300      	movs	r3, #0
    17a4:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    17a6:	687b      	ldr	r3, [r7, #4]
    17a8:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    17aa:	687b      	ldr	r3, [r7, #4]
    17ac:	8a1b      	ldrh	r3, [r3, #16]
    17ae:	b29b      	uxth	r3, r3
    17b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
    17b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17b4:	f64c 73ff 	movw	r3, #53247	; 0xcfff
    17b8:	4013      	ands	r3, r2
    17ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
    17bc:	683b      	ldr	r3, [r7, #0]
    17be:	88db      	ldrh	r3, [r3, #6]
    17c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17c2:	4313      	orrs	r3, r2
    17c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    17c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17c8:	b29a      	uxth	r2, r3
    17ca:	687b      	ldr	r3, [r7, #4]
    17cc:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
    17ce:	687b      	ldr	r3, [r7, #4]
    17d0:	899b      	ldrh	r3, [r3, #12]
    17d2:	b29b      	uxth	r3, r3
    17d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
    17d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17d8:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
    17dc:	4013      	ands	r3, r2
    17de:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    17e0:	683b      	ldr	r3, [r7, #0]
    17e2:	889a      	ldrh	r2, [r3, #4]
    17e4:	683b      	ldr	r3, [r7, #0]
    17e6:	891b      	ldrh	r3, [r3, #8]
    17e8:	4313      	orrs	r3, r2
    17ea:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
    17ec:	683b      	ldr	r3, [r7, #0]
    17ee:	895b      	ldrh	r3, [r3, #10]
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    17f0:	4313      	orrs	r3, r2
    17f2:	b29b      	uxth	r3, r3
    17f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17f6:	4313      	orrs	r3, r2
    17f8:	62fb      	str	r3, [r7, #44]	; 0x2c
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
    17fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17fc:	b29a      	uxth	r2, r3
    17fe:	687b      	ldr	r3, [r7, #4]
    1800:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
    1802:	687b      	ldr	r3, [r7, #4]
    1804:	8a9b      	ldrh	r3, [r3, #20]
    1806:	b29b      	uxth	r3, r3
    1808:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
    180a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    180c:	f64f 43ff 	movw	r3, #64767	; 0xfcff
    1810:	4013      	ands	r3, r2
    1812:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
    1814:	683b      	ldr	r3, [r7, #0]
    1816:	899b      	ldrh	r3, [r3, #12]
    1818:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    181a:	4313      	orrs	r3, r2
    181c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
    181e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1820:	b29a      	uxth	r2, r3
    1822:	687b      	ldr	r3, [r7, #4]
    1824:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
    1826:	f107 0308 	add.w	r3, r7, #8
    182a:	4618      	mov	r0, r3
    182c:	f7ff f9ea 	bl	c04 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
    1830:	69fa      	ldr	r2, [r7, #28]
    1832:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    1836:	f2c4 0301 	movt	r3, #16385	; 0x4001
    183a:	429a      	cmp	r2, r3
    183c:	d102      	bne.n	1844 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
    183e:	697b      	ldr	r3, [r7, #20]
    1840:	62bb      	str	r3, [r7, #40]	; 0x28
    1842:	e001      	b.n	1848 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
    1844:	693b      	ldr	r3, [r7, #16]
    1846:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    1848:	687b      	ldr	r3, [r7, #4]
    184a:	899b      	ldrh	r3, [r3, #12]
    184c:	b29b      	uxth	r3, r3
    184e:	b29b      	uxth	r3, r3
    1850:	b21b      	sxth	r3, r3
    1852:	2b00      	cmp	r3, #0
    1854:	da0c      	bge.n	1870 <USART_Init+0xe8>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
    1856:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1858:	4613      	mov	r3, r2
    185a:	009b      	lsls	r3, r3, #2
    185c:	4413      	add	r3, r2
    185e:	009a      	lsls	r2, r3, #2
    1860:	441a      	add	r2, r3
    1862:	683b      	ldr	r3, [r7, #0]
    1864:	681b      	ldr	r3, [r3, #0]
    1866:	005b      	lsls	r3, r3, #1
    1868:	fbb2 f3f3 	udiv	r3, r2, r3
    186c:	627b      	str	r3, [r7, #36]	; 0x24
    186e:	e00b      	b.n	1888 <USART_Init+0x100>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
    1870:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1872:	4613      	mov	r3, r2
    1874:	009b      	lsls	r3, r3, #2
    1876:	4413      	add	r3, r2
    1878:	009a      	lsls	r2, r3, #2
    187a:	441a      	add	r2, r3
    187c:	683b      	ldr	r3, [r7, #0]
    187e:	681b      	ldr	r3, [r3, #0]
    1880:	009b      	lsls	r3, r3, #2
    1882:	fbb2 f3f3 	udiv	r3, r2, r3
    1886:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
    1888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    188a:	f248 531f 	movw	r3, #34079	; 0x851f
    188e:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    1892:	fba3 1302 	umull	r1, r3, r3, r2
    1896:	095b      	lsrs	r3, r3, #5
    1898:	011b      	lsls	r3, r3, #4
    189a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
    189c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    189e:	091b      	lsrs	r3, r3, #4
    18a0:	2264      	movs	r2, #100	; 0x64
    18a2:	fb02 f303 	mul.w	r3, r2, r3
    18a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    18a8:	1ad3      	subs	r3, r2, r3
    18aa:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    18ac:	687b      	ldr	r3, [r7, #4]
    18ae:	899b      	ldrh	r3, [r3, #12]
    18b0:	b29b      	uxth	r3, r3
    18b2:	b29b      	uxth	r3, r3
    18b4:	b21b      	sxth	r3, r3
    18b6:	2b00      	cmp	r3, #0
    18b8:	da10      	bge.n	18dc <USART_Init+0x154>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
    18ba:	6a3b      	ldr	r3, [r7, #32]
    18bc:	00db      	lsls	r3, r3, #3
    18be:	f103 0232 	add.w	r2, r3, #50	; 0x32
    18c2:	f248 531f 	movw	r3, #34079	; 0x851f
    18c6:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    18ca:	fba3 1302 	umull	r1, r3, r3, r2
    18ce:	095b      	lsrs	r3, r3, #5
    18d0:	f003 0307 	and.w	r3, r3, #7
    18d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    18d6:	4313      	orrs	r3, r2
    18d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    18da:	e00f      	b.n	18fc <USART_Init+0x174>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
    18dc:	6a3b      	ldr	r3, [r7, #32]
    18de:	011b      	lsls	r3, r3, #4
    18e0:	f103 0232 	add.w	r2, r3, #50	; 0x32
    18e4:	f248 531f 	movw	r3, #34079	; 0x851f
    18e8:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    18ec:	fba3 1302 	umull	r1, r3, r3, r2
    18f0:	095b      	lsrs	r3, r3, #5
    18f2:	f003 030f 	and.w	r3, r3, #15
    18f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    18f8:	4313      	orrs	r3, r2
    18fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
    18fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    18fe:	b29a      	uxth	r2, r3
    1900:	687b      	ldr	r3, [r7, #4]
    1902:	811a      	strh	r2, [r3, #8]
}
    1904:	3730      	adds	r7, #48	; 0x30
    1906:	46bd      	mov	sp, r7
    1908:	bd80      	pop	{r7, pc}
    190a:	bf00      	nop

0000190c <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
    190c:	b480      	push	{r7}
    190e:	b083      	sub	sp, #12
    1910:	af00      	add	r7, sp, #0
    1912:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
    1914:	687b      	ldr	r3, [r7, #4]
    1916:	f44f 5216 	mov.w	r2, #9600	; 0x2580
    191a:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
    191c:	687b      	ldr	r3, [r7, #4]
    191e:	2200      	movs	r2, #0
    1920:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
    1922:	687b      	ldr	r3, [r7, #4]
    1924:	2200      	movs	r2, #0
    1926:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
    1928:	687b      	ldr	r3, [r7, #4]
    192a:	2200      	movs	r2, #0
    192c:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    192e:	687b      	ldr	r3, [r7, #4]
    1930:	220c      	movs	r2, #12
    1932:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
    1934:	687b      	ldr	r3, [r7, #4]
    1936:	2200      	movs	r2, #0
    1938:	819a      	strh	r2, [r3, #12]
}
    193a:	370c      	adds	r7, #12
    193c:	46bd      	mov	sp, r7
    193e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1942:	4770      	bx	lr

00001944 <USART_ClockInit>:
  *         USART peripheral.  
  * @note The Smart Card and Synchronous modes are not available for UART4 and UART5.
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    1944:	b480      	push	{r7}
    1946:	b085      	sub	sp, #20
    1948:	af00      	add	r7, sp, #0
    194a:	6078      	str	r0, [r7, #4]
    194c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
    194e:	2300      	movs	r3, #0
    1950:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    1952:	687b      	ldr	r3, [r7, #4]
    1954:	8a1b      	ldrh	r3, [r3, #16]
    1956:	b29b      	uxth	r3, r3
    1958:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
    195a:	68fa      	ldr	r2, [r7, #12]
    195c:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
    1960:	4013      	ands	r3, r2
    1962:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
    1964:	683b      	ldr	r3, [r7, #0]
    1966:	881a      	ldrh	r2, [r3, #0]
    1968:	683b      	ldr	r3, [r7, #0]
    196a:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
    196c:	4313      	orrs	r3, r2
    196e:	b29a      	uxth	r2, r3
    1970:	683b      	ldr	r3, [r7, #0]
    1972:	889b      	ldrh	r3, [r3, #4]
    1974:	4313      	orrs	r3, r2
    1976:	b29a      	uxth	r2, r3
    1978:	683b      	ldr	r3, [r7, #0]
    197a:	88db      	ldrh	r3, [r3, #6]
    197c:	4313      	orrs	r3, r2
    197e:	b29b      	uxth	r3, r3
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
    1980:	68fa      	ldr	r2, [r7, #12]
    1982:	4313      	orrs	r3, r2
    1984:	60fb      	str	r3, [r7, #12]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1986:	68fb      	ldr	r3, [r7, #12]
    1988:	b29a      	uxth	r2, r3
    198a:	687b      	ldr	r3, [r7, #4]
    198c:	821a      	strh	r2, [r3, #16]
}
    198e:	3714      	adds	r7, #20
    1990:	46bd      	mov	sp, r7
    1992:	f85d 7b04 	ldr.w	r7, [sp], #4
    1996:	4770      	bx	lr

00001998 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    1998:	b480      	push	{r7}
    199a:	b083      	sub	sp, #12
    199c:	af00      	add	r7, sp, #0
    199e:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
    19a0:	687b      	ldr	r3, [r7, #4]
    19a2:	2200      	movs	r2, #0
    19a4:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
    19a6:	687b      	ldr	r3, [r7, #4]
    19a8:	2200      	movs	r2, #0
    19aa:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
    19ac:	687b      	ldr	r3, [r7, #4]
    19ae:	2200      	movs	r2, #0
    19b0:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
    19b2:	687b      	ldr	r3, [r7, #4]
    19b4:	2200      	movs	r2, #0
    19b6:	80da      	strh	r2, [r3, #6]
}
    19b8:	370c      	adds	r7, #12
    19ba:	46bd      	mov	sp, r7
    19bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    19c0:	4770      	bx	lr
    19c2:	bf00      	nop

000019c4 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    19c4:	b480      	push	{r7}
    19c6:	b083      	sub	sp, #12
    19c8:	af00      	add	r7, sp, #0
    19ca:	6078      	str	r0, [r7, #4]
    19cc:	460b      	mov	r3, r1
    19ce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    19d0:	78fb      	ldrb	r3, [r7, #3]
    19d2:	2b00      	cmp	r3, #0
    19d4:	d008      	beq.n	19e8 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
    19d6:	687b      	ldr	r3, [r7, #4]
    19d8:	899b      	ldrh	r3, [r3, #12]
    19da:	b29b      	uxth	r3, r3
    19dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    19e0:	b29a      	uxth	r2, r3
    19e2:	687b      	ldr	r3, [r7, #4]
    19e4:	819a      	strh	r2, [r3, #12]
    19e6:	e007      	b.n	19f8 <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
    19e8:	687b      	ldr	r3, [r7, #4]
    19ea:	899b      	ldrh	r3, [r3, #12]
    19ec:	b29b      	uxth	r3, r3
    19ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    19f2:	b29a      	uxth	r2, r3
    19f4:	687b      	ldr	r3, [r7, #4]
    19f6:	819a      	strh	r2, [r3, #12]
  }
}
    19f8:	370c      	adds	r7, #12
    19fa:	46bd      	mov	sp, r7
    19fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a00:	4770      	bx	lr
    1a02:	bf00      	nop

00001a04 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
    1a04:	b480      	push	{r7}
    1a06:	b087      	sub	sp, #28
    1a08:	af00      	add	r7, sp, #0
    1a0a:	6078      	str	r0, [r7, #4]
    1a0c:	4613      	mov	r3, r2
    1a0e:	460a      	mov	r2, r1
    1a10:	807a      	strh	r2, [r7, #2]
    1a12:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
    1a14:	2300      	movs	r3, #0
    1a16:	613b      	str	r3, [r7, #16]
    1a18:	2300      	movs	r3, #0
    1a1a:	60fb      	str	r3, [r7, #12]
    1a1c:	2300      	movs	r3, #0
    1a1e:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
    1a20:	2300      	movs	r3, #0
    1a22:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  usartxbase = (uint32_t)USARTx;
    1a24:	687b      	ldr	r3, [r7, #4]
    1a26:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    1a28:	887b      	ldrh	r3, [r7, #2]
    1a2a:	b2db      	uxtb	r3, r3
    1a2c:	095b      	lsrs	r3, r3, #5
    1a2e:	b2db      	uxtb	r3, r3
    1a30:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
    1a32:	887b      	ldrh	r3, [r7, #2]
    1a34:	f003 031f 	and.w	r3, r3, #31
    1a38:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
    1a3a:	68fb      	ldr	r3, [r7, #12]
    1a3c:	2201      	movs	r2, #1
    1a3e:	fa02 f303 	lsl.w	r3, r2, r3
    1a42:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
    1a44:	693b      	ldr	r3, [r7, #16]
    1a46:	2b01      	cmp	r3, #1
    1a48:	d103      	bne.n	1a52 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
    1a4a:	697b      	ldr	r3, [r7, #20]
    1a4c:	330c      	adds	r3, #12
    1a4e:	617b      	str	r3, [r7, #20]
    1a50:	e009      	b.n	1a66 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
    1a52:	693b      	ldr	r3, [r7, #16]
    1a54:	2b02      	cmp	r3, #2
    1a56:	d103      	bne.n	1a60 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
    1a58:	697b      	ldr	r3, [r7, #20]
    1a5a:	3310      	adds	r3, #16
    1a5c:	617b      	str	r3, [r7, #20]
    1a5e:	e002      	b.n	1a66 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
    1a60:	697b      	ldr	r3, [r7, #20]
    1a62:	3314      	adds	r3, #20
    1a64:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
    1a66:	787b      	ldrb	r3, [r7, #1]
    1a68:	2b00      	cmp	r3, #0
    1a6a:	d006      	beq.n	1a7a <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
    1a6c:	697b      	ldr	r3, [r7, #20]
    1a6e:	697a      	ldr	r2, [r7, #20]
    1a70:	6811      	ldr	r1, [r2, #0]
    1a72:	68ba      	ldr	r2, [r7, #8]
    1a74:	430a      	orrs	r2, r1
    1a76:	601a      	str	r2, [r3, #0]
    1a78:	e006      	b.n	1a88 <USART_ITConfig+0x84>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
    1a7a:	697b      	ldr	r3, [r7, #20]
    1a7c:	697a      	ldr	r2, [r7, #20]
    1a7e:	6811      	ldr	r1, [r2, #0]
    1a80:	68ba      	ldr	r2, [r7, #8]
    1a82:	43d2      	mvns	r2, r2
    1a84:	400a      	ands	r2, r1
    1a86:	601a      	str	r2, [r3, #0]
  }
}
    1a88:	371c      	adds	r7, #28
    1a8a:	46bd      	mov	sp, r7
    1a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a90:	4770      	bx	lr
    1a92:	bf00      	nop

00001a94 <USART_DMACmd>:
  * @note The DMA mode is not available for UART5 except in the STM32
  *       High density value line devices(STM32F10X_HD_VL).  
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
    1a94:	b480      	push	{r7}
    1a96:	b083      	sub	sp, #12
    1a98:	af00      	add	r7, sp, #0
    1a9a:	6078      	str	r0, [r7, #4]
    1a9c:	4613      	mov	r3, r2
    1a9e:	460a      	mov	r2, r1
    1aa0:	807a      	strh	r2, [r7, #2]
    1aa2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  if (NewState != DISABLE)
    1aa4:	787b      	ldrb	r3, [r7, #1]
    1aa6:	2b00      	cmp	r3, #0
    1aa8:	d008      	beq.n	1abc <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
    1aaa:	687b      	ldr	r3, [r7, #4]
    1aac:	8a9b      	ldrh	r3, [r3, #20]
    1aae:	b29a      	uxth	r2, r3
    1ab0:	887b      	ldrh	r3, [r7, #2]
    1ab2:	4313      	orrs	r3, r2
    1ab4:	b29a      	uxth	r2, r3
    1ab6:	687b      	ldr	r3, [r7, #4]
    1ab8:	829a      	strh	r2, [r3, #20]
    1aba:	e009      	b.n	1ad0 <USART_DMACmd+0x3c>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
    1abc:	687b      	ldr	r3, [r7, #4]
    1abe:	8a9b      	ldrh	r3, [r3, #20]
    1ac0:	b29a      	uxth	r2, r3
    1ac2:	887b      	ldrh	r3, [r7, #2]
    1ac4:	43db      	mvns	r3, r3
    1ac6:	b29b      	uxth	r3, r3
    1ac8:	4013      	ands	r3, r2
    1aca:	b29a      	uxth	r2, r3
    1acc:	687b      	ldr	r3, [r7, #4]
    1ace:	829a      	strh	r2, [r3, #20]
  }
}
    1ad0:	370c      	adds	r7, #12
    1ad2:	46bd      	mov	sp, r7
    1ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ad8:	4770      	bx	lr
    1ada:	bf00      	nop

00001adc <USART_SetAddress>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
    1adc:	b480      	push	{r7}
    1ade:	b083      	sub	sp, #12
    1ae0:	af00      	add	r7, sp, #0
    1ae2:	6078      	str	r0, [r7, #4]
    1ae4:	460b      	mov	r3, r1
    1ae6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= CR2_Address_Mask;
    1ae8:	687b      	ldr	r3, [r7, #4]
    1aea:	8a1b      	ldrh	r3, [r3, #16]
    1aec:	b29b      	uxth	r3, r3
    1aee:	f023 030f 	bic.w	r3, r3, #15
    1af2:	b29a      	uxth	r2, r3
    1af4:	687b      	ldr	r3, [r7, #4]
    1af6:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
    1af8:	687b      	ldr	r3, [r7, #4]
    1afa:	8a1b      	ldrh	r3, [r3, #16]
    1afc:	b29a      	uxth	r2, r3
    1afe:	78fb      	ldrb	r3, [r7, #3]
    1b00:	b29b      	uxth	r3, r3
    1b02:	4313      	orrs	r3, r2
    1b04:	b29a      	uxth	r2, r3
    1b06:	687b      	ldr	r3, [r7, #4]
    1b08:	821a      	strh	r2, [r3, #16]
}
    1b0a:	370c      	adds	r7, #12
    1b0c:	46bd      	mov	sp, r7
    1b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b12:	4770      	bx	lr

00001b14 <USART_WakeUpConfig>:
  *     @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *     @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
    1b14:	b480      	push	{r7}
    1b16:	b083      	sub	sp, #12
    1b18:	af00      	add	r7, sp, #0
    1b1a:	6078      	str	r0, [r7, #4]
    1b1c:	460b      	mov	r3, r1
    1b1e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= CR1_WAKE_Mask;
    1b20:	687b      	ldr	r3, [r7, #4]
    1b22:	899b      	ldrh	r3, [r3, #12]
    1b24:	b29b      	uxth	r3, r3
    1b26:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1b2a:	b29a      	uxth	r2, r3
    1b2c:	687b      	ldr	r3, [r7, #4]
    1b2e:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
    1b30:	687b      	ldr	r3, [r7, #4]
    1b32:	899b      	ldrh	r3, [r3, #12]
    1b34:	b29a      	uxth	r2, r3
    1b36:	887b      	ldrh	r3, [r7, #2]
    1b38:	4313      	orrs	r3, r2
    1b3a:	b29a      	uxth	r2, r3
    1b3c:	687b      	ldr	r3, [r7, #4]
    1b3e:	819a      	strh	r2, [r3, #12]
}
    1b40:	370c      	adds	r7, #12
    1b42:	46bd      	mov	sp, r7
    1b44:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b48:	4770      	bx	lr
    1b4a:	bf00      	nop

00001b4c <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1b4c:	b480      	push	{r7}
    1b4e:	b083      	sub	sp, #12
    1b50:	af00      	add	r7, sp, #0
    1b52:	6078      	str	r0, [r7, #4]
    1b54:	460b      	mov	r3, r1
    1b56:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
    1b58:	78fb      	ldrb	r3, [r7, #3]
    1b5a:	2b00      	cmp	r3, #0
    1b5c:	d008      	beq.n	1b70 <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
    1b5e:	687b      	ldr	r3, [r7, #4]
    1b60:	899b      	ldrh	r3, [r3, #12]
    1b62:	b29b      	uxth	r3, r3
    1b64:	f043 0302 	orr.w	r3, r3, #2
    1b68:	b29a      	uxth	r2, r3
    1b6a:	687b      	ldr	r3, [r7, #4]
    1b6c:	819a      	strh	r2, [r3, #12]
    1b6e:	e007      	b.n	1b80 <USART_ReceiverWakeUpCmd+0x34>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= CR1_RWU_Reset;
    1b70:	687b      	ldr	r3, [r7, #4]
    1b72:	899b      	ldrh	r3, [r3, #12]
    1b74:	b29b      	uxth	r3, r3
    1b76:	f023 0302 	bic.w	r3, r3, #2
    1b7a:	b29a      	uxth	r2, r3
    1b7c:	687b      	ldr	r3, [r7, #4]
    1b7e:	819a      	strh	r2, [r3, #12]
  }
}
    1b80:	370c      	adds	r7, #12
    1b82:	46bd      	mov	sp, r7
    1b84:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b88:	4770      	bx	lr
    1b8a:	bf00      	nop

00001b8c <USART_LINBreakDetectLengthConfig>:
  *     @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *     @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
    1b8c:	b480      	push	{r7}
    1b8e:	b083      	sub	sp, #12
    1b90:	af00      	add	r7, sp, #0
    1b92:	6078      	str	r0, [r7, #4]
    1b94:	460b      	mov	r3, r1
    1b96:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= CR2_LBDL_Mask;
    1b98:	687b      	ldr	r3, [r7, #4]
    1b9a:	8a1b      	ldrh	r3, [r3, #16]
    1b9c:	b29b      	uxth	r3, r3
    1b9e:	f023 0320 	bic.w	r3, r3, #32
    1ba2:	b29a      	uxth	r2, r3
    1ba4:	687b      	ldr	r3, [r7, #4]
    1ba6:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
    1ba8:	687b      	ldr	r3, [r7, #4]
    1baa:	8a1b      	ldrh	r3, [r3, #16]
    1bac:	b29a      	uxth	r2, r3
    1bae:	887b      	ldrh	r3, [r7, #2]
    1bb0:	4313      	orrs	r3, r2
    1bb2:	b29a      	uxth	r2, r3
    1bb4:	687b      	ldr	r3, [r7, #4]
    1bb6:	821a      	strh	r2, [r3, #16]
}
    1bb8:	370c      	adds	r7, #12
    1bba:	46bd      	mov	sp, r7
    1bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bc0:	4770      	bx	lr
    1bc2:	bf00      	nop

00001bc4 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1bc4:	b480      	push	{r7}
    1bc6:	b083      	sub	sp, #12
    1bc8:	af00      	add	r7, sp, #0
    1bca:	6078      	str	r0, [r7, #4]
    1bcc:	460b      	mov	r3, r1
    1bce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    1bd0:	78fb      	ldrb	r3, [r7, #3]
    1bd2:	2b00      	cmp	r3, #0
    1bd4:	d008      	beq.n	1be8 <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
    1bd6:	687b      	ldr	r3, [r7, #4]
    1bd8:	8a1b      	ldrh	r3, [r3, #16]
    1bda:	b29b      	uxth	r3, r3
    1bdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1be0:	b29a      	uxth	r2, r3
    1be2:	687b      	ldr	r3, [r7, #4]
    1be4:	821a      	strh	r2, [r3, #16]
    1be6:	e007      	b.n	1bf8 <USART_LINCmd+0x34>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= CR2_LINEN_Reset;
    1be8:	687b      	ldr	r3, [r7, #4]
    1bea:	8a1b      	ldrh	r3, [r3, #16]
    1bec:	b29b      	uxth	r3, r3
    1bee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    1bf2:	b29a      	uxth	r2, r3
    1bf4:	687b      	ldr	r3, [r7, #4]
    1bf6:	821a      	strh	r2, [r3, #16]
  }
}
    1bf8:	370c      	adds	r7, #12
    1bfa:	46bd      	mov	sp, r7
    1bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c00:	4770      	bx	lr
    1c02:	bf00      	nop

00001c04 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
    1c04:	b480      	push	{r7}
    1c06:	b083      	sub	sp, #12
    1c08:	af00      	add	r7, sp, #0
    1c0a:	6078      	str	r0, [r7, #4]
    1c0c:	460b      	mov	r3, r1
    1c0e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
    1c10:	887b      	ldrh	r3, [r7, #2]
    1c12:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1c16:	b29a      	uxth	r2, r3
    1c18:	687b      	ldr	r3, [r7, #4]
    1c1a:	809a      	strh	r2, [r3, #4]
}
    1c1c:	370c      	adds	r7, #12
    1c1e:	46bd      	mov	sp, r7
    1c20:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c24:	4770      	bx	lr
    1c26:	bf00      	nop

00001c28 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
    1c28:	b480      	push	{r7}
    1c2a:	b083      	sub	sp, #12
    1c2c:	af00      	add	r7, sp, #0
    1c2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
    1c30:	687b      	ldr	r3, [r7, #4]
    1c32:	889b      	ldrh	r3, [r3, #4]
    1c34:	b29b      	uxth	r3, r3
    1c36:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1c3a:	b29b      	uxth	r3, r3
}
    1c3c:	4618      	mov	r0, r3
    1c3e:	370c      	adds	r7, #12
    1c40:	46bd      	mov	sp, r7
    1c42:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c46:	4770      	bx	lr

00001c48 <USART_SendBreak>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
    1c48:	b480      	push	{r7}
    1c4a:	b083      	sub	sp, #12
    1c4c:	af00      	add	r7, sp, #0
    1c4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= CR1_SBK_Set;
    1c50:	687b      	ldr	r3, [r7, #4]
    1c52:	899b      	ldrh	r3, [r3, #12]
    1c54:	b29b      	uxth	r3, r3
    1c56:	f043 0301 	orr.w	r3, r3, #1
    1c5a:	b29a      	uxth	r2, r3
    1c5c:	687b      	ldr	r3, [r7, #4]
    1c5e:	819a      	strh	r2, [r3, #12]
}
    1c60:	370c      	adds	r7, #12
    1c62:	46bd      	mov	sp, r7
    1c64:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c68:	4770      	bx	lr
    1c6a:	bf00      	nop

00001c6c <USART_SetGuardTime>:
  * @param  USART_GuardTime: specifies the guard time.
  * @note The guard time bits are not available for UART4 and UART5.   
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{    
    1c6c:	b480      	push	{r7}
    1c6e:	b083      	sub	sp, #12
    1c70:	af00      	add	r7, sp, #0
    1c72:	6078      	str	r0, [r7, #4]
    1c74:	460b      	mov	r3, r1
    1c76:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= GTPR_LSB_Mask;
    1c78:	687b      	ldr	r3, [r7, #4]
    1c7a:	8b1b      	ldrh	r3, [r3, #24]
    1c7c:	b29b      	uxth	r3, r3
    1c7e:	b2db      	uxtb	r3, r3
    1c80:	b29a      	uxth	r2, r3
    1c82:	687b      	ldr	r3, [r7, #4]
    1c84:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
    1c86:	687b      	ldr	r3, [r7, #4]
    1c88:	8b1b      	ldrh	r3, [r3, #24]
    1c8a:	b29a      	uxth	r2, r3
    1c8c:	78fb      	ldrb	r3, [r7, #3]
    1c8e:	b29b      	uxth	r3, r3
    1c90:	021b      	lsls	r3, r3, #8
    1c92:	b29b      	uxth	r3, r3
    1c94:	4313      	orrs	r3, r2
    1c96:	b29a      	uxth	r2, r3
    1c98:	687b      	ldr	r3, [r7, #4]
    1c9a:	831a      	strh	r2, [r3, #24]
}
    1c9c:	370c      	adds	r7, #12
    1c9e:	46bd      	mov	sp, r7
    1ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ca4:	4770      	bx	lr
    1ca6:	bf00      	nop

00001ca8 <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock.  
  * @note   The function is used for IrDA mode with UART4 and UART5.
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{ 
    1ca8:	b480      	push	{r7}
    1caa:	b083      	sub	sp, #12
    1cac:	af00      	add	r7, sp, #0
    1cae:	6078      	str	r0, [r7, #4]
    1cb0:	460b      	mov	r3, r1
    1cb2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= GTPR_MSB_Mask;
    1cb4:	687b      	ldr	r3, [r7, #4]
    1cb6:	8b1b      	ldrh	r3, [r3, #24]
    1cb8:	b29b      	uxth	r3, r3
    1cba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    1cbe:	b29a      	uxth	r2, r3
    1cc0:	687b      	ldr	r3, [r7, #4]
    1cc2:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
    1cc4:	687b      	ldr	r3, [r7, #4]
    1cc6:	8b1b      	ldrh	r3, [r3, #24]
    1cc8:	b29a      	uxth	r2, r3
    1cca:	78fb      	ldrb	r3, [r7, #3]
    1ccc:	b29b      	uxth	r3, r3
    1cce:	4313      	orrs	r3, r2
    1cd0:	b29a      	uxth	r2, r3
    1cd2:	687b      	ldr	r3, [r7, #4]
    1cd4:	831a      	strh	r2, [r3, #24]
}
    1cd6:	370c      	adds	r7, #12
    1cd8:	46bd      	mov	sp, r7
    1cda:	f85d 7b04 	ldr.w	r7, [sp], #4
    1cde:	4770      	bx	lr

00001ce0 <USART_SmartCardCmd>:
  *   This parameter can be: ENABLE or DISABLE.     
  * @note The Smart Card mode is not available for UART4 and UART5. 
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1ce0:	b480      	push	{r7}
    1ce2:	b083      	sub	sp, #12
    1ce4:	af00      	add	r7, sp, #0
    1ce6:	6078      	str	r0, [r7, #4]
    1ce8:	460b      	mov	r3, r1
    1cea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1cec:	78fb      	ldrb	r3, [r7, #3]
    1cee:	2b00      	cmp	r3, #0
    1cf0:	d008      	beq.n	1d04 <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
    1cf2:	687b      	ldr	r3, [r7, #4]
    1cf4:	8a9b      	ldrh	r3, [r3, #20]
    1cf6:	b29b      	uxth	r3, r3
    1cf8:	f043 0320 	orr.w	r3, r3, #32
    1cfc:	b29a      	uxth	r2, r3
    1cfe:	687b      	ldr	r3, [r7, #4]
    1d00:	829a      	strh	r2, [r3, #20]
    1d02:	e007      	b.n	1d14 <USART_SmartCardCmd+0x34>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= CR3_SCEN_Reset;
    1d04:	687b      	ldr	r3, [r7, #4]
    1d06:	8a9b      	ldrh	r3, [r3, #20]
    1d08:	b29b      	uxth	r3, r3
    1d0a:	f023 0320 	bic.w	r3, r3, #32
    1d0e:	b29a      	uxth	r2, r3
    1d10:	687b      	ldr	r3, [r7, #4]
    1d12:	829a      	strh	r2, [r3, #20]
  }
}
    1d14:	370c      	adds	r7, #12
    1d16:	46bd      	mov	sp, r7
    1d18:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d1c:	4770      	bx	lr
    1d1e:	bf00      	nop

00001d20 <USART_SmartCardNACKCmd>:
  *   This parameter can be: ENABLE or DISABLE.  
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d20:	b480      	push	{r7}
    1d22:	b083      	sub	sp, #12
    1d24:	af00      	add	r7, sp, #0
    1d26:	6078      	str	r0, [r7, #4]
    1d28:	460b      	mov	r3, r1
    1d2a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1d2c:	78fb      	ldrb	r3, [r7, #3]
    1d2e:	2b00      	cmp	r3, #0
    1d30:	d008      	beq.n	1d44 <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
    1d32:	687b      	ldr	r3, [r7, #4]
    1d34:	8a9b      	ldrh	r3, [r3, #20]
    1d36:	b29b      	uxth	r3, r3
    1d38:	f043 0310 	orr.w	r3, r3, #16
    1d3c:	b29a      	uxth	r2, r3
    1d3e:	687b      	ldr	r3, [r7, #4]
    1d40:	829a      	strh	r2, [r3, #20]
    1d42:	e007      	b.n	1d54 <USART_SmartCardNACKCmd+0x34>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= CR3_NACK_Reset;
    1d44:	687b      	ldr	r3, [r7, #4]
    1d46:	8a9b      	ldrh	r3, [r3, #20]
    1d48:	b29b      	uxth	r3, r3
    1d4a:	f023 0310 	bic.w	r3, r3, #16
    1d4e:	b29a      	uxth	r2, r3
    1d50:	687b      	ldr	r3, [r7, #4]
    1d52:	829a      	strh	r2, [r3, #20]
  }
}
    1d54:	370c      	adds	r7, #12
    1d56:	46bd      	mov	sp, r7
    1d58:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d5c:	4770      	bx	lr
    1d5e:	bf00      	nop

00001d60 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d60:	b480      	push	{r7}
    1d62:	b083      	sub	sp, #12
    1d64:	af00      	add	r7, sp, #0
    1d66:	6078      	str	r0, [r7, #4]
    1d68:	460b      	mov	r3, r1
    1d6a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    1d6c:	78fb      	ldrb	r3, [r7, #3]
    1d6e:	2b00      	cmp	r3, #0
    1d70:	d008      	beq.n	1d84 <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
    1d72:	687b      	ldr	r3, [r7, #4]
    1d74:	8a9b      	ldrh	r3, [r3, #20]
    1d76:	b29b      	uxth	r3, r3
    1d78:	f043 0308 	orr.w	r3, r3, #8
    1d7c:	b29a      	uxth	r2, r3
    1d7e:	687b      	ldr	r3, [r7, #4]
    1d80:	829a      	strh	r2, [r3, #20]
    1d82:	e007      	b.n	1d94 <USART_HalfDuplexCmd+0x34>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= CR3_HDSEL_Reset;
    1d84:	687b      	ldr	r3, [r7, #4]
    1d86:	8a9b      	ldrh	r3, [r3, #20]
    1d88:	b29b      	uxth	r3, r3
    1d8a:	f023 0308 	bic.w	r3, r3, #8
    1d8e:	b29a      	uxth	r2, r3
    1d90:	687b      	ldr	r3, [r7, #4]
    1d92:	829a      	strh	r2, [r3, #20]
  }
}
    1d94:	370c      	adds	r7, #12
    1d96:	46bd      	mov	sp, r7
    1d98:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d9c:	4770      	bx	lr
    1d9e:	bf00      	nop

00001da0 <USART_OverSampling8Cmd>:
  *     This function has to be called before calling USART_Init()
  *     function in order to have correct baudrate Divider value.   
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1da0:	b480      	push	{r7}
    1da2:	b083      	sub	sp, #12
    1da4:	af00      	add	r7, sp, #0
    1da6:	6078      	str	r0, [r7, #4]
    1da8:	460b      	mov	r3, r1
    1daa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    1dac:	78fb      	ldrb	r3, [r7, #3]
    1dae:	2b00      	cmp	r3, #0
    1db0:	d00a      	beq.n	1dc8 <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= CR1_OVER8_Set;
    1db2:	687b      	ldr	r3, [r7, #4]
    1db4:	899b      	ldrh	r3, [r3, #12]
    1db6:	b29b      	uxth	r3, r3
    1db8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    1dbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    1dc0:	b29a      	uxth	r2, r3
    1dc2:	687b      	ldr	r3, [r7, #4]
    1dc4:	819a      	strh	r2, [r3, #12]
    1dc6:	e007      	b.n	1dd8 <USART_OverSampling8Cmd+0x38>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= CR1_OVER8_Reset;
    1dc8:	687b      	ldr	r3, [r7, #4]
    1dca:	899b      	ldrh	r3, [r3, #12]
    1dcc:	b29b      	uxth	r3, r3
    1dce:	f3c3 030e 	ubfx	r3, r3, #0, #15
    1dd2:	b29a      	uxth	r2, r3
    1dd4:	687b      	ldr	r3, [r7, #4]
    1dd6:	819a      	strh	r2, [r3, #12]
  }
}
    1dd8:	370c      	adds	r7, #12
    1dda:	46bd      	mov	sp, r7
    1ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
    1de0:	4770      	bx	lr
    1de2:	bf00      	nop

00001de4 <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1de4:	b480      	push	{r7}
    1de6:	b083      	sub	sp, #12
    1de8:	af00      	add	r7, sp, #0
    1dea:	6078      	str	r0, [r7, #4]
    1dec:	460b      	mov	r3, r1
    1dee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    1df0:	78fb      	ldrb	r3, [r7, #3]
    1df2:	2b00      	cmp	r3, #0
    1df4:	d008      	beq.n	1e08 <USART_OneBitMethodCmd+0x24>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= CR3_ONEBITE_Set;
    1df6:	687b      	ldr	r3, [r7, #4]
    1df8:	8a9b      	ldrh	r3, [r3, #20]
    1dfa:	b29b      	uxth	r3, r3
    1dfc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    1e00:	b29a      	uxth	r2, r3
    1e02:	687b      	ldr	r3, [r7, #4]
    1e04:	829a      	strh	r2, [r3, #20]
    1e06:	e007      	b.n	1e18 <USART_OneBitMethodCmd+0x34>
  }
  else
  {
    /* Disable tthe one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= CR3_ONEBITE_Reset;
    1e08:	687b      	ldr	r3, [r7, #4]
    1e0a:	8a9b      	ldrh	r3, [r3, #20]
    1e0c:	b29b      	uxth	r3, r3
    1e0e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1e12:	b29a      	uxth	r2, r3
    1e14:	687b      	ldr	r3, [r7, #4]
    1e16:	829a      	strh	r2, [r3, #20]
  }
}
    1e18:	370c      	adds	r7, #12
    1e1a:	46bd      	mov	sp, r7
    1e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e20:	4770      	bx	lr
    1e22:	bf00      	nop

00001e24 <USART_IrDAConfig>:
  *     @arg USART_IrDAMode_LowPower
  *     @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
    1e24:	b480      	push	{r7}
    1e26:	b083      	sub	sp, #12
    1e28:	af00      	add	r7, sp, #0
    1e2a:	6078      	str	r0, [r7, #4]
    1e2c:	460b      	mov	r3, r1
    1e2e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= CR3_IRLP_Mask;
    1e30:	687b      	ldr	r3, [r7, #4]
    1e32:	8a9b      	ldrh	r3, [r3, #20]
    1e34:	b29b      	uxth	r3, r3
    1e36:	f023 0304 	bic.w	r3, r3, #4
    1e3a:	b29a      	uxth	r2, r3
    1e3c:	687b      	ldr	r3, [r7, #4]
    1e3e:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
    1e40:	687b      	ldr	r3, [r7, #4]
    1e42:	8a9b      	ldrh	r3, [r3, #20]
    1e44:	b29a      	uxth	r2, r3
    1e46:	887b      	ldrh	r3, [r7, #2]
    1e48:	4313      	orrs	r3, r2
    1e4a:	b29a      	uxth	r2, r3
    1e4c:	687b      	ldr	r3, [r7, #4]
    1e4e:	829a      	strh	r2, [r3, #20]
}
    1e50:	370c      	adds	r7, #12
    1e52:	46bd      	mov	sp, r7
    1e54:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e58:	4770      	bx	lr
    1e5a:	bf00      	nop

00001e5c <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1e5c:	b480      	push	{r7}
    1e5e:	b083      	sub	sp, #12
    1e60:	af00      	add	r7, sp, #0
    1e62:	6078      	str	r0, [r7, #4]
    1e64:	460b      	mov	r3, r1
    1e66:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
    1e68:	78fb      	ldrb	r3, [r7, #3]
    1e6a:	2b00      	cmp	r3, #0
    1e6c:	d008      	beq.n	1e80 <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
    1e6e:	687b      	ldr	r3, [r7, #4]
    1e70:	8a9b      	ldrh	r3, [r3, #20]
    1e72:	b29b      	uxth	r3, r3
    1e74:	f043 0302 	orr.w	r3, r3, #2
    1e78:	b29a      	uxth	r2, r3
    1e7a:	687b      	ldr	r3, [r7, #4]
    1e7c:	829a      	strh	r2, [r3, #20]
    1e7e:	e007      	b.n	1e90 <USART_IrDACmd+0x34>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= CR3_IREN_Reset;
    1e80:	687b      	ldr	r3, [r7, #4]
    1e82:	8a9b      	ldrh	r3, [r3, #20]
    1e84:	b29b      	uxth	r3, r3
    1e86:	f023 0302 	bic.w	r3, r3, #2
    1e8a:	b29a      	uxth	r2, r3
    1e8c:	687b      	ldr	r3, [r7, #4]
    1e8e:	829a      	strh	r2, [r3, #20]
  }
}
    1e90:	370c      	adds	r7, #12
    1e92:	46bd      	mov	sp, r7
    1e94:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e98:	4770      	bx	lr
    1e9a:	bf00      	nop

00001e9c <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    1e9c:	b480      	push	{r7}
    1e9e:	b085      	sub	sp, #20
    1ea0:	af00      	add	r7, sp, #0
    1ea2:	6078      	str	r0, [r7, #4]
    1ea4:	460b      	mov	r3, r1
    1ea6:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
    1ea8:	2300      	movs	r3, #0
    1eaa:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
    1eac:	687b      	ldr	r3, [r7, #4]
    1eae:	881b      	ldrh	r3, [r3, #0]
    1eb0:	b29a      	uxth	r2, r3
    1eb2:	887b      	ldrh	r3, [r7, #2]
    1eb4:	4013      	ands	r3, r2
    1eb6:	b29b      	uxth	r3, r3
    1eb8:	2b00      	cmp	r3, #0
    1eba:	d002      	beq.n	1ec2 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
    1ebc:	2301      	movs	r3, #1
    1ebe:	73fb      	strb	r3, [r7, #15]
    1ec0:	e001      	b.n	1ec6 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    1ec2:	2300      	movs	r3, #0
    1ec4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    1ec6:	7bfb      	ldrb	r3, [r7, #15]
}
    1ec8:	4618      	mov	r0, r3
    1eca:	3714      	adds	r7, #20
    1ecc:	46bd      	mov	sp, r7
    1ece:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ed2:	4770      	bx	lr

00001ed4 <USART_ClearFlag>:
  *   - TXE flag is cleared only by a write to the USART_DR register 
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    1ed4:	b480      	push	{r7}
    1ed6:	b083      	sub	sp, #12
    1ed8:	af00      	add	r7, sp, #0
    1eda:	6078      	str	r0, [r7, #4]
    1edc:	460b      	mov	r3, r1
    1ede:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
   
  USARTx->SR = (uint16_t)~USART_FLAG;
    1ee0:	887b      	ldrh	r3, [r7, #2]
    1ee2:	43db      	mvns	r3, r3
    1ee4:	b29a      	uxth	r2, r3
    1ee6:	687b      	ldr	r3, [r7, #4]
    1ee8:	801a      	strh	r2, [r3, #0]
}
    1eea:	370c      	adds	r7, #12
    1eec:	46bd      	mov	sp, r7
    1eee:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ef2:	4770      	bx	lr

00001ef4 <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    1ef4:	b480      	push	{r7}
    1ef6:	b087      	sub	sp, #28
    1ef8:	af00      	add	r7, sp, #0
    1efa:	6078      	str	r0, [r7, #4]
    1efc:	460b      	mov	r3, r1
    1efe:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
    1f00:	2300      	movs	r3, #0
    1f02:	60fb      	str	r3, [r7, #12]
    1f04:	2300      	movs	r3, #0
    1f06:	617b      	str	r3, [r7, #20]
    1f08:	2300      	movs	r3, #0
    1f0a:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
    1f0c:	2300      	movs	r3, #0
    1f0e:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    1f10:	887b      	ldrh	r3, [r7, #2]
    1f12:	b2db      	uxtb	r3, r3
    1f14:	095b      	lsrs	r3, r3, #5
    1f16:	b2db      	uxtb	r3, r3
    1f18:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
    1f1a:	887b      	ldrh	r3, [r7, #2]
    1f1c:	f003 031f 	and.w	r3, r3, #31
    1f20:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
    1f22:	697b      	ldr	r3, [r7, #20]
    1f24:	2201      	movs	r2, #1
    1f26:	fa02 f303 	lsl.w	r3, r2, r3
    1f2a:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
    1f2c:	68bb      	ldr	r3, [r7, #8]
    1f2e:	2b01      	cmp	r3, #1
    1f30:	d106      	bne.n	1f40 <USART_GetITStatus+0x4c>
  {
    itmask &= USARTx->CR1;
    1f32:	687b      	ldr	r3, [r7, #4]
    1f34:	899b      	ldrh	r3, [r3, #12]
    1f36:	b29b      	uxth	r3, r3
    1f38:	697a      	ldr	r2, [r7, #20]
    1f3a:	4013      	ands	r3, r2
    1f3c:	617b      	str	r3, [r7, #20]
    1f3e:	e00f      	b.n	1f60 <USART_GetITStatus+0x6c>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
    1f40:	68bb      	ldr	r3, [r7, #8]
    1f42:	2b02      	cmp	r3, #2
    1f44:	d106      	bne.n	1f54 <USART_GetITStatus+0x60>
  {
    itmask &= USARTx->CR2;
    1f46:	687b      	ldr	r3, [r7, #4]
    1f48:	8a1b      	ldrh	r3, [r3, #16]
    1f4a:	b29b      	uxth	r3, r3
    1f4c:	697a      	ldr	r2, [r7, #20]
    1f4e:	4013      	ands	r3, r2
    1f50:	617b      	str	r3, [r7, #20]
    1f52:	e005      	b.n	1f60 <USART_GetITStatus+0x6c>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
    1f54:	687b      	ldr	r3, [r7, #4]
    1f56:	8a9b      	ldrh	r3, [r3, #20]
    1f58:	b29b      	uxth	r3, r3
    1f5a:	697a      	ldr	r2, [r7, #20]
    1f5c:	4013      	ands	r3, r2
    1f5e:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
    1f60:	887b      	ldrh	r3, [r7, #2]
    1f62:	0a1b      	lsrs	r3, r3, #8
    1f64:	b29b      	uxth	r3, r3
    1f66:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
    1f68:	68fb      	ldr	r3, [r7, #12]
    1f6a:	2201      	movs	r2, #1
    1f6c:	fa02 f303 	lsl.w	r3, r2, r3
    1f70:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
    1f72:	687b      	ldr	r3, [r7, #4]
    1f74:	881b      	ldrh	r3, [r3, #0]
    1f76:	b29b      	uxth	r3, r3
    1f78:	68fa      	ldr	r2, [r7, #12]
    1f7a:	4013      	ands	r3, r2
    1f7c:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
    1f7e:	697b      	ldr	r3, [r7, #20]
    1f80:	2b00      	cmp	r3, #0
    1f82:	d005      	beq.n	1f90 <USART_GetITStatus+0x9c>
    1f84:	68fb      	ldr	r3, [r7, #12]
    1f86:	2b00      	cmp	r3, #0
    1f88:	d002      	beq.n	1f90 <USART_GetITStatus+0x9c>
  {
    bitstatus = SET;
    1f8a:	2301      	movs	r3, #1
    1f8c:	74fb      	strb	r3, [r7, #19]
    1f8e:	e001      	b.n	1f94 <USART_GetITStatus+0xa0>
  }
  else
  {
    bitstatus = RESET;
    1f90:	2300      	movs	r3, #0
    1f92:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
    1f94:	7cfb      	ldrb	r3, [r7, #19]
}
    1f96:	4618      	mov	r0, r3
    1f98:	371c      	adds	r7, #28
    1f9a:	46bd      	mov	sp, r7
    1f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1fa0:	4770      	bx	lr
    1fa2:	bf00      	nop

00001fa4 <USART_ClearITPendingBit>:
  *   - TXE pending bit is cleared only by a write to the USART_DR register 
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    1fa4:	b480      	push	{r7}
    1fa6:	b085      	sub	sp, #20
    1fa8:	af00      	add	r7, sp, #0
    1faa:	6078      	str	r0, [r7, #4]
    1fac:	460b      	mov	r3, r1
    1fae:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
    1fb0:	2300      	movs	r3, #0
    1fb2:	81fb      	strh	r3, [r7, #14]
    1fb4:	2300      	movs	r3, #0
    1fb6:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  bitpos = USART_IT >> 0x08;
    1fb8:	887b      	ldrh	r3, [r7, #2]
    1fba:	0a1b      	lsrs	r3, r3, #8
    1fbc:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
    1fbe:	89fb      	ldrh	r3, [r7, #14]
    1fc0:	2201      	movs	r2, #1
    1fc2:	fa02 f303 	lsl.w	r3, r2, r3
    1fc6:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
    1fc8:	89bb      	ldrh	r3, [r7, #12]
    1fca:	43db      	mvns	r3, r3
    1fcc:	b29a      	uxth	r2, r3
    1fce:	687b      	ldr	r3, [r7, #4]
    1fd0:	801a      	strh	r2, [r3, #0]
}
    1fd2:	3714      	adds	r7, #20
    1fd4:	46bd      	mov	sp, r7
    1fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
    1fda:	4770      	bx	lr

00001fdc <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
    1fdc:	b480      	push	{r7}
    1fde:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
    1fe0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fe4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fe8:	2200      	movs	r2, #0
    1fea:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
    1fec:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1ff0:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1ff4:	2200      	movs	r2, #0
    1ff6:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000; 
    1ff8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1ffc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2000:	2200      	movs	r2, #0
    2002:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000; 
    2004:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2008:	f2c4 0301 	movt	r3, #16385	; 0x4001
    200c:	2200      	movs	r2, #0
    200e:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x000FFFFF;
    2010:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2014:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2018:	f64f 72ff 	movw	r2, #65535	; 0xffff
    201c:	f2c0 020f 	movt	r2, #15
    2020:	615a      	str	r2, [r3, #20]
}
    2022:	46bd      	mov	sp, r7
    2024:	f85d 7b04 	ldr.w	r7, [sp], #4
    2028:	4770      	bx	lr
    202a:	bf00      	nop

0000202c <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
    202c:	b480      	push	{r7}
    202e:	b085      	sub	sp, #20
    2030:	af00      	add	r7, sp, #0
    2032:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
    2034:	2300      	movs	r3, #0
    2036:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
    2038:	f44f 6380 	mov.w	r3, #1024	; 0x400
    203c:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2040:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
    2042:	687b      	ldr	r3, [r7, #4]
    2044:	799b      	ldrb	r3, [r3, #6]
    2046:	2b00      	cmp	r3, #0
    2048:	d074      	beq.n	2134 <EXTI_Init+0x108>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
    204a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    204e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2052:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2056:	f2c4 0201 	movt	r2, #16385	; 0x4001
    205a:	6811      	ldr	r1, [r2, #0]
    205c:	687a      	ldr	r2, [r7, #4]
    205e:	6812      	ldr	r2, [r2, #0]
    2060:	43d2      	mvns	r2, r2
    2062:	400a      	ands	r2, r1
    2064:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
    2066:	f44f 6380 	mov.w	r3, #1024	; 0x400
    206a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    206e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2072:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2076:	6851      	ldr	r1, [r2, #4]
    2078:	687a      	ldr	r2, [r7, #4]
    207a:	6812      	ldr	r2, [r2, #0]
    207c:	43d2      	mvns	r2, r2
    207e:	400a      	ands	r2, r1
    2080:	605a      	str	r2, [r3, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
    2082:	687b      	ldr	r3, [r7, #4]
    2084:	791b      	ldrb	r3, [r3, #4]
    2086:	68fa      	ldr	r2, [r7, #12]
    2088:	4413      	add	r3, r2
    208a:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    208c:	68fb      	ldr	r3, [r7, #12]
    208e:	68fa      	ldr	r2, [r7, #12]
    2090:	6811      	ldr	r1, [r2, #0]
    2092:	687a      	ldr	r2, [r7, #4]
    2094:	6812      	ldr	r2, [r2, #0]
    2096:	430a      	orrs	r2, r1
    2098:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    209a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    209e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    20a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    20a6:	f2c4 0201 	movt	r2, #16385	; 0x4001
    20aa:	6891      	ldr	r1, [r2, #8]
    20ac:	687a      	ldr	r2, [r7, #4]
    20ae:	6812      	ldr	r2, [r2, #0]
    20b0:	43d2      	mvns	r2, r2
    20b2:	400a      	ands	r2, r1
    20b4:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
    20b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
    20ba:	f2c4 0301 	movt	r3, #16385	; 0x4001
    20be:	f44f 6280 	mov.w	r2, #1024	; 0x400
    20c2:	f2c4 0201 	movt	r2, #16385	; 0x4001
    20c6:	68d1      	ldr	r1, [r2, #12]
    20c8:	687a      	ldr	r2, [r7, #4]
    20ca:	6812      	ldr	r2, [r2, #0]
    20cc:	43d2      	mvns	r2, r2
    20ce:	400a      	ands	r2, r1
    20d0:	60da      	str	r2, [r3, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
    20d2:	687b      	ldr	r3, [r7, #4]
    20d4:	795b      	ldrb	r3, [r3, #5]
    20d6:	2b10      	cmp	r3, #16
    20d8:	d11a      	bne.n	2110 <EXTI_Init+0xe4>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
    20da:	f44f 6380 	mov.w	r3, #1024	; 0x400
    20de:	f2c4 0301 	movt	r3, #16385	; 0x4001
    20e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    20e6:	f2c4 0201 	movt	r2, #16385	; 0x4001
    20ea:	6891      	ldr	r1, [r2, #8]
    20ec:	687a      	ldr	r2, [r7, #4]
    20ee:	6812      	ldr	r2, [r2, #0]
    20f0:	430a      	orrs	r2, r1
    20f2:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    20f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    20f8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    20fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2100:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2104:	68d1      	ldr	r1, [r2, #12]
    2106:	687a      	ldr	r2, [r7, #4]
    2108:	6812      	ldr	r2, [r2, #0]
    210a:	430a      	orrs	r2, r1
    210c:	60da      	str	r2, [r3, #12]
    210e:	e01e      	b.n	214e <EXTI_Init+0x122>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
    2110:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2114:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2118:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
    211a:	687b      	ldr	r3, [r7, #4]
    211c:	795b      	ldrb	r3, [r3, #5]
    211e:	68fa      	ldr	r2, [r7, #12]
    2120:	4413      	add	r3, r2
    2122:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    2124:	68fb      	ldr	r3, [r7, #12]
    2126:	68fa      	ldr	r2, [r7, #12]
    2128:	6811      	ldr	r1, [r2, #0]
    212a:	687a      	ldr	r2, [r7, #4]
    212c:	6812      	ldr	r2, [r2, #0]
    212e:	430a      	orrs	r2, r1
    2130:	601a      	str	r2, [r3, #0]
    2132:	e00c      	b.n	214e <EXTI_Init+0x122>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
    2134:	687b      	ldr	r3, [r7, #4]
    2136:	791b      	ldrb	r3, [r3, #4]
    2138:	68fa      	ldr	r2, [r7, #12]
    213a:	4413      	add	r3, r2
    213c:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
    213e:	68fb      	ldr	r3, [r7, #12]
    2140:	68fa      	ldr	r2, [r7, #12]
    2142:	6811      	ldr	r1, [r2, #0]
    2144:	687a      	ldr	r2, [r7, #4]
    2146:	6812      	ldr	r2, [r2, #0]
    2148:	43d2      	mvns	r2, r2
    214a:	400a      	ands	r2, r1
    214c:	601a      	str	r2, [r3, #0]
  }
}
    214e:	3714      	adds	r7, #20
    2150:	46bd      	mov	sp, r7
    2152:	f85d 7b04 	ldr.w	r7, [sp], #4
    2156:	4770      	bx	lr

00002158 <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
    2158:	b480      	push	{r7}
    215a:	b083      	sub	sp, #12
    215c:	af00      	add	r7, sp, #0
    215e:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
    2160:	687b      	ldr	r3, [r7, #4]
    2162:	2200      	movs	r2, #0
    2164:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
    2166:	687b      	ldr	r3, [r7, #4]
    2168:	2200      	movs	r2, #0
    216a:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
    216c:	687b      	ldr	r3, [r7, #4]
    216e:	220c      	movs	r2, #12
    2170:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
    2172:	687b      	ldr	r3, [r7, #4]
    2174:	2200      	movs	r2, #0
    2176:	719a      	strb	r2, [r3, #6]
}
    2178:	370c      	adds	r7, #12
    217a:	46bd      	mov	sp, r7
    217c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2180:	4770      	bx	lr
    2182:	bf00      	nop

00002184 <EXTI_GenerateSWInterrupt>:
  * @param  EXTI_Line: specifies the EXTI lines to be enabled or disabled.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
    2184:	b480      	push	{r7}
    2186:	b083      	sub	sp, #12
    2188:	af00      	add	r7, sp, #0
    218a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->SWIER |= EXTI_Line;
    218c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2190:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2194:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2198:	f2c4 0201 	movt	r2, #16385	; 0x4001
    219c:	6911      	ldr	r1, [r2, #16]
    219e:	687a      	ldr	r2, [r7, #4]
    21a0:	430a      	orrs	r2, r1
    21a2:	611a      	str	r2, [r3, #16]
}
    21a4:	370c      	adds	r7, #12
    21a6:	46bd      	mov	sp, r7
    21a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    21ac:	4770      	bx	lr
    21ae:	bf00      	nop

000021b0 <EXTI_GetFlagStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
    21b0:	b480      	push	{r7}
    21b2:	b085      	sub	sp, #20
    21b4:	af00      	add	r7, sp, #0
    21b6:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    21b8:	2300      	movs	r3, #0
    21ba:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
    21bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21c0:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21c4:	695a      	ldr	r2, [r3, #20]
    21c6:	687b      	ldr	r3, [r7, #4]
    21c8:	4013      	ands	r3, r2
    21ca:	2b00      	cmp	r3, #0
    21cc:	d002      	beq.n	21d4 <EXTI_GetFlagStatus+0x24>
  {
    bitstatus = SET;
    21ce:	2301      	movs	r3, #1
    21d0:	73fb      	strb	r3, [r7, #15]
    21d2:	e001      	b.n	21d8 <EXTI_GetFlagStatus+0x28>
  }
  else
  {
    bitstatus = RESET;
    21d4:	2300      	movs	r3, #0
    21d6:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    21d8:	7bfb      	ldrb	r3, [r7, #15]
}
    21da:	4618      	mov	r0, r3
    21dc:	3714      	adds	r7, #20
    21de:	46bd      	mov	sp, r7
    21e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    21e4:	4770      	bx	lr
    21e6:	bf00      	nop

000021e8 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
    21e8:	b480      	push	{r7}
    21ea:	b083      	sub	sp, #12
    21ec:	af00      	add	r7, sp, #0
    21ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
    21f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21f4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21f8:	687a      	ldr	r2, [r7, #4]
    21fa:	615a      	str	r2, [r3, #20]
}
    21fc:	370c      	adds	r7, #12
    21fe:	46bd      	mov	sp, r7
    2200:	f85d 7b04 	ldr.w	r7, [sp], #4
    2204:	4770      	bx	lr
    2206:	bf00      	nop

00002208 <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
    2208:	b480      	push	{r7}
    220a:	b085      	sub	sp, #20
    220c:	af00      	add	r7, sp, #0
    220e:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
    2210:	2300      	movs	r3, #0
    2212:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
    2214:	2300      	movs	r3, #0
    2216:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
    2218:	f44f 6380 	mov.w	r3, #1024	; 0x400
    221c:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2220:	681a      	ldr	r2, [r3, #0]
    2222:	687b      	ldr	r3, [r7, #4]
    2224:	4013      	ands	r3, r2
    2226:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
    2228:	f44f 6380 	mov.w	r3, #1024	; 0x400
    222c:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2230:	695a      	ldr	r2, [r3, #20]
    2232:	687b      	ldr	r3, [r7, #4]
    2234:	4013      	ands	r3, r2
    2236:	2b00      	cmp	r3, #0
    2238:	d005      	beq.n	2246 <EXTI_GetITStatus+0x3e>
    223a:	68bb      	ldr	r3, [r7, #8]
    223c:	2b00      	cmp	r3, #0
    223e:	d002      	beq.n	2246 <EXTI_GetITStatus+0x3e>
  {
    bitstatus = SET;
    2240:	2301      	movs	r3, #1
    2242:	73fb      	strb	r3, [r7, #15]
    2244:	e001      	b.n	224a <EXTI_GetITStatus+0x42>
  }
  else
  {
    bitstatus = RESET;
    2246:	2300      	movs	r3, #0
    2248:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    224a:	7bfb      	ldrb	r3, [r7, #15]
}
    224c:	4618      	mov	r0, r3
    224e:	3714      	adds	r7, #20
    2250:	46bd      	mov	sp, r7
    2252:	f85d 7b04 	ldr.w	r7, [sp], #4
    2256:	4770      	bx	lr

00002258 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
    2258:	b480      	push	{r7}
    225a:	b083      	sub	sp, #12
    225c:	af00      	add	r7, sp, #0
    225e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
    2260:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2264:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2268:	687a      	ldr	r2, [r7, #4]
    226a:	615a      	str	r2, [r3, #20]
}
    226c:	370c      	adds	r7, #12
    226e:	46bd      	mov	sp, r7
    2270:	f85d 7b04 	ldr.w	r7, [sp], #4
    2274:	4770      	bx	lr
    2276:	bf00      	nop

00002278 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
    2278:	b480      	push	{r7}
    227a:	b083      	sub	sp, #12
    227c:	af00      	add	r7, sp, #0
    227e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
    2280:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2284:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2288:	687a      	ldr	r2, [r7, #4]
    228a:	f042 62bf 	orr.w	r2, r2, #100139008	; 0x5f80000
    228e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    2292:	60da      	str	r2, [r3, #12]
}
    2294:	370c      	adds	r7, #12
    2296:	46bd      	mov	sp, r7
    2298:	f85d 7b04 	ldr.w	r7, [sp], #4
    229c:	4770      	bx	lr
    229e:	bf00      	nop

000022a0 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
    22a0:	b480      	push	{r7}
    22a2:	b087      	sub	sp, #28
    22a4:	af00      	add	r7, sp, #0
    22a6:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
    22a8:	2300      	movs	r3, #0
    22aa:	617b      	str	r3, [r7, #20]
    22ac:	2300      	movs	r3, #0
    22ae:	613b      	str	r3, [r7, #16]
    22b0:	230f      	movs	r3, #15
    22b2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
    22b4:	687b      	ldr	r3, [r7, #4]
    22b6:	78db      	ldrb	r3, [r3, #3]
    22b8:	2b00      	cmp	r3, #0
    22ba:	d042      	beq.n	2342 <NVIC_Init+0xa2>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    22bc:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    22c0:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22c4:	68db      	ldr	r3, [r3, #12]
    22c6:	43db      	mvns	r3, r3
    22c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    22cc:	0a1b      	lsrs	r3, r3, #8
    22ce:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
    22d0:	697b      	ldr	r3, [r7, #20]
    22d2:	f1c3 0304 	rsb	r3, r3, #4
    22d6:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
    22d8:	697b      	ldr	r3, [r7, #20]
    22da:	68fa      	ldr	r2, [r7, #12]
    22dc:	fa22 f303 	lsr.w	r3, r2, r3
    22e0:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    22e2:	687b      	ldr	r3, [r7, #4]
    22e4:	785b      	ldrb	r3, [r3, #1]
    22e6:	461a      	mov	r2, r3
    22e8:	693b      	ldr	r3, [r7, #16]
    22ea:	fa02 f303 	lsl.w	r3, r2, r3
    22ee:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
    22f0:	687b      	ldr	r3, [r7, #4]
    22f2:	789b      	ldrb	r3, [r3, #2]
    22f4:	461a      	mov	r2, r3
    22f6:	68fb      	ldr	r3, [r7, #12]
    22f8:	4013      	ands	r3, r2
    22fa:	697a      	ldr	r2, [r7, #20]
    22fc:	4313      	orrs	r3, r2
    22fe:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
    2300:	697b      	ldr	r3, [r7, #20]
    2302:	011b      	lsls	r3, r3, #4
    2304:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    2306:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    230a:	f2ce 0300 	movt	r3, #57344	; 0xe000
    230e:	687a      	ldr	r2, [r7, #4]
    2310:	7812      	ldrb	r2, [r2, #0]
    2312:	4611      	mov	r1, r2
    2314:	697a      	ldr	r2, [r7, #20]
    2316:	b2d2      	uxtb	r2, r2
    2318:	440b      	add	r3, r1
    231a:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    231e:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    2322:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2326:	687a      	ldr	r2, [r7, #4]
    2328:	7812      	ldrb	r2, [r2, #0]
    232a:	0952      	lsrs	r2, r2, #5
    232c:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    232e:	6879      	ldr	r1, [r7, #4]
    2330:	7809      	ldrb	r1, [r1, #0]
    2332:	f001 011f 	and.w	r1, r1, #31
    2336:	2001      	movs	r0, #1
    2338:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    233c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    2340:	e011      	b.n	2366 <NVIC_Init+0xc6>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    2342:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    2346:	f2ce 0300 	movt	r3, #57344	; 0xe000
    234a:	687a      	ldr	r2, [r7, #4]
    234c:	7812      	ldrb	r2, [r2, #0]
    234e:	0952      	lsrs	r2, r2, #5
    2350:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    2352:	6879      	ldr	r1, [r7, #4]
    2354:	7809      	ldrb	r1, [r1, #0]
    2356:	f001 011f 	and.w	r1, r1, #31
    235a:	2001      	movs	r0, #1
    235c:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    2360:	3220      	adds	r2, #32
    2362:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
    2366:	371c      	adds	r7, #28
    2368:	46bd      	mov	sp, r7
    236a:	f85d 7b04 	ldr.w	r7, [sp], #4
    236e:	4770      	bx	lr

00002370 <NVIC_SetVectorTable>:
  * @param  Offset: Vector Table base offset field. This value must be a multiple 
  *         of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
    2370:	b480      	push	{r7}
    2372:	b083      	sub	sp, #12
    2374:	af00      	add	r7, sp, #0
    2376:	6078      	str	r0, [r7, #4]
    2378:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
    237a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    237e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2382:	683a      	ldr	r2, [r7, #0]
    2384:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
    2388:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    238c:	6879      	ldr	r1, [r7, #4]
    238e:	430a      	orrs	r2, r1
    2390:	609a      	str	r2, [r3, #8]
}
    2392:	370c      	adds	r7, #12
    2394:	46bd      	mov	sp, r7
    2396:	f85d 7b04 	ldr.w	r7, [sp], #4
    239a:	4770      	bx	lr

0000239c <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
    239c:	b480      	push	{r7}
    239e:	b083      	sub	sp, #12
    23a0:	af00      	add	r7, sp, #0
    23a2:	4602      	mov	r2, r0
    23a4:	460b      	mov	r3, r1
    23a6:	71fa      	strb	r2, [r7, #7]
    23a8:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
    23aa:	79bb      	ldrb	r3, [r7, #6]
    23ac:	2b00      	cmp	r3, #0
    23ae:	d00c      	beq.n	23ca <NVIC_SystemLPConfig+0x2e>
  {
    SCB->SCR |= LowPowerMode;
    23b0:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    23b4:	f2ce 0300 	movt	r3, #57344	; 0xe000
    23b8:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    23bc:	f2ce 0200 	movt	r2, #57344	; 0xe000
    23c0:	6911      	ldr	r1, [r2, #16]
    23c2:	79fa      	ldrb	r2, [r7, #7]
    23c4:	430a      	orrs	r2, r1
    23c6:	611a      	str	r2, [r3, #16]
    23c8:	e00c      	b.n	23e4 <NVIC_SystemLPConfig+0x48>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
    23ca:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    23ce:	f2ce 0300 	movt	r3, #57344	; 0xe000
    23d2:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    23d6:	f2ce 0200 	movt	r2, #57344	; 0xe000
    23da:	6911      	ldr	r1, [r2, #16]
    23dc:	79fa      	ldrb	r2, [r7, #7]
    23de:	43d2      	mvns	r2, r2
    23e0:	400a      	ands	r2, r1
    23e2:	611a      	str	r2, [r3, #16]
  }
}
    23e4:	370c      	adds	r7, #12
    23e6:	46bd      	mov	sp, r7
    23e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    23ec:	4770      	bx	lr
    23ee:	bf00      	nop

000023f0 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
    23f0:	b480      	push	{r7}
    23f2:	b083      	sub	sp, #12
    23f4:	af00      	add	r7, sp, #0
    23f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
    23f8:	687b      	ldr	r3, [r7, #4]
    23fa:	2b04      	cmp	r3, #4
    23fc:	d10c      	bne.n	2418 <SysTick_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
    23fe:	f24e 0310 	movw	r3, #57360	; 0xe010
    2402:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2406:	f24e 0210 	movw	r2, #57360	; 0xe010
    240a:	f2ce 0200 	movt	r2, #57344	; 0xe000
    240e:	6812      	ldr	r2, [r2, #0]
    2410:	f042 0204 	orr.w	r2, r2, #4
    2414:	601a      	str	r2, [r3, #0]
    2416:	e00b      	b.n	2430 <SysTick_CLKSourceConfig+0x40>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
    2418:	f24e 0310 	movw	r3, #57360	; 0xe010
    241c:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2420:	f24e 0210 	movw	r2, #57360	; 0xe010
    2424:	f2ce 0200 	movt	r2, #57344	; 0xe000
    2428:	6812      	ldr	r2, [r2, #0]
    242a:	f022 0204 	bic.w	r2, r2, #4
    242e:	601a      	str	r2, [r3, #0]
  }
}
    2430:	370c      	adds	r7, #12
    2432:	46bd      	mov	sp, r7
    2434:	f85d 7b04 	ldr.w	r7, [sp], #4
    2438:	4770      	bx	lr
    243a:	bf00      	nop

0000243c <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
    243c:	b580      	push	{r7, lr}
    243e:	b086      	sub	sp, #24
    2440:	af00      	add	r7, sp, #0
    2442:	60f8      	str	r0, [r7, #12]
    2444:	60b9      	str	r1, [r7, #8]
    2446:	607a      	str	r2, [r7, #4]
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
    2448:	2038      	movs	r0, #56	; 0x38
    244a:	f002 f909 	bl	4660 <pvPortMalloc>
    244e:	6138      	str	r0, [r7, #16]
	if( pxCoRoutine )
    2450:	693b      	ldr	r3, [r7, #16]
    2452:	2b00      	cmp	r3, #0
    2454:	d058      	beq.n	2508 <xCoRoutineCreate+0xcc>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
    2456:	f240 03a4 	movw	r3, #164	; 0xa4
    245a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    245e:	681b      	ldr	r3, [r3, #0]
    2460:	2b00      	cmp	r3, #0
    2462:	d107      	bne.n	2474 <xCoRoutineCreate+0x38>
		{
			pxCurrentCoRoutine = pxCoRoutine;
    2464:	f240 03a4 	movw	r3, #164	; 0xa4
    2468:	f2c2 0300 	movt	r3, #8192	; 0x2000
    246c:	693a      	ldr	r2, [r7, #16]
    246e:	601a      	str	r2, [r3, #0]
			prvInitialiseCoRoutineLists();
    2470:	f000 fa08 	bl	2884 <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
    2474:	68bb      	ldr	r3, [r7, #8]
    2476:	2b01      	cmp	r3, #1
    2478:	d901      	bls.n	247e <xCoRoutineCreate+0x42>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
    247a:	2301      	movs	r3, #1
    247c:	60bb      	str	r3, [r7, #8]
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
    247e:	693b      	ldr	r3, [r7, #16]
    2480:	2200      	movs	r2, #0
    2482:	869a      	strh	r2, [r3, #52]	; 0x34
		pxCoRoutine->uxPriority = uxPriority;
    2484:	693b      	ldr	r3, [r7, #16]
    2486:	68ba      	ldr	r2, [r7, #8]
    2488:	62da      	str	r2, [r3, #44]	; 0x2c
		pxCoRoutine->uxIndex = uxIndex;
    248a:	693b      	ldr	r3, [r7, #16]
    248c:	687a      	ldr	r2, [r7, #4]
    248e:	631a      	str	r2, [r3, #48]	; 0x30
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
    2490:	693b      	ldr	r3, [r7, #16]
    2492:	68fa      	ldr	r2, [r7, #12]
    2494:	601a      	str	r2, [r3, #0]

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
    2496:	693b      	ldr	r3, [r7, #16]
    2498:	3304      	adds	r3, #4
    249a:	4618      	mov	r0, r3
    249c:	f000 fa7c 	bl	2998 <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
    24a0:	693b      	ldr	r3, [r7, #16]
    24a2:	3318      	adds	r3, #24
    24a4:	4618      	mov	r0, r3
    24a6:	f000 fa77 	bl	2998 <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
    24aa:	693b      	ldr	r3, [r7, #16]
    24ac:	693a      	ldr	r2, [r7, #16]
    24ae:	611a      	str	r2, [r3, #16]
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
    24b0:	693b      	ldr	r3, [r7, #16]
    24b2:	693a      	ldr	r2, [r7, #16]
    24b4:	625a      	str	r2, [r3, #36]	; 0x24
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    24b6:	68bb      	ldr	r3, [r7, #8]
    24b8:	f1c3 0205 	rsb	r2, r3, #5
    24bc:	693b      	ldr	r3, [r7, #16]
    24be:	619a      	str	r2, [r3, #24]
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
    24c0:	693b      	ldr	r3, [r7, #16]
    24c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    24c4:	f240 03a8 	movw	r3, #168	; 0xa8
    24c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24cc:	681b      	ldr	r3, [r3, #0]
    24ce:	429a      	cmp	r2, r3
    24d0:	d906      	bls.n	24e0 <xCoRoutineCreate+0xa4>
    24d2:	693b      	ldr	r3, [r7, #16]
    24d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    24d6:	f240 03a8 	movw	r3, #168	; 0xa8
    24da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24de:	601a      	str	r2, [r3, #0]
    24e0:	693b      	ldr	r3, [r7, #16]
    24e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    24e4:	4613      	mov	r3, r2
    24e6:	009b      	lsls	r3, r3, #2
    24e8:	4413      	add	r3, r2
    24ea:	009b      	lsls	r3, r3, #2
    24ec:	f240 0238 	movw	r2, #56	; 0x38
    24f0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    24f4:	441a      	add	r2, r3
    24f6:	693b      	ldr	r3, [r7, #16]
    24f8:	3304      	adds	r3, #4
    24fa:	4610      	mov	r0, r2
    24fc:	4619      	mov	r1, r3
    24fe:	f000 fa57 	bl	29b0 <vListInsertEnd>

		xReturn = pdPASS;
    2502:	2301      	movs	r3, #1
    2504:	617b      	str	r3, [r7, #20]
    2506:	e002      	b.n	250e <xCoRoutineCreate+0xd2>
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    2508:	f04f 33ff 	mov.w	r3, #4294967295
    250c:	617b      	str	r3, [r7, #20]
	}
	
	return xReturn;	
    250e:	697b      	ldr	r3, [r7, #20]
}
    2510:	4618      	mov	r0, r3
    2512:	3718      	adds	r7, #24
    2514:	46bd      	mov	sp, r7
    2516:	bd80      	pop	{r7, pc}

00002518 <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
    2518:	b580      	push	{r7, lr}
    251a:	b084      	sub	sp, #16
    251c:	af00      	add	r7, sp, #0
    251e:	6078      	str	r0, [r7, #4]
    2520:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
    2522:	f240 03ac 	movw	r3, #172	; 0xac
    2526:	f2c2 0300 	movt	r3, #8192	; 0x2000
    252a:	681a      	ldr	r2, [r3, #0]
    252c:	687b      	ldr	r3, [r7, #4]
    252e:	4413      	add	r3, r2
    2530:	60fb      	str	r3, [r7, #12]

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2532:	f240 03a4 	movw	r3, #164	; 0xa4
    2536:	f2c2 0300 	movt	r3, #8192	; 0x2000
    253a:	681b      	ldr	r3, [r3, #0]
    253c:	3304      	adds	r3, #4
    253e:	4618      	mov	r0, r3
    2540:	f000 fa96 	bl	2a70 <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
    2544:	f240 03a4 	movw	r3, #164	; 0xa4
    2548:	f2c2 0300 	movt	r3, #8192	; 0x2000
    254c:	681b      	ldr	r3, [r3, #0]
    254e:	68fa      	ldr	r2, [r7, #12]
    2550:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xCoRoutineTickCount )
    2552:	f240 03ac 	movw	r3, #172	; 0xac
    2556:	f2c2 0300 	movt	r3, #8192	; 0x2000
    255a:	681b      	ldr	r3, [r3, #0]
    255c:	68fa      	ldr	r2, [r7, #12]
    255e:	429a      	cmp	r2, r3
    2560:	d20f      	bcs.n	2582 <vCoRoutineAddToDelayedList+0x6a>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2562:	f240 038c 	movw	r3, #140	; 0x8c
    2566:	f2c2 0300 	movt	r3, #8192	; 0x2000
    256a:	681a      	ldr	r2, [r3, #0]
    256c:	f240 03a4 	movw	r3, #164	; 0xa4
    2570:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2574:	681b      	ldr	r3, [r3, #0]
    2576:	3304      	adds	r3, #4
    2578:	4610      	mov	r0, r2
    257a:	4619      	mov	r1, r3
    257c:	f000 fa40 	bl	2a00 <vListInsert>
    2580:	e00e      	b.n	25a0 <vCoRoutineAddToDelayedList+0x88>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2582:	f240 0388 	movw	r3, #136	; 0x88
    2586:	f2c2 0300 	movt	r3, #8192	; 0x2000
    258a:	681a      	ldr	r2, [r3, #0]
    258c:	f240 03a4 	movw	r3, #164	; 0xa4
    2590:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2594:	681b      	ldr	r3, [r3, #0]
    2596:	3304      	adds	r3, #4
    2598:	4610      	mov	r0, r2
    259a:	4619      	mov	r1, r3
    259c:	f000 fa30 	bl	2a00 <vListInsert>
	}

	if( pxEventList )
    25a0:	683b      	ldr	r3, [r7, #0]
    25a2:	2b00      	cmp	r3, #0
    25a4:	d009      	beq.n	25ba <vCoRoutineAddToDelayedList+0xa2>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
    25a6:	f240 03a4 	movw	r3, #164	; 0xa4
    25aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25ae:	681b      	ldr	r3, [r3, #0]
    25b0:	3318      	adds	r3, #24
    25b2:	6838      	ldr	r0, [r7, #0]
    25b4:	4619      	mov	r1, r3
    25b6:	f000 fa23 	bl	2a00 <vListInsert>
	}
}
    25ba:	3710      	adds	r7, #16
    25bc:	46bd      	mov	sp, r7
    25be:	bd80      	pop	{r7, pc}

000025c0 <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
    25c0:	b580      	push	{r7, lr}
    25c2:	b082      	sub	sp, #8
    25c4:	af00      	add	r7, sp, #0
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    25c6:	e039      	b.n	263c <prvCheckPendingReadyList+0x7c>
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
    25c8:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    25cc:	f380 8811 	msr	BASEPRI, r0
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
    25d0:	f240 0390 	movw	r3, #144	; 0x90
    25d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25d8:	68db      	ldr	r3, [r3, #12]
    25da:	68db      	ldr	r3, [r3, #12]
    25dc:	607b      	str	r3, [r7, #4]
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    25de:	687b      	ldr	r3, [r7, #4]
    25e0:	3318      	adds	r3, #24
    25e2:	4618      	mov	r0, r3
    25e4:	f000 fa44 	bl	2a70 <vListRemove>
		}
		portENABLE_INTERRUPTS();
    25e8:	f04f 0000 	mov.w	r0, #0
    25ec:	f380 8811 	msr	BASEPRI, r0

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
    25f0:	687b      	ldr	r3, [r7, #4]
    25f2:	3304      	adds	r3, #4
    25f4:	4618      	mov	r0, r3
    25f6:	f000 fa3b 	bl	2a70 <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
    25fa:	687b      	ldr	r3, [r7, #4]
    25fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25fe:	f240 03a8 	movw	r3, #168	; 0xa8
    2602:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2606:	681b      	ldr	r3, [r3, #0]
    2608:	429a      	cmp	r2, r3
    260a:	d906      	bls.n	261a <prvCheckPendingReadyList+0x5a>
    260c:	687b      	ldr	r3, [r7, #4]
    260e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2610:	f240 03a8 	movw	r3, #168	; 0xa8
    2614:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2618:	601a      	str	r2, [r3, #0]
    261a:	687b      	ldr	r3, [r7, #4]
    261c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    261e:	4613      	mov	r3, r2
    2620:	009b      	lsls	r3, r3, #2
    2622:	4413      	add	r3, r2
    2624:	009b      	lsls	r3, r3, #2
    2626:	f240 0238 	movw	r2, #56	; 0x38
    262a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    262e:	441a      	add	r2, r3
    2630:	687b      	ldr	r3, [r7, #4]
    2632:	3304      	adds	r3, #4
    2634:	4610      	mov	r0, r2
    2636:	4619      	mov	r1, r3
    2638:	f000 f9ba 	bl	29b0 <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    263c:	f240 0390 	movw	r3, #144	; 0x90
    2640:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2644:	681b      	ldr	r3, [r3, #0]
    2646:	2b00      	cmp	r3, #0
    2648:	d1be      	bne.n	25c8 <prvCheckPendingReadyList+0x8>
		portENABLE_INTERRUPTS();

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
	}
}
    264a:	3708      	adds	r7, #8
    264c:	46bd      	mov	sp, r7
    264e:	bd80      	pop	{r7, pc}

00002650 <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
    2650:	b580      	push	{r7, lr}
    2652:	b082      	sub	sp, #8
    2654:	af00      	add	r7, sp, #0
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
    2656:	f001 fa89 	bl	3b6c <xTaskGetTickCount>
    265a:	4602      	mov	r2, r0
    265c:	f240 03b0 	movw	r3, #176	; 0xb0
    2660:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2664:	681b      	ldr	r3, [r3, #0]
    2666:	1ad2      	subs	r2, r2, r3
    2668:	f240 03b4 	movw	r3, #180	; 0xb4
    266c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2670:	601a      	str	r2, [r3, #0]
	while( xPassedTicks )
    2672:	e085      	b.n	2780 <prvCheckDelayedList+0x130>
	{
		xCoRoutineTickCount++;
    2674:	f240 03ac 	movw	r3, #172	; 0xac
    2678:	f2c2 0300 	movt	r3, #8192	; 0x2000
    267c:	681b      	ldr	r3, [r3, #0]
    267e:	1c5a      	adds	r2, r3, #1
    2680:	f240 03ac 	movw	r3, #172	; 0xac
    2684:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2688:	601a      	str	r2, [r3, #0]
		xPassedTicks--;
    268a:	f240 03b4 	movw	r3, #180	; 0xb4
    268e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2692:	681b      	ldr	r3, [r3, #0]
    2694:	1e5a      	subs	r2, r3, #1
    2696:	f240 03b4 	movw	r3, #180	; 0xb4
    269a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    269e:	601a      	str	r2, [r3, #0]

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
    26a0:	f240 03ac 	movw	r3, #172	; 0xac
    26a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26a8:	681b      	ldr	r3, [r3, #0]
    26aa:	2b00      	cmp	r3, #0
    26ac:	d116      	bne.n	26dc <prvCheckDelayedList+0x8c>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
    26ae:	f240 0388 	movw	r3, #136	; 0x88
    26b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26b6:	681b      	ldr	r3, [r3, #0]
    26b8:	607b      	str	r3, [r7, #4]
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
    26ba:	f240 038c 	movw	r3, #140	; 0x8c
    26be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26c2:	681a      	ldr	r2, [r3, #0]
    26c4:	f240 0388 	movw	r3, #136	; 0x88
    26c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26cc:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedCoRoutineList = pxTemp;
    26ce:	f240 038c 	movw	r3, #140	; 0x8c
    26d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26d6:	687a      	ldr	r2, [r7, #4]
    26d8:	601a      	str	r2, [r3, #0]
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    26da:	e049      	b.n	2770 <prvCheckDelayedList+0x120>
    26dc:	e048      	b.n	2770 <prvCheckDelayedList+0x120>
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
    26de:	f240 0388 	movw	r3, #136	; 0x88
    26e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26e6:	681b      	ldr	r3, [r3, #0]
    26e8:	68db      	ldr	r3, [r3, #12]
    26ea:	68db      	ldr	r3, [r3, #12]
    26ec:	603b      	str	r3, [r7, #0]

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
    26ee:	683b      	ldr	r3, [r7, #0]
    26f0:	685a      	ldr	r2, [r3, #4]
    26f2:	f240 03ac 	movw	r3, #172	; 0xac
    26f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26fa:	681b      	ldr	r3, [r3, #0]
    26fc:	429a      	cmp	r2, r3
    26fe:	d900      	bls.n	2702 <prvCheckDelayedList+0xb2>
			{			
				/* Timeout not yet expired. */																			
				break;																				
    2700:	e03e      	b.n	2780 <prvCheckDelayedList+0x130>
			}																						

			portDISABLE_INTERRUPTS();
    2702:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    2706:	f380 8811 	msr	BASEPRI, r0
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
    270a:	683b      	ldr	r3, [r7, #0]
    270c:	3304      	adds	r3, #4
    270e:	4618      	mov	r0, r3
    2710:	f000 f9ae 	bl	2a70 <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
    2714:	683b      	ldr	r3, [r7, #0]
    2716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2718:	2b00      	cmp	r3, #0
    271a:	d004      	beq.n	2726 <prvCheckDelayedList+0xd6>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
    271c:	683b      	ldr	r3, [r7, #0]
    271e:	3318      	adds	r3, #24
    2720:	4618      	mov	r0, r3
    2722:	f000 f9a5 	bl	2a70 <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
    2726:	f04f 0000 	mov.w	r0, #0
    272a:	f380 8811 	msr	BASEPRI, r0

			prvAddCoRoutineToReadyQueue( pxCRCB );													
    272e:	683b      	ldr	r3, [r7, #0]
    2730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2732:	f240 03a8 	movw	r3, #168	; 0xa8
    2736:	f2c2 0300 	movt	r3, #8192	; 0x2000
    273a:	681b      	ldr	r3, [r3, #0]
    273c:	429a      	cmp	r2, r3
    273e:	d906      	bls.n	274e <prvCheckDelayedList+0xfe>
    2740:	683b      	ldr	r3, [r7, #0]
    2742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2744:	f240 03a8 	movw	r3, #168	; 0xa8
    2748:	f2c2 0300 	movt	r3, #8192	; 0x2000
    274c:	601a      	str	r2, [r3, #0]
    274e:	683b      	ldr	r3, [r7, #0]
    2750:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2752:	4613      	mov	r3, r2
    2754:	009b      	lsls	r3, r3, #2
    2756:	4413      	add	r3, r2
    2758:	009b      	lsls	r3, r3, #2
    275a:	f240 0238 	movw	r2, #56	; 0x38
    275e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2762:	441a      	add	r2, r3
    2764:	683b      	ldr	r3, [r7, #0]
    2766:	3304      	adds	r3, #4
    2768:	4610      	mov	r0, r2
    276a:	4619      	mov	r1, r3
    276c:	f000 f920 	bl	29b0 <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    2770:	f240 0388 	movw	r3, #136	; 0x88
    2774:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2778:	681b      	ldr	r3, [r3, #0]
    277a:	681b      	ldr	r3, [r3, #0]
    277c:	2b00      	cmp	r3, #0
    277e:	d1ae      	bne.n	26de <prvCheckDelayedList+0x8e>
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
    2780:	f240 03b4 	movw	r3, #180	; 0xb4
    2784:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2788:	681b      	ldr	r3, [r3, #0]
    278a:	2b00      	cmp	r3, #0
    278c:	f47f af72 	bne.w	2674 <prvCheckDelayedList+0x24>

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
    2790:	f240 03ac 	movw	r3, #172	; 0xac
    2794:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2798:	681a      	ldr	r2, [r3, #0]
    279a:	f240 03b0 	movw	r3, #176	; 0xb0
    279e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    27a2:	601a      	str	r2, [r3, #0]
}
    27a4:	3708      	adds	r7, #8
    27a6:	46bd      	mov	sp, r7
    27a8:	bd80      	pop	{r7, pc}
    27aa:	bf00      	nop

000027ac <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
    27ac:	b580      	push	{r7, lr}
    27ae:	b082      	sub	sp, #8
    27b0:	af00      	add	r7, sp, #0
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
    27b2:	f7ff ff05 	bl	25c0 <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
    27b6:	f7ff ff4b 	bl	2650 <prvCheckDelayedList>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    27ba:	e012      	b.n	27e2 <vCoRoutineSchedule+0x36>
	{
		if( uxTopCoRoutineReadyPriority == 0 )
    27bc:	f240 03a8 	movw	r3, #168	; 0xa8
    27c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    27c4:	681b      	ldr	r3, [r3, #0]
    27c6:	2b00      	cmp	r3, #0
    27c8:	d100      	bne.n	27cc <vCoRoutineSchedule+0x20>
		{
			/* No more co-routines to check. */
			return;
    27ca:	e057      	b.n	287c <vCoRoutineSchedule+0xd0>
		}
		--uxTopCoRoutineReadyPriority;
    27cc:	f240 03a8 	movw	r3, #168	; 0xa8
    27d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    27d4:	681b      	ldr	r3, [r3, #0]
    27d6:	1e5a      	subs	r2, r3, #1
    27d8:	f240 03a8 	movw	r3, #168	; 0xa8
    27dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    27e0:	601a      	str	r2, [r3, #0]

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    27e2:	f240 03a8 	movw	r3, #168	; 0xa8
    27e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    27ea:	6819      	ldr	r1, [r3, #0]
    27ec:	f240 0238 	movw	r2, #56	; 0x38
    27f0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    27f4:	460b      	mov	r3, r1
    27f6:	009b      	lsls	r3, r3, #2
    27f8:	440b      	add	r3, r1
    27fa:	009b      	lsls	r3, r3, #2
    27fc:	4413      	add	r3, r2
    27fe:	681b      	ldr	r3, [r3, #0]
    2800:	2b00      	cmp	r3, #0
    2802:	d0db      	beq.n	27bc <vCoRoutineSchedule+0x10>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
    2804:	f240 03a8 	movw	r3, #168	; 0xa8
    2808:	f2c2 0300 	movt	r3, #8192	; 0x2000
    280c:	681a      	ldr	r2, [r3, #0]
    280e:	4613      	mov	r3, r2
    2810:	009b      	lsls	r3, r3, #2
    2812:	4413      	add	r3, r2
    2814:	009b      	lsls	r3, r3, #2
    2816:	f240 0238 	movw	r2, #56	; 0x38
    281a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    281e:	4413      	add	r3, r2
    2820:	607b      	str	r3, [r7, #4]
    2822:	687b      	ldr	r3, [r7, #4]
    2824:	685b      	ldr	r3, [r3, #4]
    2826:	685a      	ldr	r2, [r3, #4]
    2828:	687b      	ldr	r3, [r7, #4]
    282a:	605a      	str	r2, [r3, #4]
    282c:	687b      	ldr	r3, [r7, #4]
    282e:	685a      	ldr	r2, [r3, #4]
    2830:	687b      	ldr	r3, [r7, #4]
    2832:	3308      	adds	r3, #8
    2834:	429a      	cmp	r2, r3
    2836:	d104      	bne.n	2842 <vCoRoutineSchedule+0x96>
    2838:	687b      	ldr	r3, [r7, #4]
    283a:	685b      	ldr	r3, [r3, #4]
    283c:	685a      	ldr	r2, [r3, #4]
    283e:	687b      	ldr	r3, [r7, #4]
    2840:	605a      	str	r2, [r3, #4]
    2842:	687b      	ldr	r3, [r7, #4]
    2844:	685b      	ldr	r3, [r3, #4]
    2846:	68da      	ldr	r2, [r3, #12]
    2848:	f240 03a4 	movw	r3, #164	; 0xa4
    284c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2850:	601a      	str	r2, [r3, #0]

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
    2852:	f240 03a4 	movw	r3, #164	; 0xa4
    2856:	f2c2 0300 	movt	r3, #8192	; 0x2000
    285a:	681b      	ldr	r3, [r3, #0]
    285c:	681a      	ldr	r2, [r3, #0]
    285e:	f240 03a4 	movw	r3, #164	; 0xa4
    2862:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2866:	6819      	ldr	r1, [r3, #0]
    2868:	f240 03a4 	movw	r3, #164	; 0xa4
    286c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2870:	681b      	ldr	r3, [r3, #0]
    2872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2874:	4608      	mov	r0, r1
    2876:	4619      	mov	r1, r3
    2878:	4790      	blx	r2

	return;
    287a:	bf00      	nop
}
    287c:	3708      	adds	r7, #8
    287e:	46bd      	mov	sp, r7
    2880:	bd80      	pop	{r7, pc}
    2882:	bf00      	nop

00002884 <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
    2884:	b580      	push	{r7, lr}
    2886:	b082      	sub	sp, #8
    2888:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    288a:	2300      	movs	r3, #0
    288c:	607b      	str	r3, [r7, #4]
    288e:	e00f      	b.n	28b0 <prvInitialiseCoRoutineLists+0x2c>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
    2890:	687a      	ldr	r2, [r7, #4]
    2892:	4613      	mov	r3, r2
    2894:	009b      	lsls	r3, r3, #2
    2896:	4413      	add	r3, r2
    2898:	009b      	lsls	r3, r3, #2
    289a:	f240 0238 	movw	r2, #56	; 0x38
    289e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    28a2:	4413      	add	r3, r2
    28a4:	4618      	mov	r0, r3
    28a6:	f000 f857 	bl	2958 <vListInitialise>

static void prvInitialiseCoRoutineLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    28aa:	687b      	ldr	r3, [r7, #4]
    28ac:	3301      	adds	r3, #1
    28ae:	607b      	str	r3, [r7, #4]
    28b0:	687b      	ldr	r3, [r7, #4]
    28b2:	2b01      	cmp	r3, #1
    28b4:	d9ec      	bls.n	2890 <prvInitialiseCoRoutineLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
    28b6:	f240 0060 	movw	r0, #96	; 0x60
    28ba:	f2c2 0000 	movt	r0, #8192	; 0x2000
    28be:	f000 f84b 	bl	2958 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
    28c2:	f240 0074 	movw	r0, #116	; 0x74
    28c6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    28ca:	f000 f845 	bl	2958 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
    28ce:	f240 0090 	movw	r0, #144	; 0x90
    28d2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    28d6:	f000 f83f 	bl	2958 <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
    28da:	f240 0388 	movw	r3, #136	; 0x88
    28de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28e2:	f240 0260 	movw	r2, #96	; 0x60
    28e6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    28ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    28ec:	f240 038c 	movw	r3, #140	; 0x8c
    28f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28f4:	f240 0274 	movw	r2, #116	; 0x74
    28f8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    28fc:	601a      	str	r2, [r3, #0]
}
    28fe:	3708      	adds	r7, #8
    2900:	46bd      	mov	sp, r7
    2902:	bd80      	pop	{r7, pc}

00002904 <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
    2904:	b580      	push	{r7, lr}
    2906:	b084      	sub	sp, #16
    2908:	af00      	add	r7, sp, #0
    290a:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    290c:	687b      	ldr	r3, [r7, #4]
    290e:	68db      	ldr	r3, [r3, #12]
    2910:	68db      	ldr	r3, [r3, #12]
    2912:	60bb      	str	r3, [r7, #8]
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    2914:	68bb      	ldr	r3, [r7, #8]
    2916:	3318      	adds	r3, #24
    2918:	4618      	mov	r0, r3
    291a:	f000 f8a9 	bl	2a70 <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
    291e:	68bb      	ldr	r3, [r7, #8]
    2920:	3318      	adds	r3, #24
    2922:	f240 0090 	movw	r0, #144	; 0x90
    2926:	f2c2 0000 	movt	r0, #8192	; 0x2000
    292a:	4619      	mov	r1, r3
    292c:	f000 f840 	bl	29b0 <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
    2930:	68bb      	ldr	r3, [r7, #8]
    2932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2934:	f240 03a4 	movw	r3, #164	; 0xa4
    2938:	f2c2 0300 	movt	r3, #8192	; 0x2000
    293c:	681b      	ldr	r3, [r3, #0]
    293e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2940:	429a      	cmp	r2, r3
    2942:	d302      	bcc.n	294a <xCoRoutineRemoveFromEventList+0x46>
	{
		xReturn = pdTRUE;
    2944:	2301      	movs	r3, #1
    2946:	60fb      	str	r3, [r7, #12]
    2948:	e001      	b.n	294e <xCoRoutineRemoveFromEventList+0x4a>
	}
	else
	{
		xReturn = pdFALSE;
    294a:	2300      	movs	r3, #0
    294c:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    294e:	68fb      	ldr	r3, [r7, #12]
}
    2950:	4618      	mov	r0, r3
    2952:	3710      	adds	r7, #16
    2954:	46bd      	mov	sp, r7
    2956:	bd80      	pop	{r7, pc}

00002958 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    2958:	b480      	push	{r7}
    295a:	b083      	sub	sp, #12
    295c:	af00      	add	r7, sp, #0
    295e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    2960:	687b      	ldr	r3, [r7, #4]
    2962:	f103 0208 	add.w	r2, r3, #8
    2966:	687b      	ldr	r3, [r7, #4]
    2968:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    296a:	687b      	ldr	r3, [r7, #4]
    296c:	f04f 32ff 	mov.w	r2, #4294967295
    2970:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    2972:	687b      	ldr	r3, [r7, #4]
    2974:	f103 0208 	add.w	r2, r3, #8
    2978:	687b      	ldr	r3, [r7, #4]
    297a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    297c:	687b      	ldr	r3, [r7, #4]
    297e:	f103 0208 	add.w	r2, r3, #8
    2982:	687b      	ldr	r3, [r7, #4]
    2984:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    2986:	687b      	ldr	r3, [r7, #4]
    2988:	2200      	movs	r2, #0
    298a:	601a      	str	r2, [r3, #0]
}
    298c:	370c      	adds	r7, #12
    298e:	46bd      	mov	sp, r7
    2990:	f85d 7b04 	ldr.w	r7, [sp], #4
    2994:	4770      	bx	lr
    2996:	bf00      	nop

00002998 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
    2998:	b480      	push	{r7}
    299a:	b083      	sub	sp, #12
    299c:	af00      	add	r7, sp, #0
    299e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    29a0:	687b      	ldr	r3, [r7, #4]
    29a2:	2200      	movs	r2, #0
    29a4:	611a      	str	r2, [r3, #16]
}
    29a6:	370c      	adds	r7, #12
    29a8:	46bd      	mov	sp, r7
    29aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    29ae:	4770      	bx	lr

000029b0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    29b0:	b480      	push	{r7}
    29b2:	b085      	sub	sp, #20
    29b4:	af00      	add	r7, sp, #0
    29b6:	6078      	str	r0, [r7, #4]
    29b8:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    29ba:	687b      	ldr	r3, [r7, #4]
    29bc:	685b      	ldr	r3, [r3, #4]
    29be:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
    29c0:	68fb      	ldr	r3, [r7, #12]
    29c2:	685a      	ldr	r2, [r3, #4]
    29c4:	683b      	ldr	r3, [r7, #0]
    29c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
    29c8:	687b      	ldr	r3, [r7, #4]
    29ca:	685a      	ldr	r2, [r3, #4]
    29cc:	683b      	ldr	r3, [r7, #0]
    29ce:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    29d0:	68fb      	ldr	r3, [r7, #12]
    29d2:	685b      	ldr	r3, [r3, #4]
    29d4:	683a      	ldr	r2, [r7, #0]
    29d6:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    29d8:	68fb      	ldr	r3, [r7, #12]
    29da:	683a      	ldr	r2, [r7, #0]
    29dc:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    29de:	687b      	ldr	r3, [r7, #4]
    29e0:	683a      	ldr	r2, [r7, #0]
    29e2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    29e4:	683b      	ldr	r3, [r7, #0]
    29e6:	687a      	ldr	r2, [r7, #4]
    29e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    29ea:	687b      	ldr	r3, [r7, #4]
    29ec:	681b      	ldr	r3, [r3, #0]
    29ee:	1c5a      	adds	r2, r3, #1
    29f0:	687b      	ldr	r3, [r7, #4]
    29f2:	601a      	str	r2, [r3, #0]
}
    29f4:	3714      	adds	r7, #20
    29f6:	46bd      	mov	sp, r7
    29f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    29fc:	4770      	bx	lr
    29fe:	bf00      	nop

00002a00 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    2a00:	b480      	push	{r7}
    2a02:	b085      	sub	sp, #20
    2a04:	af00      	add	r7, sp, #0
    2a06:	6078      	str	r0, [r7, #4]
    2a08:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    2a0a:	683b      	ldr	r3, [r7, #0]
    2a0c:	681b      	ldr	r3, [r3, #0]
    2a0e:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    2a10:	68bb      	ldr	r3, [r7, #8]
    2a12:	f1b3 3fff 	cmp.w	r3, #4294967295
    2a16:	d103      	bne.n	2a20 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    2a18:	687b      	ldr	r3, [r7, #4]
    2a1a:	691b      	ldr	r3, [r3, #16]
    2a1c:	60fb      	str	r3, [r7, #12]
    2a1e:	e00c      	b.n	2a3a <vListInsert+0x3a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    2a20:	687b      	ldr	r3, [r7, #4]
    2a22:	3308      	adds	r3, #8
    2a24:	60fb      	str	r3, [r7, #12]
    2a26:	e002      	b.n	2a2e <vListInsert+0x2e>
    2a28:	68fb      	ldr	r3, [r7, #12]
    2a2a:	685b      	ldr	r3, [r3, #4]
    2a2c:	60fb      	str	r3, [r7, #12]
    2a2e:	68fb      	ldr	r3, [r7, #12]
    2a30:	685b      	ldr	r3, [r3, #4]
    2a32:	681a      	ldr	r2, [r3, #0]
    2a34:	68bb      	ldr	r3, [r7, #8]
    2a36:	429a      	cmp	r2, r3
    2a38:	d9f6      	bls.n	2a28 <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    2a3a:	68fb      	ldr	r3, [r7, #12]
    2a3c:	685a      	ldr	r2, [r3, #4]
    2a3e:	683b      	ldr	r3, [r7, #0]
    2a40:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    2a42:	683b      	ldr	r3, [r7, #0]
    2a44:	685b      	ldr	r3, [r3, #4]
    2a46:	683a      	ldr	r2, [r7, #0]
    2a48:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    2a4a:	683b      	ldr	r3, [r7, #0]
    2a4c:	68fa      	ldr	r2, [r7, #12]
    2a4e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    2a50:	68fb      	ldr	r3, [r7, #12]
    2a52:	683a      	ldr	r2, [r7, #0]
    2a54:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    2a56:	683b      	ldr	r3, [r7, #0]
    2a58:	687a      	ldr	r2, [r7, #4]
    2a5a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    2a5c:	687b      	ldr	r3, [r7, #4]
    2a5e:	681b      	ldr	r3, [r3, #0]
    2a60:	1c5a      	adds	r2, r3, #1
    2a62:	687b      	ldr	r3, [r7, #4]
    2a64:	601a      	str	r2, [r3, #0]
}
    2a66:	3714      	adds	r7, #20
    2a68:	46bd      	mov	sp, r7
    2a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    2a6e:	4770      	bx	lr

00002a70 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    2a70:	b480      	push	{r7}
    2a72:	b085      	sub	sp, #20
    2a74:	af00      	add	r7, sp, #0
    2a76:	6078      	str	r0, [r7, #4]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    2a78:	687b      	ldr	r3, [r7, #4]
    2a7a:	685b      	ldr	r3, [r3, #4]
    2a7c:	687a      	ldr	r2, [r7, #4]
    2a7e:	6892      	ldr	r2, [r2, #8]
    2a80:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    2a82:	687b      	ldr	r3, [r7, #4]
    2a84:	689b      	ldr	r3, [r3, #8]
    2a86:	687a      	ldr	r2, [r7, #4]
    2a88:	6852      	ldr	r2, [r2, #4]
    2a8a:	605a      	str	r2, [r3, #4]
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    2a8c:	687b      	ldr	r3, [r7, #4]
    2a8e:	691b      	ldr	r3, [r3, #16]
    2a90:	60fb      	str	r3, [r7, #12]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    2a92:	68fb      	ldr	r3, [r7, #12]
    2a94:	685a      	ldr	r2, [r3, #4]
    2a96:	687b      	ldr	r3, [r7, #4]
    2a98:	429a      	cmp	r2, r3
    2a9a:	d103      	bne.n	2aa4 <vListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    2a9c:	687b      	ldr	r3, [r7, #4]
    2a9e:	689a      	ldr	r2, [r3, #8]
    2aa0:	68fb      	ldr	r3, [r7, #12]
    2aa2:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
    2aa4:	687b      	ldr	r3, [r7, #4]
    2aa6:	2200      	movs	r2, #0
    2aa8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
    2aaa:	68fb      	ldr	r3, [r7, #12]
    2aac:	681b      	ldr	r3, [r3, #0]
    2aae:	1e5a      	subs	r2, r3, #1
    2ab0:	68fb      	ldr	r3, [r7, #12]
    2ab2:	601a      	str	r2, [r3, #0]
}
    2ab4:	3714      	adds	r7, #20
    2ab6:	46bd      	mov	sp, r7
    2ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
    2abc:	4770      	bx	lr
    2abe:	bf00      	nop

00002ac0 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
    2ac0:	b580      	push	{r7, lr}
    2ac2:	b084      	sub	sp, #16
    2ac4:	af00      	add	r7, sp, #0
    2ac6:	6078      	str	r0, [r7, #4]
    2ac8:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn = pdPASS;
    2aca:	2301      	movs	r3, #1
    2acc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	/* If the queue being reset has already been used (has not just been
	created), then only reset the queue if its event lists are empty. */
	if( xNewQueue != pdTRUE )
    2ace:	683b      	ldr	r3, [r7, #0]
    2ad0:	2b01      	cmp	r3, #1
    2ad2:	d00b      	beq.n	2aec <xQueueGenericReset+0x2c>
	{
		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2ad4:	687b      	ldr	r3, [r7, #4]
    2ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2ad8:	2b00      	cmp	r3, #0
    2ada:	d001      	beq.n	2ae0 <xQueueGenericReset+0x20>
		{
			xReturn = pdFAIL;
    2adc:	2300      	movs	r3, #0
    2ade:	60fb      	str	r3, [r7, #12]
		}

		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2ae0:	687b      	ldr	r3, [r7, #4]
    2ae2:	691b      	ldr	r3, [r3, #16]
    2ae4:	2b00      	cmp	r3, #0
    2ae6:	d001      	beq.n	2aec <xQueueGenericReset+0x2c>
		{
			xReturn = pdFAIL;
    2ae8:	2300      	movs	r3, #0
    2aea:	60fb      	str	r3, [r7, #12]
		}
	}

	if( xReturn == pdPASS )
    2aec:	68fb      	ldr	r3, [r7, #12]
    2aee:	2b01      	cmp	r3, #1
    2af0:	d12f      	bne.n	2b52 <xQueueGenericReset+0x92>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    2af2:	687b      	ldr	r3, [r7, #4]
    2af4:	681a      	ldr	r2, [r3, #0]
    2af6:	687b      	ldr	r3, [r7, #4]
    2af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    2afa:	6879      	ldr	r1, [r7, #4]
    2afc:	6c09      	ldr	r1, [r1, #64]	; 0x40
    2afe:	fb01 f303 	mul.w	r3, r1, r3
    2b02:	441a      	add	r2, r3
    2b04:	687b      	ldr	r3, [r7, #4]
    2b06:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    2b08:	687b      	ldr	r3, [r7, #4]
    2b0a:	2200      	movs	r2, #0
    2b0c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    2b0e:	687b      	ldr	r3, [r7, #4]
    2b10:	681a      	ldr	r2, [r3, #0]
    2b12:	687b      	ldr	r3, [r7, #4]
    2b14:	609a      	str	r2, [r3, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
    2b16:	687b      	ldr	r3, [r7, #4]
    2b18:	681a      	ldr	r2, [r3, #0]
    2b1a:	687b      	ldr	r3, [r7, #4]
    2b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    2b1e:	3b01      	subs	r3, #1
    2b20:	6879      	ldr	r1, [r7, #4]
    2b22:	6c09      	ldr	r1, [r1, #64]	; 0x40
    2b24:	fb01 f303 	mul.w	r3, r1, r3
    2b28:	441a      	add	r2, r3
    2b2a:	687b      	ldr	r3, [r7, #4]
    2b2c:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
    2b2e:	687b      	ldr	r3, [r7, #4]
    2b30:	f04f 32ff 	mov.w	r2, #4294967295
    2b34:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
    2b36:	687b      	ldr	r3, [r7, #4]
    2b38:	f04f 32ff 	mov.w	r2, #4294967295
    2b3c:	649a      	str	r2, [r3, #72]	; 0x48

		/* Ensure the event queues start with the correct state. */
		vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    2b3e:	687b      	ldr	r3, [r7, #4]
    2b40:	3310      	adds	r3, #16
    2b42:	4618      	mov	r0, r3
    2b44:	f7ff ff08 	bl	2958 <vListInitialise>
		vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    2b48:	687b      	ldr	r3, [r7, #4]
    2b4a:	3324      	adds	r3, #36	; 0x24
    2b4c:	4618      	mov	r0, r3
    2b4e:	f7ff ff03 	bl	2958 <vListInitialise>
	}

	return xReturn;
    2b52:	68fb      	ldr	r3, [r7, #12]
}
    2b54:	4618      	mov	r0, r3
    2b56:	3710      	adds	r7, #16
    2b58:	46bd      	mov	sp, r7
    2b5a:	bd80      	pop	{r7, pc}

00002b5c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
    2b5c:	b580      	push	{r7, lr}
    2b5e:	b088      	sub	sp, #32
    2b60:	af00      	add	r7, sp, #0
    2b62:	60f8      	str	r0, [r7, #12]
    2b64:	60b9      	str	r1, [r7, #8]
    2b66:	4613      	mov	r3, r2
    2b68:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
    2b6a:	2300      	movs	r3, #0
    2b6c:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
    2b6e:	68fb      	ldr	r3, [r7, #12]
    2b70:	2b00      	cmp	r3, #0
    2b72:	d026      	beq.n	2bc2 <xQueueGenericCreate+0x66>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    2b74:	204c      	movs	r0, #76	; 0x4c
    2b76:	f001 fd73 	bl	4660 <pvPortMalloc>
    2b7a:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
    2b7c:	69bb      	ldr	r3, [r7, #24]
    2b7e:	2b00      	cmp	r3, #0
    2b80:	d01f      	beq.n	2bc2 <xQueueGenericCreate+0x66>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
    2b82:	68fb      	ldr	r3, [r7, #12]
    2b84:	68ba      	ldr	r2, [r7, #8]
    2b86:	fb02 f303 	mul.w	r3, r2, r3
    2b8a:	3301      	adds	r3, #1
    2b8c:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
    2b8e:	6978      	ldr	r0, [r7, #20]
    2b90:	f001 fd66 	bl	4660 <pvPortMalloc>
    2b94:	4602      	mov	r2, r0
    2b96:	69bb      	ldr	r3, [r7, #24]
    2b98:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
    2b9a:	69bb      	ldr	r3, [r7, #24]
    2b9c:	681b      	ldr	r3, [r3, #0]
    2b9e:	2b00      	cmp	r3, #0
    2ba0:	d00c      	beq.n	2bbc <xQueueGenericCreate+0x60>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
    2ba2:	69bb      	ldr	r3, [r7, #24]
    2ba4:	68fa      	ldr	r2, [r7, #12]
    2ba6:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
    2ba8:	69bb      	ldr	r3, [r7, #24]
    2baa:	68ba      	ldr	r2, [r7, #8]
    2bac:	641a      	str	r2, [r3, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
    2bae:	69b8      	ldr	r0, [r7, #24]
    2bb0:	2101      	movs	r1, #1
    2bb2:	f7ff ff85 	bl	2ac0 <xQueueGenericReset>
					pxNewQueue->ucQueueType = ucQueueType;
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
    2bb6:	69bb      	ldr	r3, [r7, #24]
    2bb8:	61fb      	str	r3, [r7, #28]
    2bba:	e002      	b.n	2bc2 <xQueueGenericCreate+0x66>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
    2bbc:	69b8      	ldr	r0, [r7, #24]
    2bbe:	f001 fe13 	bl	47e8 <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
    2bc2:	69fb      	ldr	r3, [r7, #28]
}
    2bc4:	4618      	mov	r0, r3
    2bc6:	3720      	adds	r7, #32
    2bc8:	46bd      	mov	sp, r7
    2bca:	bd80      	pop	{r7, pc}

00002bcc <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	xQueueHandle xQueueCreateMutex( unsigned char ucQueueType )
	{
    2bcc:	b580      	push	{r7, lr}
    2bce:	b084      	sub	sp, #16
    2bd0:	af00      	add	r7, sp, #0
    2bd2:	4603      	mov	r3, r0
    2bd4:	71fb      	strb	r3, [r7, #7]
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    2bd6:	204c      	movs	r0, #76	; 0x4c
    2bd8:	f001 fd42 	bl	4660 <pvPortMalloc>
    2bdc:	60f8      	str	r0, [r7, #12]
		if( pxNewQueue != NULL )
    2bde:	68fb      	ldr	r3, [r7, #12]
    2be0:	2b00      	cmp	r3, #0
    2be2:	d02c      	beq.n	2c3e <xQueueCreateMutex+0x72>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    2be4:	68fb      	ldr	r3, [r7, #12]
    2be6:	2200      	movs	r2, #0
    2be8:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    2bea:	68fb      	ldr	r3, [r7, #12]
    2bec:	2200      	movs	r2, #0
    2bee:	601a      	str	r2, [r3, #0]

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
    2bf0:	68fb      	ldr	r3, [r7, #12]
    2bf2:	2200      	movs	r2, #0
    2bf4:	609a      	str	r2, [r3, #8]
			pxNewQueue->pcReadFrom = NULL;
    2bf6:	68fb      	ldr	r3, [r7, #12]
    2bf8:	2200      	movs	r2, #0
    2bfa:	60da      	str	r2, [r3, #12]

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    2bfc:	68fb      	ldr	r3, [r7, #12]
    2bfe:	2200      	movs	r2, #0
    2c00:	639a      	str	r2, [r3, #56]	; 0x38
			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
    2c02:	68fb      	ldr	r3, [r7, #12]
    2c04:	2201      	movs	r2, #1
    2c06:	63da      	str	r2, [r3, #60]	; 0x3c
			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
    2c08:	68fb      	ldr	r3, [r7, #12]
    2c0a:	2200      	movs	r2, #0
    2c0c:	641a      	str	r2, [r3, #64]	; 0x40
			pxNewQueue->xRxLock = queueUNLOCKED;
    2c0e:	68fb      	ldr	r3, [r7, #12]
    2c10:	f04f 32ff 	mov.w	r2, #4294967295
    2c14:	645a      	str	r2, [r3, #68]	; 0x44
			pxNewQueue->xTxLock = queueUNLOCKED;
    2c16:	68fb      	ldr	r3, [r7, #12]
    2c18:	f04f 32ff 	mov.w	r2, #4294967295
    2c1c:	649a      	str	r2, [r3, #72]	; 0x48
				pxNewQueue->ucQueueType = ucQueueType;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    2c1e:	68fb      	ldr	r3, [r7, #12]
    2c20:	3310      	adds	r3, #16
    2c22:	4618      	mov	r0, r3
    2c24:	f7ff fe98 	bl	2958 <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    2c28:	68fb      	ldr	r3, [r7, #12]
    2c2a:	3324      	adds	r3, #36	; 0x24
    2c2c:	4618      	mov	r0, r3
    2c2e:	f7ff fe93 	bl	2958 <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			xQueueGenericSend( pxNewQueue, NULL, ( portTickType ) 0U, queueSEND_TO_BACK );
    2c32:	68f8      	ldr	r0, [r7, #12]
    2c34:	2100      	movs	r1, #0
    2c36:	2200      	movs	r2, #0
    2c38:	2300      	movs	r3, #0
    2c3a:	f000 f81d 	bl	2c78 <xQueueGenericSend>
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
    2c3e:	68fb      	ldr	r3, [r7, #12]
	}
    2c40:	4618      	mov	r0, r3
    2c42:	3710      	adds	r7, #16
    2c44:	46bd      	mov	sp, r7
    2c46:	bd80      	pop	{r7, pc}

00002c48 <xQueueGetMutexHolder>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void* xQueueGetMutexHolder( xQueueHandle xSemaphore )
	{
    2c48:	b580      	push	{r7, lr}
    2c4a:	b084      	sub	sp, #16
    2c4c:	af00      	add	r7, sp, #0
    2c4e:	6078      	str	r0, [r7, #4]
		/* This function is called by xSemaphoreGetMutexHolder(), and should not
		be called directly.  Note:  This is is a good way of determining if the
		calling task is the mutex holder, but not a good way of determining the
		identity of the mutex holder, as the holder may change between the 
		following critical section exiting and the function returning. */
		taskENTER_CRITICAL();
    2c50:	f001 fc8c 	bl	456c <vPortEnterCritical>
		{
			if( xSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
    2c54:	687b      	ldr	r3, [r7, #4]
    2c56:	681b      	ldr	r3, [r3, #0]
    2c58:	2b00      	cmp	r3, #0
    2c5a:	d103      	bne.n	2c64 <xQueueGetMutexHolder+0x1c>
			{
				pxReturn = ( void * ) xSemaphore->pxMutexHolder;
    2c5c:	687b      	ldr	r3, [r7, #4]
    2c5e:	685b      	ldr	r3, [r3, #4]
    2c60:	60fb      	str	r3, [r7, #12]
    2c62:	e001      	b.n	2c68 <xQueueGetMutexHolder+0x20>
			}
			else
			{
				pxReturn = NULL;
    2c64:	2300      	movs	r3, #0
    2c66:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
    2c68:	f001 fc96 	bl	4598 <vPortExitCritical>
		
		return pxReturn;
    2c6c:	68fb      	ldr	r3, [r7, #12]
	}
    2c6e:	4618      	mov	r0, r3
    2c70:	3710      	adds	r7, #16
    2c72:	46bd      	mov	sp, r7
    2c74:	bd80      	pop	{r7, pc}
    2c76:	bf00      	nop

00002c78 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    2c78:	b580      	push	{r7, lr}
    2c7a:	b088      	sub	sp, #32
    2c7c:	af00      	add	r7, sp, #0
    2c7e:	60f8      	str	r0, [r7, #12]
    2c80:	60b9      	str	r1, [r7, #8]
    2c82:	607a      	str	r2, [r7, #4]
    2c84:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    2c86:	2300      	movs	r3, #0
    2c88:	61fb      	str	r3, [r7, #28]
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    2c8a:	f001 fc6f 	bl	456c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    2c8e:	68fb      	ldr	r3, [r7, #12]
    2c90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    2c92:	68fb      	ldr	r3, [r7, #12]
    2c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    2c96:	429a      	cmp	r2, r3
    2c98:	d216      	bcs.n	2cc8 <xQueueGenericSend+0x50>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    2c9a:	68f8      	ldr	r0, [r7, #12]
    2c9c:	68b9      	ldr	r1, [r7, #8]
    2c9e:	683a      	ldr	r2, [r7, #0]
    2ca0:	f000 f9d6 	bl	3050 <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2ca4:	68fb      	ldr	r3, [r7, #12]
    2ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2ca8:	2b00      	cmp	r3, #0
    2caa:	d009      	beq.n	2cc0 <xQueueGenericSend+0x48>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    2cac:	68fb      	ldr	r3, [r7, #12]
    2cae:	3324      	adds	r3, #36	; 0x24
    2cb0:	4618      	mov	r0, r3
    2cb2:	f001 f905 	bl	3ec0 <xTaskRemoveFromEventList>
    2cb6:	4603      	mov	r3, r0
    2cb8:	2b01      	cmp	r3, #1
    2cba:	d101      	bne.n	2cc0 <xQueueGenericSend+0x48>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
    2cbc:	f001 fc48 	bl	4550 <vPortYieldFromISR>
					}
				}

				taskEXIT_CRITICAL();
    2cc0:	f001 fc6a 	bl	4598 <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    2cc4:	2301      	movs	r3, #1
    2cc6:	e059      	b.n	2d7c <xQueueGenericSend+0x104>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    2cc8:	687b      	ldr	r3, [r7, #4]
    2cca:	2b00      	cmp	r3, #0
    2ccc:	d103      	bne.n	2cd6 <xQueueGenericSend+0x5e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    2cce:	f001 fc63 	bl	4598 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    2cd2:	2300      	movs	r3, #0
    2cd4:	e052      	b.n	2d7c <xQueueGenericSend+0x104>
				}
				else if( xEntryTimeSet == pdFALSE )
    2cd6:	69fb      	ldr	r3, [r7, #28]
    2cd8:	2b00      	cmp	r3, #0
    2cda:	d106      	bne.n	2cea <xQueueGenericSend+0x72>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    2cdc:	f107 0314 	add.w	r3, r7, #20
    2ce0:	4618      	mov	r0, r3
    2ce2:	f001 f945 	bl	3f70 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    2ce6:	2301      	movs	r3, #1
    2ce8:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    2cea:	f001 fc55 	bl	4598 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    2cee:	f000 fe93 	bl	3a18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    2cf2:	f001 fc3b 	bl	456c <vPortEnterCritical>
    2cf6:	68fb      	ldr	r3, [r7, #12]
    2cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
    2cfe:	d102      	bne.n	2d06 <xQueueGenericSend+0x8e>
    2d00:	68fb      	ldr	r3, [r7, #12]
    2d02:	2200      	movs	r2, #0
    2d04:	645a      	str	r2, [r3, #68]	; 0x44
    2d06:	68fb      	ldr	r3, [r7, #12]
    2d08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
    2d0e:	d102      	bne.n	2d16 <xQueueGenericSend+0x9e>
    2d10:	68fb      	ldr	r3, [r7, #12]
    2d12:	2200      	movs	r2, #0
    2d14:	649a      	str	r2, [r3, #72]	; 0x48
    2d16:	f001 fc3f 	bl	4598 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    2d1a:	f107 0214 	add.w	r2, r7, #20
    2d1e:	1d3b      	adds	r3, r7, #4
    2d20:	4610      	mov	r0, r2
    2d22:	4619      	mov	r1, r3
    2d24:	f001 f93c 	bl	3fa0 <xTaskCheckForTimeOut>
    2d28:	4603      	mov	r3, r0
    2d2a:	2b00      	cmp	r3, #0
    2d2c:	d11e      	bne.n	2d6c <xQueueGenericSend+0xf4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    2d2e:	68f8      	ldr	r0, [r7, #12]
    2d30:	f000 fa86 	bl	3240 <prvIsQueueFull>
    2d34:	4603      	mov	r3, r0
    2d36:	2b00      	cmp	r3, #0
    2d38:	d012      	beq.n	2d60 <xQueueGenericSend+0xe8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    2d3a:	68fb      	ldr	r3, [r7, #12]
    2d3c:	f103 0210 	add.w	r2, r3, #16
    2d40:	687b      	ldr	r3, [r7, #4]
    2d42:	4610      	mov	r0, r2
    2d44:	4619      	mov	r1, r3
    2d46:	f001 f883 	bl	3e50 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    2d4a:	68f8      	ldr	r0, [r7, #12]
    2d4c:	f000 fa02 	bl	3154 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    2d50:	f000 fe74 	bl	3a3c <xTaskResumeAll>
    2d54:	4603      	mov	r3, r0
    2d56:	2b00      	cmp	r3, #0
    2d58:	d10f      	bne.n	2d7a <xQueueGenericSend+0x102>
				{
					portYIELD_WITHIN_API();
    2d5a:	f001 fbf9 	bl	4550 <vPortYieldFromISR>
    2d5e:	e00c      	b.n	2d7a <xQueueGenericSend+0x102>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    2d60:	68f8      	ldr	r0, [r7, #12]
    2d62:	f000 f9f7 	bl	3154 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    2d66:	f000 fe69 	bl	3a3c <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
    2d6a:	e78e      	b.n	2c8a <xQueueGenericSend+0x12>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    2d6c:	68f8      	ldr	r0, [r7, #12]
    2d6e:	f000 f9f1 	bl	3154 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    2d72:	f000 fe63 	bl	3a3c <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    2d76:	2300      	movs	r3, #0
    2d78:	e000      	b.n	2d7c <xQueueGenericSend+0x104>
		}
	}
    2d7a:	e786      	b.n	2c8a <xQueueGenericSend+0x12>
}
    2d7c:	4618      	mov	r0, r3
    2d7e:	3720      	adds	r7, #32
    2d80:	46bd      	mov	sp, r7
    2d82:	bd80      	pop	{r7, pc}

00002d84 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    2d84:	b580      	push	{r7, lr}
    2d86:	b086      	sub	sp, #24
    2d88:	af00      	add	r7, sp, #0
    2d8a:	60f8      	str	r0, [r7, #12]
    2d8c:	60b9      	str	r1, [r7, #8]
    2d8e:	607a      	str	r2, [r7, #4]
    2d90:	603b      	str	r3, [r7, #0]
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    2d92:	2300      	movs	r3, #0
    2d94:	613b      	str	r3, [r7, #16]
    2d96:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    2d9a:	f380 8811 	msr	BASEPRI, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    2d9e:	68fb      	ldr	r3, [r7, #12]
    2da0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    2da2:	68fb      	ldr	r3, [r7, #12]
    2da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    2da6:	429a      	cmp	r2, r3
    2da8:	d221      	bcs.n	2dee <xQueueGenericSendFromISR+0x6a>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    2daa:	68f8      	ldr	r0, [r7, #12]
    2dac:	68b9      	ldr	r1, [r7, #8]
    2dae:	683a      	ldr	r2, [r7, #0]
    2db0:	f000 f94e 	bl	3050 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    2db4:	68fb      	ldr	r3, [r7, #12]
    2db6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2db8:	f1b3 3fff 	cmp.w	r3, #4294967295
    2dbc:	d10f      	bne.n	2dde <xQueueGenericSendFromISR+0x5a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2dbe:	68fb      	ldr	r3, [r7, #12]
    2dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2dc2:	2b00      	cmp	r3, #0
    2dc4:	d010      	beq.n	2de8 <xQueueGenericSendFromISR+0x64>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2dc6:	68fb      	ldr	r3, [r7, #12]
    2dc8:	3324      	adds	r3, #36	; 0x24
    2dca:	4618      	mov	r0, r3
    2dcc:	f001 f878 	bl	3ec0 <xTaskRemoveFromEventList>
    2dd0:	4603      	mov	r3, r0
    2dd2:	2b00      	cmp	r3, #0
    2dd4:	d008      	beq.n	2de8 <xQueueGenericSendFromISR+0x64>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    2dd6:	687b      	ldr	r3, [r7, #4]
    2dd8:	2201      	movs	r2, #1
    2dda:	601a      	str	r2, [r3, #0]
    2ddc:	e004      	b.n	2de8 <xQueueGenericSendFromISR+0x64>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    2dde:	68fb      	ldr	r3, [r7, #12]
    2de0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2de2:	1c5a      	adds	r2, r3, #1
    2de4:	68fb      	ldr	r3, [r7, #12]
    2de6:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
    2de8:	2301      	movs	r3, #1
    2dea:	617b      	str	r3, [r7, #20]
    2dec:	e001      	b.n	2df2 <xQueueGenericSendFromISR+0x6e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    2dee:	2300      	movs	r3, #0
    2df0:	617b      	str	r3, [r7, #20]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    2df2:	f04f 0000 	mov.w	r0, #0
    2df6:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    2dfa:	697b      	ldr	r3, [r7, #20]
}
    2dfc:	4618      	mov	r0, r3
    2dfe:	3718      	adds	r7, #24
    2e00:	46bd      	mov	sp, r7
    2e02:	bd80      	pop	{r7, pc}

00002e04 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    2e04:	b580      	push	{r7, lr}
    2e06:	b088      	sub	sp, #32
    2e08:	af00      	add	r7, sp, #0
    2e0a:	60f8      	str	r0, [r7, #12]
    2e0c:	60b9      	str	r1, [r7, #8]
    2e0e:	607a      	str	r2, [r7, #4]
    2e10:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    2e12:	2300      	movs	r3, #0
    2e14:	61fb      	str	r3, [r7, #28]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    2e16:	f001 fba9 	bl	456c <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    2e1a:	68fb      	ldr	r3, [r7, #12]
    2e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    2e1e:	2b00      	cmp	r3, #0
    2e20:	d03b      	beq.n	2e9a <xQueueGenericReceive+0x96>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    2e22:	68fb      	ldr	r3, [r7, #12]
    2e24:	68db      	ldr	r3, [r3, #12]
    2e26:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    2e28:	68f8      	ldr	r0, [r7, #12]
    2e2a:	68b9      	ldr	r1, [r7, #8]
    2e2c:	f000 f96c 	bl	3108 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    2e30:	683b      	ldr	r3, [r7, #0]
    2e32:	2b00      	cmp	r3, #0
    2e34:	d11c      	bne.n	2e70 <xQueueGenericReceive+0x6c>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    2e36:	68fb      	ldr	r3, [r7, #12]
    2e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    2e3a:	1e5a      	subs	r2, r3, #1
    2e3c:	68fb      	ldr	r3, [r7, #12]
    2e3e:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    2e40:	68fb      	ldr	r3, [r7, #12]
    2e42:	681b      	ldr	r3, [r3, #0]
    2e44:	2b00      	cmp	r3, #0
    2e46:	d104      	bne.n	2e52 <xQueueGenericReceive+0x4e>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
    2e48:	f001 fa5c 	bl	4304 <xTaskGetCurrentTaskHandle>
    2e4c:	4602      	mov	r2, r0
    2e4e:	68fb      	ldr	r3, [r7, #12]
    2e50:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2e52:	68fb      	ldr	r3, [r7, #12]
    2e54:	691b      	ldr	r3, [r3, #16]
    2e56:	2b00      	cmp	r3, #0
    2e58:	d01b      	beq.n	2e92 <xQueueGenericReceive+0x8e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    2e5a:	68fb      	ldr	r3, [r7, #12]
    2e5c:	3310      	adds	r3, #16
    2e5e:	4618      	mov	r0, r3
    2e60:	f001 f82e 	bl	3ec0 <xTaskRemoveFromEventList>
    2e64:	4603      	mov	r3, r0
    2e66:	2b01      	cmp	r3, #1
    2e68:	d113      	bne.n	2e92 <xQueueGenericReceive+0x8e>
						{
							portYIELD_WITHIN_API();
    2e6a:	f001 fb71 	bl	4550 <vPortYieldFromISR>
    2e6e:	e010      	b.n	2e92 <xQueueGenericReceive+0x8e>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    2e70:	68fb      	ldr	r3, [r7, #12]
    2e72:	69ba      	ldr	r2, [r7, #24]
    2e74:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2e76:	68fb      	ldr	r3, [r7, #12]
    2e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2e7a:	2b00      	cmp	r3, #0
    2e7c:	d009      	beq.n	2e92 <xQueueGenericReceive+0x8e>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2e7e:	68fb      	ldr	r3, [r7, #12]
    2e80:	3324      	adds	r3, #36	; 0x24
    2e82:	4618      	mov	r0, r3
    2e84:	f001 f81c 	bl	3ec0 <xTaskRemoveFromEventList>
    2e88:	4603      	mov	r3, r0
    2e8a:	2b00      	cmp	r3, #0
    2e8c:	d001      	beq.n	2e92 <xQueueGenericReceive+0x8e>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    2e8e:	f001 fb5f 	bl	4550 <vPortYieldFromISR>
						}
					}

				}

				taskEXIT_CRITICAL();
    2e92:	f001 fb81 	bl	4598 <vPortExitCritical>
				return pdPASS;
    2e96:	2301      	movs	r3, #1
    2e98:	e066      	b.n	2f68 <xQueueGenericReceive+0x164>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    2e9a:	687b      	ldr	r3, [r7, #4]
    2e9c:	2b00      	cmp	r3, #0
    2e9e:	d103      	bne.n	2ea8 <xQueueGenericReceive+0xa4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    2ea0:	f001 fb7a 	bl	4598 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    2ea4:	2300      	movs	r3, #0
    2ea6:	e05f      	b.n	2f68 <xQueueGenericReceive+0x164>
				}
				else if( xEntryTimeSet == pdFALSE )
    2ea8:	69fb      	ldr	r3, [r7, #28]
    2eaa:	2b00      	cmp	r3, #0
    2eac:	d106      	bne.n	2ebc <xQueueGenericReceive+0xb8>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    2eae:	f107 0310 	add.w	r3, r7, #16
    2eb2:	4618      	mov	r0, r3
    2eb4:	f001 f85c 	bl	3f70 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    2eb8:	2301      	movs	r3, #1
    2eba:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    2ebc:	f001 fb6c 	bl	4598 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    2ec0:	f000 fdaa 	bl	3a18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    2ec4:	f001 fb52 	bl	456c <vPortEnterCritical>
    2ec8:	68fb      	ldr	r3, [r7, #12]
    2eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
    2ed0:	d102      	bne.n	2ed8 <xQueueGenericReceive+0xd4>
    2ed2:	68fb      	ldr	r3, [r7, #12]
    2ed4:	2200      	movs	r2, #0
    2ed6:	645a      	str	r2, [r3, #68]	; 0x44
    2ed8:	68fb      	ldr	r3, [r7, #12]
    2eda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2edc:	f1b3 3fff 	cmp.w	r3, #4294967295
    2ee0:	d102      	bne.n	2ee8 <xQueueGenericReceive+0xe4>
    2ee2:	68fb      	ldr	r3, [r7, #12]
    2ee4:	2200      	movs	r2, #0
    2ee6:	649a      	str	r2, [r3, #72]	; 0x48
    2ee8:	f001 fb56 	bl	4598 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    2eec:	f107 0210 	add.w	r2, r7, #16
    2ef0:	1d3b      	adds	r3, r7, #4
    2ef2:	4610      	mov	r0, r2
    2ef4:	4619      	mov	r1, r3
    2ef6:	f001 f853 	bl	3fa0 <xTaskCheckForTimeOut>
    2efa:	4603      	mov	r3, r0
    2efc:	2b00      	cmp	r3, #0
    2efe:	d12b      	bne.n	2f58 <xQueueGenericReceive+0x154>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    2f00:	68f8      	ldr	r0, [r7, #12]
    2f02:	f000 f973 	bl	31ec <prvIsQueueEmpty>
    2f06:	4603      	mov	r3, r0
    2f08:	2b00      	cmp	r3, #0
    2f0a:	d01f      	beq.n	2f4c <xQueueGenericReceive+0x148>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    2f0c:	68fb      	ldr	r3, [r7, #12]
    2f0e:	681b      	ldr	r3, [r3, #0]
    2f10:	2b00      	cmp	r3, #0
    2f12:	d108      	bne.n	2f26 <xQueueGenericReceive+0x122>
					{
						portENTER_CRITICAL();
    2f14:	f001 fb2a 	bl	456c <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    2f18:	68fb      	ldr	r3, [r7, #12]
    2f1a:	685b      	ldr	r3, [r3, #4]
    2f1c:	4618      	mov	r0, r3
    2f1e:	f001 fa01 	bl	4324 <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
    2f22:	f001 fb39 	bl	4598 <vPortExitCritical>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    2f26:	68fb      	ldr	r3, [r7, #12]
    2f28:	f103 0224 	add.w	r2, r3, #36	; 0x24
    2f2c:	687b      	ldr	r3, [r7, #4]
    2f2e:	4610      	mov	r0, r2
    2f30:	4619      	mov	r1, r3
    2f32:	f000 ff8d 	bl	3e50 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    2f36:	68f8      	ldr	r0, [r7, #12]
    2f38:	f000 f90c 	bl	3154 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    2f3c:	f000 fd7e 	bl	3a3c <xTaskResumeAll>
    2f40:	4603      	mov	r3, r0
    2f42:	2b00      	cmp	r3, #0
    2f44:	d10f      	bne.n	2f66 <xQueueGenericReceive+0x162>
				{
					portYIELD_WITHIN_API();
    2f46:	f001 fb03 	bl	4550 <vPortYieldFromISR>
    2f4a:	e00c      	b.n	2f66 <xQueueGenericReceive+0x162>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    2f4c:	68f8      	ldr	r0, [r7, #12]
    2f4e:	f000 f901 	bl	3154 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    2f52:	f000 fd73 	bl	3a3c <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
    2f56:	e75e      	b.n	2e16 <xQueueGenericReceive+0x12>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    2f58:	68f8      	ldr	r0, [r7, #12]
    2f5a:	f000 f8fb 	bl	3154 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    2f5e:	f000 fd6d 	bl	3a3c <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    2f62:	2300      	movs	r3, #0
    2f64:	e000      	b.n	2f68 <xQueueGenericReceive+0x164>
		}
	}
    2f66:	e756      	b.n	2e16 <xQueueGenericReceive+0x12>
}
    2f68:	4618      	mov	r0, r3
    2f6a:	3720      	adds	r7, #32
    2f6c:	46bd      	mov	sp, r7
    2f6e:	bd80      	pop	{r7, pc}

00002f70 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    2f70:	b580      	push	{r7, lr}
    2f72:	b086      	sub	sp, #24
    2f74:	af00      	add	r7, sp, #0
    2f76:	60f8      	str	r0, [r7, #12]
    2f78:	60b9      	str	r1, [r7, #8]
    2f7a:	607a      	str	r2, [r7, #4]

	configASSERT( pxQueue );
	configASSERT( pxTaskWoken );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    2f7c:	2300      	movs	r3, #0
    2f7e:	613b      	str	r3, [r7, #16]
    2f80:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    2f84:	f380 8811 	msr	BASEPRI, r0
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    2f88:	68fb      	ldr	r3, [r7, #12]
    2f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    2f8c:	2b00      	cmp	r3, #0
    2f8e:	d025      	beq.n	2fdc <xQueueReceiveFromISR+0x6c>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    2f90:	68f8      	ldr	r0, [r7, #12]
    2f92:	68b9      	ldr	r1, [r7, #8]
    2f94:	f000 f8b8 	bl	3108 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    2f98:	68fb      	ldr	r3, [r7, #12]
    2f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    2f9c:	1e5a      	subs	r2, r3, #1
    2f9e:	68fb      	ldr	r3, [r7, #12]
    2fa0:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    2fa2:	68fb      	ldr	r3, [r7, #12]
    2fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
    2faa:	d10f      	bne.n	2fcc <xQueueReceiveFromISR+0x5c>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2fac:	68fb      	ldr	r3, [r7, #12]
    2fae:	691b      	ldr	r3, [r3, #16]
    2fb0:	2b00      	cmp	r3, #0
    2fb2:	d010      	beq.n	2fd6 <xQueueReceiveFromISR+0x66>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    2fb4:	68fb      	ldr	r3, [r7, #12]
    2fb6:	3310      	adds	r3, #16
    2fb8:	4618      	mov	r0, r3
    2fba:	f000 ff81 	bl	3ec0 <xTaskRemoveFromEventList>
    2fbe:	4603      	mov	r3, r0
    2fc0:	2b00      	cmp	r3, #0
    2fc2:	d008      	beq.n	2fd6 <xQueueReceiveFromISR+0x66>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    2fc4:	687b      	ldr	r3, [r7, #4]
    2fc6:	2201      	movs	r2, #1
    2fc8:	601a      	str	r2, [r3, #0]
    2fca:	e004      	b.n	2fd6 <xQueueReceiveFromISR+0x66>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    2fcc:	68fb      	ldr	r3, [r7, #12]
    2fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2fd0:	1c5a      	adds	r2, r3, #1
    2fd2:	68fb      	ldr	r3, [r7, #12]
    2fd4:	645a      	str	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
    2fd6:	2301      	movs	r3, #1
    2fd8:	617b      	str	r3, [r7, #20]
    2fda:	e001      	b.n	2fe0 <xQueueReceiveFromISR+0x70>
		}
		else
		{
			xReturn = pdFAIL;
    2fdc:	2300      	movs	r3, #0
    2fde:	617b      	str	r3, [r7, #20]
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    2fe0:	f04f 0000 	mov.w	r0, #0
    2fe4:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    2fe8:	697b      	ldr	r3, [r7, #20]
}
    2fea:	4618      	mov	r0, r3
    2fec:	3718      	adds	r7, #24
    2fee:	46bd      	mov	sp, r7
    2ff0:	bd80      	pop	{r7, pc}
    2ff2:	bf00      	nop

00002ff4 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
    2ff4:	b580      	push	{r7, lr}
    2ff6:	b084      	sub	sp, #16
    2ff8:	af00      	add	r7, sp, #0
    2ffa:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    2ffc:	f001 fab6 	bl	456c <vPortEnterCritical>
		uxReturn = pxQueue->uxMessagesWaiting;
    3000:	687b      	ldr	r3, [r7, #4]
    3002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3004:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    3006:	f001 fac7 	bl	4598 <vPortExitCritical>

	return uxReturn;
    300a:	68fb      	ldr	r3, [r7, #12]
}
    300c:	4618      	mov	r0, r3
    300e:	3710      	adds	r7, #16
    3010:	46bd      	mov	sp, r7
    3012:	bd80      	pop	{r7, pc}

00003014 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
    3014:	b480      	push	{r7}
    3016:	b085      	sub	sp, #20
    3018:	af00      	add	r7, sp, #0
    301a:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    301c:	687b      	ldr	r3, [r7, #4]
    301e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3020:	60fb      	str	r3, [r7, #12]

	return uxReturn;
    3022:	68fb      	ldr	r3, [r7, #12]
}
    3024:	4618      	mov	r0, r3
    3026:	3714      	adds	r7, #20
    3028:	46bd      	mov	sp, r7
    302a:	f85d 7b04 	ldr.w	r7, [sp], #4
    302e:	4770      	bx	lr

00003030 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    3030:	b580      	push	{r7, lr}
    3032:	b082      	sub	sp, #8
    3034:	af00      	add	r7, sp, #0
    3036:	6078      	str	r0, [r7, #4]
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
    3038:	687b      	ldr	r3, [r7, #4]
    303a:	681b      	ldr	r3, [r3, #0]
    303c:	4618      	mov	r0, r3
    303e:	f001 fbd3 	bl	47e8 <vPortFree>
	vPortFree( pxQueue );
    3042:	6878      	ldr	r0, [r7, #4]
    3044:	f001 fbd0 	bl	47e8 <vPortFree>
}
    3048:	3708      	adds	r7, #8
    304a:	46bd      	mov	sp, r7
    304c:	bd80      	pop	{r7, pc}
    304e:	bf00      	nop

00003050 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    3050:	b580      	push	{r7, lr}
    3052:	b084      	sub	sp, #16
    3054:	af00      	add	r7, sp, #0
    3056:	60f8      	str	r0, [r7, #12]
    3058:	60b9      	str	r1, [r7, #8]
    305a:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    305c:	68fb      	ldr	r3, [r7, #12]
    305e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3060:	2b00      	cmp	r3, #0
    3062:	d10c      	bne.n	307e <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    3064:	68fb      	ldr	r3, [r7, #12]
    3066:	681b      	ldr	r3, [r3, #0]
    3068:	2b00      	cmp	r3, #0
    306a:	d145      	bne.n	30f8 <prvCopyDataToQueue+0xa8>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    306c:	68fb      	ldr	r3, [r7, #12]
    306e:	685b      	ldr	r3, [r3, #4]
    3070:	4618      	mov	r0, r3
    3072:	f001 f9bb 	bl	43ec <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
    3076:	68fb      	ldr	r3, [r7, #12]
    3078:	2200      	movs	r2, #0
    307a:	605a      	str	r2, [r3, #4]
    307c:	e03c      	b.n	30f8 <prvCopyDataToQueue+0xa8>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    307e:	687b      	ldr	r3, [r7, #4]
    3080:	2b00      	cmp	r3, #0
    3082:	d11a      	bne.n	30ba <prvCopyDataToQueue+0x6a>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    3084:	68fb      	ldr	r3, [r7, #12]
    3086:	689a      	ldr	r2, [r3, #8]
    3088:	68fb      	ldr	r3, [r7, #12]
    308a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    308c:	4610      	mov	r0, r2
    308e:	68b9      	ldr	r1, [r7, #8]
    3090:	461a      	mov	r2, r3
    3092:	f003 f999 	bl	63c8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    3096:	68fb      	ldr	r3, [r7, #12]
    3098:	689a      	ldr	r2, [r3, #8]
    309a:	68fb      	ldr	r3, [r7, #12]
    309c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    309e:	441a      	add	r2, r3
    30a0:	68fb      	ldr	r3, [r7, #12]
    30a2:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    30a4:	68fb      	ldr	r3, [r7, #12]
    30a6:	689a      	ldr	r2, [r3, #8]
    30a8:	68fb      	ldr	r3, [r7, #12]
    30aa:	685b      	ldr	r3, [r3, #4]
    30ac:	429a      	cmp	r2, r3
    30ae:	d323      	bcc.n	30f8 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    30b0:	68fb      	ldr	r3, [r7, #12]
    30b2:	681a      	ldr	r2, [r3, #0]
    30b4:	68fb      	ldr	r3, [r7, #12]
    30b6:	609a      	str	r2, [r3, #8]
    30b8:	e01e      	b.n	30f8 <prvCopyDataToQueue+0xa8>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    30ba:	68fb      	ldr	r3, [r7, #12]
    30bc:	68da      	ldr	r2, [r3, #12]
    30be:	68fb      	ldr	r3, [r7, #12]
    30c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    30c2:	4610      	mov	r0, r2
    30c4:	68b9      	ldr	r1, [r7, #8]
    30c6:	461a      	mov	r2, r3
    30c8:	f003 f97e 	bl	63c8 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    30cc:	68fb      	ldr	r3, [r7, #12]
    30ce:	68da      	ldr	r2, [r3, #12]
    30d0:	68fb      	ldr	r3, [r7, #12]
    30d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    30d4:	425b      	negs	r3, r3
    30d6:	441a      	add	r2, r3
    30d8:	68fb      	ldr	r3, [r7, #12]
    30da:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    30dc:	68fb      	ldr	r3, [r7, #12]
    30de:	68da      	ldr	r2, [r3, #12]
    30e0:	68fb      	ldr	r3, [r7, #12]
    30e2:	681b      	ldr	r3, [r3, #0]
    30e4:	429a      	cmp	r2, r3
    30e6:	d207      	bcs.n	30f8 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    30e8:	68fb      	ldr	r3, [r7, #12]
    30ea:	685a      	ldr	r2, [r3, #4]
    30ec:	68fb      	ldr	r3, [r7, #12]
    30ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    30f0:	425b      	negs	r3, r3
    30f2:	441a      	add	r2, r3
    30f4:	68fb      	ldr	r3, [r7, #12]
    30f6:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
    30f8:	68fb      	ldr	r3, [r7, #12]
    30fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    30fc:	1c5a      	adds	r2, r3, #1
    30fe:	68fb      	ldr	r3, [r7, #12]
    3100:	639a      	str	r2, [r3, #56]	; 0x38
}
    3102:	3710      	adds	r7, #16
    3104:	46bd      	mov	sp, r7
    3106:	bd80      	pop	{r7, pc}

00003108 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
    3108:	b580      	push	{r7, lr}
    310a:	b082      	sub	sp, #8
    310c:	af00      	add	r7, sp, #0
    310e:	6078      	str	r0, [r7, #4]
    3110:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    3112:	687b      	ldr	r3, [r7, #4]
    3114:	681b      	ldr	r3, [r3, #0]
    3116:	2b00      	cmp	r3, #0
    3118:	d019      	beq.n	314e <prvCopyDataFromQueue+0x46>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    311a:	687b      	ldr	r3, [r7, #4]
    311c:	68da      	ldr	r2, [r3, #12]
    311e:	687b      	ldr	r3, [r7, #4]
    3120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3122:	441a      	add	r2, r3
    3124:	687b      	ldr	r3, [r7, #4]
    3126:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    3128:	687b      	ldr	r3, [r7, #4]
    312a:	68da      	ldr	r2, [r3, #12]
    312c:	687b      	ldr	r3, [r7, #4]
    312e:	685b      	ldr	r3, [r3, #4]
    3130:	429a      	cmp	r2, r3
    3132:	d303      	bcc.n	313c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    3134:	687b      	ldr	r3, [r7, #4]
    3136:	681a      	ldr	r2, [r3, #0]
    3138:	687b      	ldr	r3, [r7, #4]
    313a:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    313c:	687b      	ldr	r3, [r7, #4]
    313e:	68da      	ldr	r2, [r3, #12]
    3140:	687b      	ldr	r3, [r7, #4]
    3142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3144:	6838      	ldr	r0, [r7, #0]
    3146:	4611      	mov	r1, r2
    3148:	461a      	mov	r2, r3
    314a:	f003 f93d 	bl	63c8 <memcpy>
	}
}
    314e:	3708      	adds	r7, #8
    3150:	46bd      	mov	sp, r7
    3152:	bd80      	pop	{r7, pc}

00003154 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
    3154:	b580      	push	{r7, lr}
    3156:	b082      	sub	sp, #8
    3158:	af00      	add	r7, sp, #0
    315a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    315c:	f001 fa06 	bl	456c <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    3160:	e014      	b.n	318c <prvUnlockQueue+0x38>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3162:	687b      	ldr	r3, [r7, #4]
    3164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3166:	2b00      	cmp	r3, #0
    3168:	d00f      	beq.n	318a <prvUnlockQueue+0x36>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    316a:	687b      	ldr	r3, [r7, #4]
    316c:	3324      	adds	r3, #36	; 0x24
    316e:	4618      	mov	r0, r3
    3170:	f000 fea6 	bl	3ec0 <xTaskRemoveFromEventList>
    3174:	4603      	mov	r3, r0
    3176:	2b00      	cmp	r3, #0
    3178:	d001      	beq.n	317e <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
    317a:	f000 ff5d 	bl	4038 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
    317e:	687b      	ldr	r3, [r7, #4]
    3180:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3182:	1e5a      	subs	r2, r3, #1
    3184:	687b      	ldr	r3, [r7, #4]
    3186:	649a      	str	r2, [r3, #72]	; 0x48
    3188:	e000      	b.n	318c <prvUnlockQueue+0x38>
			}
			else
			{
				break;
    318a:	e003      	b.n	3194 <prvUnlockQueue+0x40>
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    318c:	687b      	ldr	r3, [r7, #4]
    318e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3190:	2b00      	cmp	r3, #0
    3192:	dce6      	bgt.n	3162 <prvUnlockQueue+0xe>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
    3194:	687b      	ldr	r3, [r7, #4]
    3196:	f04f 32ff 	mov.w	r2, #4294967295
    319a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
    319c:	f001 f9fc 	bl	4598 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    31a0:	f001 f9e4 	bl	456c <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    31a4:	e014      	b.n	31d0 <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    31a6:	687b      	ldr	r3, [r7, #4]
    31a8:	691b      	ldr	r3, [r3, #16]
    31aa:	2b00      	cmp	r3, #0
    31ac:	d00f      	beq.n	31ce <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    31ae:	687b      	ldr	r3, [r7, #4]
    31b0:	3310      	adds	r3, #16
    31b2:	4618      	mov	r0, r3
    31b4:	f000 fe84 	bl	3ec0 <xTaskRemoveFromEventList>
    31b8:	4603      	mov	r3, r0
    31ba:	2b00      	cmp	r3, #0
    31bc:	d001      	beq.n	31c2 <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
    31be:	f000 ff3b 	bl	4038 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
    31c2:	687b      	ldr	r3, [r7, #4]
    31c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    31c6:	1e5a      	subs	r2, r3, #1
    31c8:	687b      	ldr	r3, [r7, #4]
    31ca:	645a      	str	r2, [r3, #68]	; 0x44
    31cc:	e000      	b.n	31d0 <prvUnlockQueue+0x7c>
			}
			else
			{
				break;
    31ce:	e003      	b.n	31d8 <prvUnlockQueue+0x84>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    31d0:	687b      	ldr	r3, [r7, #4]
    31d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    31d4:	2b00      	cmp	r3, #0
    31d6:	dce6      	bgt.n	31a6 <prvUnlockQueue+0x52>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    31d8:	687b      	ldr	r3, [r7, #4]
    31da:	f04f 32ff 	mov.w	r2, #4294967295
    31de:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
    31e0:	f001 f9da 	bl	4598 <vPortExitCritical>
}
    31e4:	3708      	adds	r7, #8
    31e6:	46bd      	mov	sp, r7
    31e8:	bd80      	pop	{r7, pc}
    31ea:	bf00      	nop

000031ec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
    31ec:	b580      	push	{r7, lr}
    31ee:	b084      	sub	sp, #16
    31f0:	af00      	add	r7, sp, #0
    31f2:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    31f4:	f001 f9ba 	bl	456c <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    31f8:	687b      	ldr	r3, [r7, #4]
    31fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    31fc:	2b00      	cmp	r3, #0
    31fe:	bf14      	ite	ne
    3200:	2300      	movne	r3, #0
    3202:	2301      	moveq	r3, #1
    3204:	b2db      	uxtb	r3, r3
    3206:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    3208:	f001 f9c6 	bl	4598 <vPortExitCritical>

	return xReturn;
    320c:	68fb      	ldr	r3, [r7, #12]
}
    320e:	4618      	mov	r0, r3
    3210:	3710      	adds	r7, #16
    3212:	46bd      	mov	sp, r7
    3214:	bd80      	pop	{r7, pc}
    3216:	bf00      	nop

00003218 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
    3218:	b480      	push	{r7}
    321a:	b085      	sub	sp, #20
    321c:	af00      	add	r7, sp, #0
    321e:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    3220:	687b      	ldr	r3, [r7, #4]
    3222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3224:	2b00      	cmp	r3, #0
    3226:	bf14      	ite	ne
    3228:	2300      	movne	r3, #0
    322a:	2301      	moveq	r3, #1
    322c:	b2db      	uxtb	r3, r3
    322e:	60fb      	str	r3, [r7, #12]

	return xReturn;
    3230:	68fb      	ldr	r3, [r7, #12]
}
    3232:	4618      	mov	r0, r3
    3234:	3714      	adds	r7, #20
    3236:	46bd      	mov	sp, r7
    3238:	f85d 7b04 	ldr.w	r7, [sp], #4
    323c:	4770      	bx	lr
    323e:	bf00      	nop

00003240 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
    3240:	b580      	push	{r7, lr}
    3242:	b084      	sub	sp, #16
    3244:	af00      	add	r7, sp, #0
    3246:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    3248:	f001 f990 	bl	456c <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    324c:	687b      	ldr	r3, [r7, #4]
    324e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    3250:	687b      	ldr	r3, [r7, #4]
    3252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    3254:	429a      	cmp	r2, r3
    3256:	bf14      	ite	ne
    3258:	2300      	movne	r3, #0
    325a:	2301      	moveq	r3, #1
    325c:	b2db      	uxtb	r3, r3
    325e:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    3260:	f001 f99a 	bl	4598 <vPortExitCritical>

	return xReturn;
    3264:	68fb      	ldr	r3, [r7, #12]
}
    3266:	4618      	mov	r0, r3
    3268:	3710      	adds	r7, #16
    326a:	46bd      	mov	sp, r7
    326c:	bd80      	pop	{r7, pc}
    326e:	bf00      	nop

00003270 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
    3270:	b480      	push	{r7}
    3272:	b085      	sub	sp, #20
    3274:	af00      	add	r7, sp, #0
    3276:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    3278:	687b      	ldr	r3, [r7, #4]
    327a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    327c:	687b      	ldr	r3, [r7, #4]
    327e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    3280:	429a      	cmp	r2, r3
    3282:	bf14      	ite	ne
    3284:	2300      	movne	r3, #0
    3286:	2301      	moveq	r3, #1
    3288:	b2db      	uxtb	r3, r3
    328a:	60fb      	str	r3, [r7, #12]

	return xReturn;
    328c:	68fb      	ldr	r3, [r7, #12]
}
    328e:	4618      	mov	r0, r3
    3290:	3714      	adds	r7, #20
    3292:	46bd      	mov	sp, r7
    3294:	f85d 7b04 	ldr.w	r7, [sp], #4
    3298:	4770      	bx	lr
    329a:	bf00      	nop

0000329c <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    329c:	b580      	push	{r7, lr}
    329e:	b08a      	sub	sp, #40	; 0x28
    32a0:	af02      	add	r7, sp, #8
    32a2:	60f8      	str	r0, [r7, #12]
    32a4:	60b9      	str	r1, [r7, #8]
    32a6:	603b      	str	r3, [r7, #0]
    32a8:	4613      	mov	r3, r2
    32aa:	80fb      	strh	r3, [r7, #6]
    configASSERT( pxTaskCode );
    configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

    /* Allocate the memory required by the TCB and stack for the new task,
       checking that the allocation was successful. */
    pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
    32ac:	88fb      	ldrh	r3, [r7, #6]
    32ae:	4618      	mov	r0, r3
    32b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
    32b2:	f000 ffe5 	bl	4280 <prvAllocateTCBAndStack>
    32b6:	61b8      	str	r0, [r7, #24]

    if( pxNewTCB != NULL )
    32b8:	69bb      	ldr	r3, [r7, #24]
    32ba:	2b00      	cmp	r3, #0
    32bc:	f000 80a1 	beq.w	3402 <xTaskGenericCreate+0x166>
           stack grows from high memory to low (as per the 80x86) or visa versa.
           portSTACK_GROWTH is used to make the result positive or negative as
           required by the port. */
#if( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
    32c0:	69bb      	ldr	r3, [r7, #24]
    32c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    32c4:	88fb      	ldrh	r3, [r7, #6]
    32c6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    32ca:	3b01      	subs	r3, #1
    32cc:	009b      	lsls	r3, r3, #2
    32ce:	4413      	add	r3, r2
    32d0:	617b      	str	r3, [r7, #20]
            pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
    32d2:	697b      	ldr	r3, [r7, #20]
    32d4:	f023 0307 	bic.w	r3, r3, #7
    32d8:	617b      	str	r3, [r7, #20]
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
        }
#endif

        /* Setup the newly allocated TCB with the initial state of the task. */
        prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
    32da:	88fb      	ldrh	r3, [r7, #6]
    32dc:	9300      	str	r3, [sp, #0]
    32de:	69b8      	ldr	r0, [r7, #24]
    32e0:	68b9      	ldr	r1, [r7, #8]
    32e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
    32e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    32e6:	f000 febd 	bl	4064 <prvInitialiseTCBVariables>
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
        }
#else
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    32ea:	6978      	ldr	r0, [r7, #20]
    32ec:	68f9      	ldr	r1, [r7, #12]
    32ee:	683a      	ldr	r2, [r7, #0]
    32f0:	f001 f8be 	bl	4470 <pxPortInitialiseStack>
    32f4:	4602      	mov	r2, r0
    32f6:	69bb      	ldr	r3, [r7, #24]
    32f8:	601a      	str	r2, [r3, #0]
#endif

        /* Check the alignment of the initialised stack. */
        portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

        if( ( void * ) pxCreatedTask != NULL )
    32fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    32fc:	2b00      	cmp	r3, #0
    32fe:	d002      	beq.n	3306 <xTaskGenericCreate+0x6a>
        {
            /* Pass the TCB out - in an anonymous way.  The calling function/
               task can use this as a handle to delete the task later if
               required.*/
            *pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    3300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3302:	69ba      	ldr	r2, [r7, #24]
    3304:	601a      	str	r2, [r3, #0]
        }

        /* We are going to manipulate the task queues to add this task to a
           ready list, so must make sure no interrupts occur. */
        taskENTER_CRITICAL();
    3306:	f001 f931 	bl	456c <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks++;
    330a:	f240 1390 	movw	r3, #400	; 0x190
    330e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3312:	681b      	ldr	r3, [r3, #0]
    3314:	1c5a      	adds	r2, r3, #1
    3316:	f240 1390 	movw	r3, #400	; 0x190
    331a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    331e:	601a      	str	r2, [r3, #0]
            if( pxCurrentTCB == NULL )
    3320:	f240 03b8 	movw	r3, #184	; 0xb8
    3324:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3328:	681b      	ldr	r3, [r3, #0]
    332a:	2b00      	cmp	r3, #0
    332c:	d10f      	bne.n	334e <xTaskGenericCreate+0xb2>
            {
                /* There are no other tasks, or all the other tasks are in
                   the suspended state - make this the current task. */
                pxCurrentTCB =  pxNewTCB;
    332e:	f240 03b8 	movw	r3, #184	; 0xb8
    3332:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3336:	69ba      	ldr	r2, [r7, #24]
    3338:	601a      	str	r2, [r3, #0]

                if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    333a:	f240 1390 	movw	r3, #400	; 0x190
    333e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3342:	681b      	ldr	r3, [r3, #0]
    3344:	2b01      	cmp	r3, #1
    3346:	d118      	bne.n	337a <xTaskGenericCreate+0xde>
                {
                    /* This is the first task to be created so do the preliminary
                       initialisation required.  We will not recover if this call
                       fails, but we will report the failure. */
                    prvInitialiseTaskLists();
    3348:	f000 fec2 	bl	40d0 <prvInitialiseTaskLists>
    334c:	e015      	b.n	337a <xTaskGenericCreate+0xde>
            else
            {
                /* If the scheduler is not already running, make this task the
                   current task if it is the highest priority task to be created
                   so far. */
                if( xSchedulerRunning == pdFALSE )
    334e:	f240 13a0 	movw	r3, #416	; 0x1a0
    3352:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3356:	681b      	ldr	r3, [r3, #0]
    3358:	2b00      	cmp	r3, #0
    335a:	d10e      	bne.n	337a <xTaskGenericCreate+0xde>
                {
                    if( pxCurrentTCB->uxPriority <= uxPriority )
    335c:	f240 03b8 	movw	r3, #184	; 0xb8
    3360:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3364:	681b      	ldr	r3, [r3, #0]
    3366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3368:	6abb      	ldr	r3, [r7, #40]	; 0x28
    336a:	429a      	cmp	r2, r3
    336c:	d805      	bhi.n	337a <xTaskGenericCreate+0xde>
                    {
                        pxCurrentTCB = pxNewTCB;
    336e:	f240 03b8 	movw	r3, #184	; 0xb8
    3372:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3376:	69ba      	ldr	r2, [r7, #24]
    3378:	601a      	str	r2, [r3, #0]
                }
            }

            /* Remember the top priority to make context switching faster.  Use
               the priority in pxNewTCB as this has been capped to a valid value. */
            if( pxNewTCB->uxPriority > uxTopUsedPriority )
    337a:	69bb      	ldr	r3, [r7, #24]
    337c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    337e:	f240 1398 	movw	r3, #408	; 0x198
    3382:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3386:	681b      	ldr	r3, [r3, #0]
    3388:	429a      	cmp	r2, r3
    338a:	d906      	bls.n	339a <xTaskGenericCreate+0xfe>
            {
                uxTopUsedPriority = pxNewTCB->uxPriority;
    338c:	69bb      	ldr	r3, [r7, #24]
    338e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3390:	f240 1398 	movw	r3, #408	; 0x198
    3394:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3398:	601a      	str	r2, [r3, #0]
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
            }
#endif
            uxTaskNumber++;
    339a:	f240 13b4 	movw	r3, #436	; 0x1b4
    339e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33a2:	681b      	ldr	r3, [r3, #0]
    33a4:	1c5a      	adds	r2, r3, #1
    33a6:	f240 13b4 	movw	r3, #436	; 0x1b4
    33aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33ae:	601a      	str	r2, [r3, #0]

            prvAddTaskToReadyQueue( pxNewTCB );
    33b0:	69bb      	ldr	r3, [r7, #24]
    33b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    33b4:	f240 139c 	movw	r3, #412	; 0x19c
    33b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33bc:	681b      	ldr	r3, [r3, #0]
    33be:	429a      	cmp	r2, r3
    33c0:	d906      	bls.n	33d0 <xTaskGenericCreate+0x134>
    33c2:	69bb      	ldr	r3, [r7, #24]
    33c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    33c6:	f240 139c 	movw	r3, #412	; 0x19c
    33ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33ce:	601a      	str	r2, [r3, #0]
    33d0:	69bb      	ldr	r3, [r7, #24]
    33d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    33d4:	4613      	mov	r3, r2
    33d6:	009b      	lsls	r3, r3, #2
    33d8:	4413      	add	r3, r2
    33da:	009b      	lsls	r3, r3, #2
    33dc:	f240 02bc 	movw	r2, #188	; 0xbc
    33e0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    33e4:	441a      	add	r2, r3
    33e6:	69bb      	ldr	r3, [r7, #24]
    33e8:	3304      	adds	r3, #4
    33ea:	4610      	mov	r0, r2
    33ec:	4619      	mov	r1, r3
    33ee:	f7ff fadf 	bl	29b0 <vListInsertEnd>

            xReturn = pdPASS;
    33f2:	2301      	movs	r3, #1
    33f4:	61fb      	str	r3, [r7, #28]
            portSETUP_TCB( pxNewTCB );
            traceTASK_CREATE( pxNewTCB );
    33f6:	69b8      	ldr	r0, [r7, #24]
    33f8:	f002 ffce 	bl	6398 <myTraceCreate>
        }
        taskEXIT_CRITICAL();
    33fc:	f001 f8cc 	bl	4598 <vPortExitCritical>
    3400:	e002      	b.n	3408 <xTaskGenericCreate+0x16c>
    }
    else
    {
        xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    3402:	f04f 33ff 	mov.w	r3, #4294967295
    3406:	61fb      	str	r3, [r7, #28]
        traceTASK_CREATE_FAILED();
    }

    if( xReturn == pdPASS )
    3408:	69fb      	ldr	r3, [r7, #28]
    340a:	2b01      	cmp	r3, #1
    340c:	d111      	bne.n	3432 <xTaskGenericCreate+0x196>
    {
        if( xSchedulerRunning != pdFALSE )
    340e:	f240 13a0 	movw	r3, #416	; 0x1a0
    3412:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3416:	681b      	ldr	r3, [r3, #0]
    3418:	2b00      	cmp	r3, #0
    341a:	d00a      	beq.n	3432 <xTaskGenericCreate+0x196>
        {
            /* If the created task is of a higher priority than the current task
               then it should run now. */
            if( pxCurrentTCB->uxPriority < uxPriority )
    341c:	f240 03b8 	movw	r3, #184	; 0xb8
    3420:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3424:	681b      	ldr	r3, [r3, #0]
    3426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3428:	6abb      	ldr	r3, [r7, #40]	; 0x28
    342a:	429a      	cmp	r2, r3
    342c:	d201      	bcs.n	3432 <xTaskGenericCreate+0x196>
            {
                portYIELD_WITHIN_API();
    342e:	f001 f88f 	bl	4550 <vPortYieldFromISR>
            }
        }
    }

    return xReturn;
    3432:	69fb      	ldr	r3, [r7, #28]
}
    3434:	4618      	mov	r0, r3
    3436:	3720      	adds	r7, #32
    3438:	46bd      	mov	sp, r7
    343a:	bd80      	pop	{r7, pc}

0000343c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

void vTaskDelete( xTaskHandle pxTaskToDelete )
{
    343c:	b580      	push	{r7, lr}
    343e:	b084      	sub	sp, #16
    3440:	af00      	add	r7, sp, #0
    3442:	6078      	str	r0, [r7, #4]
    tskTCB *pxTCB;

    taskENTER_CRITICAL();
    3444:	f001 f892 	bl	456c <vPortEnterCritical>
    {
        /* Ensure a yield is performed if the current task is being
           deleted. */
        if( pxTaskToDelete == pxCurrentTCB )
    3448:	f240 03b8 	movw	r3, #184	; 0xb8
    344c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3450:	681b      	ldr	r3, [r3, #0]
    3452:	687a      	ldr	r2, [r7, #4]
    3454:	429a      	cmp	r2, r3
    3456:	d101      	bne.n	345c <vTaskDelete+0x20>
        {
            pxTaskToDelete = NULL;
    3458:	2300      	movs	r3, #0
    345a:	607b      	str	r3, [r7, #4]
        }

        /* If null is passed in here then we are deleting ourselves. */
        pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
    345c:	687b      	ldr	r3, [r7, #4]
    345e:	2b00      	cmp	r3, #0
    3460:	d105      	bne.n	346e <vTaskDelete+0x32>
    3462:	f240 03b8 	movw	r3, #184	; 0xb8
    3466:	f2c2 0300 	movt	r3, #8192	; 0x2000
    346a:	681b      	ldr	r3, [r3, #0]
    346c:	e000      	b.n	3470 <vTaskDelete+0x34>
    346e:	687b      	ldr	r3, [r7, #4]
    3470:	60fb      	str	r3, [r7, #12]

        /* Remove task from the ready list and place in the	termination list.
           This will stop the task from be scheduled.  The idle task will check
           the termination list and free up any memory allocated by the
           scheduler for the TCB and stack. */
        vListRemove( &( pxTCB->xGenericListItem ) );
    3472:	68fb      	ldr	r3, [r7, #12]
    3474:	3304      	adds	r3, #4
    3476:	4618      	mov	r0, r3
    3478:	f7ff fafa 	bl	2a70 <vListRemove>

        /* Is the task waiting on an event also? */
        if( pxTCB->xEventListItem.pvContainer != NULL )
    347c:	68fb      	ldr	r3, [r7, #12]
    347e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3480:	2b00      	cmp	r3, #0
    3482:	d004      	beq.n	348e <vTaskDelete+0x52>
        {
            vListRemove( &( pxTCB->xEventListItem ) );
    3484:	68fb      	ldr	r3, [r7, #12]
    3486:	3318      	adds	r3, #24
    3488:	4618      	mov	r0, r3
    348a:	f7ff faf1 	bl	2a70 <vListRemove>
        }

        vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    348e:	68fb      	ldr	r3, [r7, #12]
    3490:	3304      	adds	r3, #4
    3492:	f240 1064 	movw	r0, #356	; 0x164
    3496:	f2c2 0000 	movt	r0, #8192	; 0x2000
    349a:	4619      	mov	r1, r3
    349c:	f7ff fa88 	bl	29b0 <vListInsertEnd>

        /* Increment the ucTasksDeleted variable so the idle task knows
           there is a task that has been deleted and that it should therefore
           check the xTasksWaitingTermination list. */
        ++uxTasksDeleted;
    34a0:	f240 1378 	movw	r3, #376	; 0x178
    34a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    34a8:	681b      	ldr	r3, [r3, #0]
    34aa:	1c5a      	adds	r2, r3, #1
    34ac:	f240 1378 	movw	r3, #376	; 0x178
    34b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    34b4:	601a      	str	r2, [r3, #0]

        /* Increment the uxTaskNumberVariable also so kernel aware debuggers
           can detect that the task lists need re-generating. */
        uxTaskNumber++;
    34b6:	f240 13b4 	movw	r3, #436	; 0x1b4
    34ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    34be:	681b      	ldr	r3, [r3, #0]
    34c0:	1c5a      	adds	r2, r3, #1
    34c2:	f240 13b4 	movw	r3, #436	; 0x1b4
    34c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    34ca:	601a      	str	r2, [r3, #0]

        traceTASK_DELETE( pxTCB );
    }
    taskEXIT_CRITICAL();
    34cc:	f001 f864 	bl	4598 <vPortExitCritical>

    /* Force a reschedule if we have just deleted the current task. */
    if( xSchedulerRunning != pdFALSE )
    34d0:	f240 13a0 	movw	r3, #416	; 0x1a0
    34d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    34d8:	681b      	ldr	r3, [r3, #0]
    34da:	2b00      	cmp	r3, #0
    34dc:	d004      	beq.n	34e8 <vTaskDelete+0xac>
    {
        if( ( void * ) pxTaskToDelete == NULL )
    34de:	687b      	ldr	r3, [r7, #4]
    34e0:	2b00      	cmp	r3, #0
    34e2:	d101      	bne.n	34e8 <vTaskDelete+0xac>
        {
            portYIELD_WITHIN_API();
    34e4:	f001 f834 	bl	4550 <vPortYieldFromISR>
        }
    }
}
    34e8:	3710      	adds	r7, #16
    34ea:	46bd      	mov	sp, r7
    34ec:	bd80      	pop	{r7, pc}
    34ee:	bf00      	nop

000034f0 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
{
    34f0:	b580      	push	{r7, lr}
    34f2:	b086      	sub	sp, #24
    34f4:	af00      	add	r7, sp, #0
    34f6:	6078      	str	r0, [r7, #4]
    34f8:	6039      	str	r1, [r7, #0]
    portTickType xTimeToWake;
    portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
    34fa:	2300      	movs	r3, #0
    34fc:	617b      	str	r3, [r7, #20]

    configASSERT( pxPreviousWakeTime );
    configASSERT( ( xTimeIncrement > 0U ) );

    vTaskSuspendAll();
    34fe:	f000 fa8b 	bl	3a18 <vTaskSuspendAll>
    {
        /* Generate the tick time at which the task wants to wake. */
        xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    3502:	687b      	ldr	r3, [r7, #4]
    3504:	681a      	ldr	r2, [r3, #0]
    3506:	683b      	ldr	r3, [r7, #0]
    3508:	4413      	add	r3, r2
    350a:	613b      	str	r3, [r7, #16]

        if( xTickCount < *pxPreviousWakeTime )
    350c:	687b      	ldr	r3, [r7, #4]
    350e:	681a      	ldr	r2, [r3, #0]
    3510:	f240 1394 	movw	r3, #404	; 0x194
    3514:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3518:	681b      	ldr	r3, [r3, #0]
    351a:	429a      	cmp	r2, r3
    351c:	d90f      	bls.n	353e <vTaskDelayUntil+0x4e>
            /* The tick count has overflowed since this function was
               lasted called.  In this case the only time we should ever
               actually delay is if the wake time has also	overflowed,
               and the wake time is greater than the tick time.  When this
               is the case it is as if neither time had overflowed. */
            if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    351e:	687b      	ldr	r3, [r7, #4]
    3520:	681a      	ldr	r2, [r3, #0]
    3522:	693b      	ldr	r3, [r7, #16]
    3524:	429a      	cmp	r2, r3
    3526:	d919      	bls.n	355c <vTaskDelayUntil+0x6c>
    3528:	f240 1394 	movw	r3, #404	; 0x194
    352c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3530:	681b      	ldr	r3, [r3, #0]
    3532:	693a      	ldr	r2, [r7, #16]
    3534:	429a      	cmp	r2, r3
    3536:	d911      	bls.n	355c <vTaskDelayUntil+0x6c>
            {
                xShouldDelay = pdTRUE;
    3538:	2301      	movs	r3, #1
    353a:	617b      	str	r3, [r7, #20]
    353c:	e00e      	b.n	355c <vTaskDelayUntil+0x6c>
        else
        {
            /* The tick time has not overflowed.  In this case we will
               delay if either the wake time has overflowed, and/or the
               tick time is less than the wake time. */
            if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    353e:	687b      	ldr	r3, [r7, #4]
    3540:	681a      	ldr	r2, [r3, #0]
    3542:	693b      	ldr	r3, [r7, #16]
    3544:	429a      	cmp	r2, r3
    3546:	d807      	bhi.n	3558 <vTaskDelayUntil+0x68>
    3548:	f240 1394 	movw	r3, #404	; 0x194
    354c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3550:	681b      	ldr	r3, [r3, #0]
    3552:	693a      	ldr	r2, [r7, #16]
    3554:	429a      	cmp	r2, r3
    3556:	d901      	bls.n	355c <vTaskDelayUntil+0x6c>
            {
                xShouldDelay = pdTRUE;
    3558:	2301      	movs	r3, #1
    355a:	617b      	str	r3, [r7, #20]
            }
        }

        /* Update the wake time ready for the next call. */
        *pxPreviousWakeTime = xTimeToWake;
    355c:	687b      	ldr	r3, [r7, #4]
    355e:	693a      	ldr	r2, [r7, #16]
    3560:	601a      	str	r2, [r3, #0]

        if( xShouldDelay != pdFALSE )
    3562:	697b      	ldr	r3, [r7, #20]
    3564:	2b00      	cmp	r3, #0
    3566:	d00b      	beq.n	3580 <vTaskDelayUntil+0x90>
            traceTASK_DELAY_UNTIL();

            /* We must remove ourselves from the ready list before adding
               ourselves to the blocked list as the same list item is used for
               both lists. */
            vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3568:	f240 03b8 	movw	r3, #184	; 0xb8
    356c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3570:	681b      	ldr	r3, [r3, #0]
    3572:	3304      	adds	r3, #4
    3574:	4618      	mov	r0, r3
    3576:	f7ff fa7b 	bl	2a70 <vListRemove>
            prvAddCurrentTaskToDelayedList( xTimeToWake );
    357a:	6938      	ldr	r0, [r7, #16]
    357c:	f000 fe3c 	bl	41f8 <prvAddCurrentTaskToDelayedList>
        }
    }
    xAlreadyYielded = xTaskResumeAll();
    3580:	f000 fa5c 	bl	3a3c <xTaskResumeAll>
    3584:	60f8      	str	r0, [r7, #12]

    /* Force a reschedule if xTaskResumeAll has not already done so, we may
       have put ourselves to sleep. */
    if( xAlreadyYielded == pdFALSE )
    3586:	68fb      	ldr	r3, [r7, #12]
    3588:	2b00      	cmp	r3, #0
    358a:	d101      	bne.n	3590 <vTaskDelayUntil+0xa0>
    {
        portYIELD_WITHIN_API();
    358c:	f000 ffe0 	bl	4550 <vPortYieldFromISR>
    }
}
    3590:	3718      	adds	r7, #24
    3592:	46bd      	mov	sp, r7
    3594:	bd80      	pop	{r7, pc}
    3596:	bf00      	nop

00003598 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

void vTaskDelay( portTickType xTicksToDelay )
{
    3598:	b580      	push	{r7, lr}
    359a:	b084      	sub	sp, #16
    359c:	af00      	add	r7, sp, #0
    359e:	6078      	str	r0, [r7, #4]
    portTickType xTimeToWake;
    signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    35a0:	2300      	movs	r3, #0
    35a2:	60fb      	str	r3, [r7, #12]

    /* A delay time of zero just forces a reschedule. */
    if( xTicksToDelay > ( portTickType ) 0U )
    35a4:	687b      	ldr	r3, [r7, #4]
    35a6:	2b00      	cmp	r3, #0
    35a8:	d018      	beq.n	35dc <vTaskDelay+0x44>
    {
        vTaskSuspendAll();
    35aa:	f000 fa35 	bl	3a18 <vTaskSuspendAll>
               This task cannot be in an event list as it is the currently
               executing task. */

            /* Calculate the time to wake - this may overflow but this is
               not a problem. */
            xTimeToWake = xTickCount + xTicksToDelay;
    35ae:	f240 1394 	movw	r3, #404	; 0x194
    35b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    35b6:	681a      	ldr	r2, [r3, #0]
    35b8:	687b      	ldr	r3, [r7, #4]
    35ba:	4413      	add	r3, r2
    35bc:	60bb      	str	r3, [r7, #8]

            /* We must remove ourselves from the ready list before adding
               ourselves to the blocked list as the same list item is used for
               both lists. */
            vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    35be:	f240 03b8 	movw	r3, #184	; 0xb8
    35c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    35c6:	681b      	ldr	r3, [r3, #0]
    35c8:	3304      	adds	r3, #4
    35ca:	4618      	mov	r0, r3
    35cc:	f7ff fa50 	bl	2a70 <vListRemove>
            prvAddCurrentTaskToDelayedList( xTimeToWake );
    35d0:	68b8      	ldr	r0, [r7, #8]
    35d2:	f000 fe11 	bl	41f8 <prvAddCurrentTaskToDelayedList>
        }
        xAlreadyYielded = xTaskResumeAll();
    35d6:	f000 fa31 	bl	3a3c <xTaskResumeAll>
    35da:	60f8      	str	r0, [r7, #12]
    }

    /* Force a reschedule if xTaskResumeAll has not already done so, we may
       have put ourselves to sleep. */
    if( xAlreadyYielded == pdFALSE )
    35dc:	68fb      	ldr	r3, [r7, #12]
    35de:	2b00      	cmp	r3, #0
    35e0:	d101      	bne.n	35e6 <vTaskDelay+0x4e>
    {
        portYIELD_WITHIN_API();
    35e2:	f000 ffb5 	bl	4550 <vPortYieldFromISR>
    }
}
    35e6:	3710      	adds	r7, #16
    35e8:	46bd      	mov	sp, r7
    35ea:	bd80      	pop	{r7, pc}

000035ec <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

unsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle pxTask )
{
    35ec:	b580      	push	{r7, lr}
    35ee:	b084      	sub	sp, #16
    35f0:	af00      	add	r7, sp, #0
    35f2:	6078      	str	r0, [r7, #4]
    tskTCB *pxTCB;
    unsigned portBASE_TYPE uxReturn;

    taskENTER_CRITICAL();
    35f4:	f000 ffba 	bl	456c <vPortEnterCritical>
    {
        /* If null is passed in here then we are changing the
           priority of the calling function. */
        pxTCB = prvGetTCBFromHandle( pxTask );
    35f8:	687b      	ldr	r3, [r7, #4]
    35fa:	2b00      	cmp	r3, #0
    35fc:	d105      	bne.n	360a <uxTaskPriorityGet+0x1e>
    35fe:	f240 03b8 	movw	r3, #184	; 0xb8
    3602:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3606:	681b      	ldr	r3, [r3, #0]
    3608:	e000      	b.n	360c <uxTaskPriorityGet+0x20>
    360a:	687b      	ldr	r3, [r7, #4]
    360c:	60fb      	str	r3, [r7, #12]
        uxReturn = pxTCB->uxPriority;
    360e:	68fb      	ldr	r3, [r7, #12]
    3610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3612:	60bb      	str	r3, [r7, #8]
    }
    taskEXIT_CRITICAL();
    3614:	f000 ffc0 	bl	4598 <vPortExitCritical>

    return uxReturn;
    3618:	68bb      	ldr	r3, [r7, #8]
}
    361a:	4618      	mov	r0, r3
    361c:	3710      	adds	r7, #16
    361e:	46bd      	mov	sp, r7
    3620:	bd80      	pop	{r7, pc}
    3622:	bf00      	nop

00003624 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

void vTaskPrioritySet( xTaskHandle pxTask, unsigned portBASE_TYPE uxNewPriority )
{
    3624:	b580      	push	{r7, lr}
    3626:	b086      	sub	sp, #24
    3628:	af00      	add	r7, sp, #0
    362a:	6078      	str	r0, [r7, #4]
    362c:	6039      	str	r1, [r7, #0]
    tskTCB *pxTCB;
    unsigned portBASE_TYPE uxCurrentPriority;
    portBASE_TYPE xYieldRequired = pdFALSE;
    362e:	2300      	movs	r3, #0
    3630:	617b      	str	r3, [r7, #20]

    configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

    /* Ensure the new priority is valid. */
    if( uxNewPriority >= configMAX_PRIORITIES )
    3632:	683b      	ldr	r3, [r7, #0]
    3634:	2b04      	cmp	r3, #4
    3636:	d901      	bls.n	363c <vTaskPrioritySet+0x18>
    {
        uxNewPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    3638:	2304      	movs	r3, #4
    363a:	603b      	str	r3, [r7, #0]
    }

    taskENTER_CRITICAL();
    363c:	f000 ff96 	bl	456c <vPortEnterCritical>
    {
        if( pxTask == pxCurrentTCB )
    3640:	f240 03b8 	movw	r3, #184	; 0xb8
    3644:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3648:	681b      	ldr	r3, [r3, #0]
    364a:	687a      	ldr	r2, [r7, #4]
    364c:	429a      	cmp	r2, r3
    364e:	d101      	bne.n	3654 <vTaskPrioritySet+0x30>
        {
            pxTask = NULL;
    3650:	2300      	movs	r3, #0
    3652:	607b      	str	r3, [r7, #4]
        }

        /* If null is passed in here then we are changing the
           priority of the calling function. */
        pxTCB = prvGetTCBFromHandle( pxTask );
    3654:	687b      	ldr	r3, [r7, #4]
    3656:	2b00      	cmp	r3, #0
    3658:	d105      	bne.n	3666 <vTaskPrioritySet+0x42>
    365a:	f240 03b8 	movw	r3, #184	; 0xb8
    365e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3662:	681b      	ldr	r3, [r3, #0]
    3664:	e000      	b.n	3668 <vTaskPrioritySet+0x44>
    3666:	687b      	ldr	r3, [r7, #4]
    3668:	613b      	str	r3, [r7, #16]

        traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

#if ( configUSE_MUTEXES == 1 )
        {
            uxCurrentPriority = pxTCB->uxBasePriority;
    366a:	693b      	ldr	r3, [r7, #16]
    366c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    366e:	60fb      	str	r3, [r7, #12]
        {
            uxCurrentPriority = pxTCB->uxPriority;
        }
#endif

        if( uxCurrentPriority != uxNewPriority )
    3670:	68fa      	ldr	r2, [r7, #12]
    3672:	683b      	ldr	r3, [r7, #0]
    3674:	429a      	cmp	r2, r3
    3676:	d058      	beq.n	372a <vTaskPrioritySet+0x106>
        {
            /* The priority change may have readied a task of higher
               priority than the calling task. */
            if( uxNewPriority > uxCurrentPriority )
    3678:	683a      	ldr	r2, [r7, #0]
    367a:	68fb      	ldr	r3, [r7, #12]
    367c:	429a      	cmp	r2, r3
    367e:	d905      	bls.n	368c <vTaskPrioritySet+0x68>
            {
                if( pxTask != NULL )
    3680:	687b      	ldr	r3, [r7, #4]
    3682:	2b00      	cmp	r3, #0
    3684:	d007      	beq.n	3696 <vTaskPrioritySet+0x72>
                {
                    /* The priority of another task is being raised.  If we
                       were raising the priority of the currently running task
                       there would be no need to switch as it must have already
                       been the highest priority task. */
                    xYieldRequired = pdTRUE;
    3686:	2301      	movs	r3, #1
    3688:	617b      	str	r3, [r7, #20]
    368a:	e004      	b.n	3696 <vTaskPrioritySet+0x72>
                }
            }
            else if( pxTask == NULL )
    368c:	687b      	ldr	r3, [r7, #4]
    368e:	2b00      	cmp	r3, #0
    3690:	d101      	bne.n	3696 <vTaskPrioritySet+0x72>
            {
                /* Setting our own priority down means there may now be another
                   task of higher priority that is ready to execute. */
                xYieldRequired = pdTRUE;
    3692:	2301      	movs	r3, #1
    3694:	617b      	str	r3, [r7, #20]

#if ( configUSE_MUTEXES == 1 )
            {
                /* Only change the priority being used if the task is not
                   currently using an inherited priority. */
                if( pxTCB->uxBasePriority == pxTCB->uxPriority )
    3696:	693b      	ldr	r3, [r7, #16]
    3698:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    369a:	693b      	ldr	r3, [r7, #16]
    369c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    369e:	429a      	cmp	r2, r3
    36a0:	d102      	bne.n	36a8 <vTaskPrioritySet+0x84>
                {
                    pxTCB->uxPriority = uxNewPriority;
    36a2:	693b      	ldr	r3, [r7, #16]
    36a4:	683a      	ldr	r2, [r7, #0]
    36a6:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                /* The base priority gets set whatever. */
                pxTCB->uxBasePriority = uxNewPriority;
    36a8:	693b      	ldr	r3, [r7, #16]
    36aa:	683a      	ldr	r2, [r7, #0]
    36ac:	645a      	str	r2, [r3, #68]	; 0x44
            {
                pxTCB->uxPriority = uxNewPriority;
            }
#endif

            listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) uxNewPriority ) );
    36ae:	683b      	ldr	r3, [r7, #0]
    36b0:	f1c3 0205 	rsb	r2, r3, #5
    36b4:	693b      	ldr	r3, [r7, #16]
    36b6:	619a      	str	r2, [r3, #24]

            /* If the task is in the blocked or suspended list we need do
               nothing more than change it's priority variable. However, if
               the task is in a ready list it needs to be removed and placed
               in the queue appropriate to its new priority. */
            if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericListItem ) ) )
    36b8:	693b      	ldr	r3, [r7, #16]
    36ba:	6959      	ldr	r1, [r3, #20]
    36bc:	68fa      	ldr	r2, [r7, #12]
    36be:	4613      	mov	r3, r2
    36c0:	009b      	lsls	r3, r3, #2
    36c2:	4413      	add	r3, r2
    36c4:	009b      	lsls	r3, r3, #2
    36c6:	f240 02bc 	movw	r2, #188	; 0xbc
    36ca:	f2c2 0200 	movt	r2, #8192	; 0x2000
    36ce:	4413      	add	r3, r2
    36d0:	4299      	cmp	r1, r3
    36d2:	d125      	bne.n	3720 <vTaskPrioritySet+0xfc>
            {
                /* The task is currently in its ready list - remove before adding
                   it to it's new ready list.  As we are in a critical section we
                   can do this even if the scheduler is suspended. */
                vListRemove( &( pxTCB->xGenericListItem ) );
    36d4:	693b      	ldr	r3, [r7, #16]
    36d6:	3304      	adds	r3, #4
    36d8:	4618      	mov	r0, r3
    36da:	f7ff f9c9 	bl	2a70 <vListRemove>
                prvAddTaskToReadyQueue( pxTCB );
    36de:	693b      	ldr	r3, [r7, #16]
    36e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    36e2:	f240 139c 	movw	r3, #412	; 0x19c
    36e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    36ea:	681b      	ldr	r3, [r3, #0]
    36ec:	429a      	cmp	r2, r3
    36ee:	d906      	bls.n	36fe <vTaskPrioritySet+0xda>
    36f0:	693b      	ldr	r3, [r7, #16]
    36f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    36f4:	f240 139c 	movw	r3, #412	; 0x19c
    36f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    36fc:	601a      	str	r2, [r3, #0]
    36fe:	693b      	ldr	r3, [r7, #16]
    3700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3702:	4613      	mov	r3, r2
    3704:	009b      	lsls	r3, r3, #2
    3706:	4413      	add	r3, r2
    3708:	009b      	lsls	r3, r3, #2
    370a:	f240 02bc 	movw	r2, #188	; 0xbc
    370e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3712:	441a      	add	r2, r3
    3714:	693b      	ldr	r3, [r7, #16]
    3716:	3304      	adds	r3, #4
    3718:	4610      	mov	r0, r2
    371a:	4619      	mov	r1, r3
    371c:	f7ff f948 	bl	29b0 <vListInsertEnd>
            }

            if( xYieldRequired == pdTRUE )
    3720:	697b      	ldr	r3, [r7, #20]
    3722:	2b01      	cmp	r3, #1
    3724:	d101      	bne.n	372a <vTaskPrioritySet+0x106>
            {
                portYIELD_WITHIN_API();
    3726:	f000 ff13 	bl	4550 <vPortYieldFromISR>
            }
        }
    }
    taskEXIT_CRITICAL();
    372a:	f000 ff35 	bl	4598 <vPortExitCritical>
}
    372e:	3718      	adds	r7, #24
    3730:	46bd      	mov	sp, r7
    3732:	bd80      	pop	{r7, pc}

00003734 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

void vTaskSuspend( xTaskHandle pxTaskToSuspend )
{
    3734:	b580      	push	{r7, lr}
    3736:	b084      	sub	sp, #16
    3738:	af00      	add	r7, sp, #0
    373a:	6078      	str	r0, [r7, #4]
    tskTCB *pxTCB;

    taskENTER_CRITICAL();
    373c:	f000 ff16 	bl	456c <vPortEnterCritical>
    {
        /* Ensure a yield is performed if the current task is being
           suspended. */
        if( pxTaskToSuspend == pxCurrentTCB )
    3740:	f240 03b8 	movw	r3, #184	; 0xb8
    3744:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3748:	681b      	ldr	r3, [r3, #0]
    374a:	687a      	ldr	r2, [r7, #4]
    374c:	429a      	cmp	r2, r3
    374e:	d101      	bne.n	3754 <vTaskSuspend+0x20>
        {
            pxTaskToSuspend = NULL;
    3750:	2300      	movs	r3, #0
    3752:	607b      	str	r3, [r7, #4]
        }

        /* If null is passed in here then we are suspending ourselves. */
        pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
    3754:	687b      	ldr	r3, [r7, #4]
    3756:	2b00      	cmp	r3, #0
    3758:	d105      	bne.n	3766 <vTaskSuspend+0x32>
    375a:	f240 03b8 	movw	r3, #184	; 0xb8
    375e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3762:	681b      	ldr	r3, [r3, #0]
    3764:	e000      	b.n	3768 <vTaskSuspend+0x34>
    3766:	687b      	ldr	r3, [r7, #4]
    3768:	60fb      	str	r3, [r7, #12]

        traceTASK_SUSPEND( pxTCB );

        /* Remove task from the ready/delayed list and place in the	suspended list. */
        vListRemove( &( pxTCB->xGenericListItem ) );
    376a:	68fb      	ldr	r3, [r7, #12]
    376c:	3304      	adds	r3, #4
    376e:	4618      	mov	r0, r3
    3770:	f7ff f97e 	bl	2a70 <vListRemove>

        /* Is the task waiting on an event also? */
        if( pxTCB->xEventListItem.pvContainer != NULL )
    3774:	68fb      	ldr	r3, [r7, #12]
    3776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3778:	2b00      	cmp	r3, #0
    377a:	d004      	beq.n	3786 <vTaskSuspend+0x52>
        {
            vListRemove( &( pxTCB->xEventListItem ) );
    377c:	68fb      	ldr	r3, [r7, #12]
    377e:	3318      	adds	r3, #24
    3780:	4618      	mov	r0, r3
    3782:	f7ff f975 	bl	2a70 <vListRemove>
        }

        vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
    3786:	68fb      	ldr	r3, [r7, #12]
    3788:	3304      	adds	r3, #4
    378a:	f240 107c 	movw	r0, #380	; 0x17c
    378e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3792:	4619      	mov	r1, r3
    3794:	f7ff f90c 	bl	29b0 <vListInsertEnd>
    }
    taskEXIT_CRITICAL();
    3798:	f000 fefe 	bl	4598 <vPortExitCritical>

    if( ( void * ) pxTaskToSuspend == NULL )
    379c:	687b      	ldr	r3, [r7, #4]
    379e:	2b00      	cmp	r3, #0
    37a0:	d11e      	bne.n	37e0 <vTaskSuspend+0xac>
    {
        if( xSchedulerRunning != pdFALSE )
    37a2:	f240 13a0 	movw	r3, #416	; 0x1a0
    37a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    37aa:	681b      	ldr	r3, [r3, #0]
    37ac:	2b00      	cmp	r3, #0
    37ae:	d002      	beq.n	37b6 <vTaskSuspend+0x82>
        {
            /* We have just suspended the current task. */
            portYIELD_WITHIN_API();
    37b0:	f000 fece 	bl	4550 <vPortYieldFromISR>
    37b4:	e014      	b.n	37e0 <vTaskSuspend+0xac>
        else
        {
            /* The scheduler is not running, but the task that was pointed
               to by pxCurrentTCB has just been suspended and pxCurrentTCB
               must be adjusted to point to a different task. */
            if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    37b6:	f240 137c 	movw	r3, #380	; 0x17c
    37ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    37be:	681a      	ldr	r2, [r3, #0]
    37c0:	f240 1390 	movw	r3, #400	; 0x190
    37c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    37c8:	681b      	ldr	r3, [r3, #0]
    37ca:	429a      	cmp	r2, r3
    37cc:	d106      	bne.n	37dc <vTaskSuspend+0xa8>
            {
                /* No other tasks are ready, so set pxCurrentTCB back to
                   NULL so when the next task is created pxCurrentTCB will
                   be set to point to it no matter what its relative priority
                   is. */
                pxCurrentTCB = NULL;
    37ce:	f240 03b8 	movw	r3, #184	; 0xb8
    37d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    37d6:	2200      	movs	r2, #0
    37d8:	601a      	str	r2, [r3, #0]
    37da:	e001      	b.n	37e0 <vTaskSuspend+0xac>
            }
            else
            {
                vTaskSwitchContext();
    37dc:	f000 fadc 	bl	3d98 <vTaskSwitchContext>
            }
        }
    }
}
    37e0:	3710      	adds	r7, #16
    37e2:	46bd      	mov	sp, r7
    37e4:	bd80      	pop	{r7, pc}
    37e6:	bf00      	nop

000037e8 <xTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
{
    37e8:	b480      	push	{r7}
    37ea:	b085      	sub	sp, #20
    37ec:	af00      	add	r7, sp, #0
    37ee:	6078      	str	r0, [r7, #4]
    portBASE_TYPE xReturn = pdFALSE;
    37f0:	2300      	movs	r3, #0
    37f2:	60fb      	str	r3, [r7, #12]
    const tskTCB * const pxTCB = ( tskTCB * ) xTask;
    37f4:	687b      	ldr	r3, [r7, #4]
    37f6:	60bb      	str	r3, [r7, #8]
    /* It does not make sense to check if the calling task is suspended. */
    configASSERT( xTask );

    /* Is the task we are attempting to resume actually in the
       suspended list? */
    if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    37f8:	68bb      	ldr	r3, [r7, #8]
    37fa:	695a      	ldr	r2, [r3, #20]
    37fc:	f240 137c 	movw	r3, #380	; 0x17c
    3800:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3804:	429a      	cmp	r2, r3
    3806:	d10d      	bne.n	3824 <xTaskIsTaskSuspended+0x3c>
    {
        /* Has the task already been resumed from within an ISR? */
        if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
    3808:	68bb      	ldr	r3, [r7, #8]
    380a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    380c:	f240 1350 	movw	r3, #336	; 0x150
    3810:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3814:	429a      	cmp	r2, r3
    3816:	d005      	beq.n	3824 <xTaskIsTaskSuspended+0x3c>
        {
            /* Is it in the suspended list because it is in the
               Suspended state?  It is possible to be in the suspended
               list because it is blocked on a task with no timeout
               specified. */
            if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
    3818:	68bb      	ldr	r3, [r7, #8]
    381a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    381c:	2b00      	cmp	r3, #0
    381e:	d101      	bne.n	3824 <xTaskIsTaskSuspended+0x3c>
            {
                xReturn = pdTRUE;
    3820:	2301      	movs	r3, #1
    3822:	60fb      	str	r3, [r7, #12]
            }
        }
    }

    return xReturn;
    3824:	68fb      	ldr	r3, [r7, #12]
}
    3826:	4618      	mov	r0, r3
    3828:	3714      	adds	r7, #20
    382a:	46bd      	mov	sp, r7
    382c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3830:	4770      	bx	lr
    3832:	bf00      	nop

00003834 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

void vTaskResume( xTaskHandle pxTaskToResume )
{
    3834:	b580      	push	{r7, lr}
    3836:	b084      	sub	sp, #16
    3838:	af00      	add	r7, sp, #0
    383a:	6078      	str	r0, [r7, #4]
    /* It does not make sense to resume the calling task. */
    configASSERT( pxTaskToResume );

    /* Remove the task from whichever list it is currently in, and place
       it in the ready list. */
    pxTCB = ( tskTCB * ) pxTaskToResume;
    383c:	687b      	ldr	r3, [r7, #4]
    383e:	60fb      	str	r3, [r7, #12]

    /* The parameter cannot be NULL as it is impossible to resume the
       currently executing task. */
    if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    3840:	68fb      	ldr	r3, [r7, #12]
    3842:	2b00      	cmp	r3, #0
    3844:	d043      	beq.n	38ce <vTaskResume+0x9a>
    3846:	f240 03b8 	movw	r3, #184	; 0xb8
    384a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    384e:	681b      	ldr	r3, [r3, #0]
    3850:	68fa      	ldr	r2, [r7, #12]
    3852:	429a      	cmp	r2, r3
    3854:	d03b      	beq.n	38ce <vTaskResume+0x9a>
    {
        taskENTER_CRITICAL();
    3856:	f000 fe89 	bl	456c <vPortEnterCritical>
        {
            if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    385a:	68f8      	ldr	r0, [r7, #12]
    385c:	f7ff ffc4 	bl	37e8 <xTaskIsTaskSuspended>
    3860:	4603      	mov	r3, r0
    3862:	2b01      	cmp	r3, #1
    3864:	d131      	bne.n	38ca <vTaskResume+0x96>
            {
                traceTASK_RESUME( pxTCB );

                /* As we are in a critical section we can access the ready
                   lists even if the scheduler is suspended. */
                vListRemove(  &( pxTCB->xGenericListItem ) );
    3866:	68fb      	ldr	r3, [r7, #12]
    3868:	3304      	adds	r3, #4
    386a:	4618      	mov	r0, r3
    386c:	f7ff f900 	bl	2a70 <vListRemove>
                prvAddTaskToReadyQueue( pxTCB );
    3870:	68fb      	ldr	r3, [r7, #12]
    3872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3874:	f240 139c 	movw	r3, #412	; 0x19c
    3878:	f2c2 0300 	movt	r3, #8192	; 0x2000
    387c:	681b      	ldr	r3, [r3, #0]
    387e:	429a      	cmp	r2, r3
    3880:	d906      	bls.n	3890 <vTaskResume+0x5c>
    3882:	68fb      	ldr	r3, [r7, #12]
    3884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3886:	f240 139c 	movw	r3, #412	; 0x19c
    388a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    388e:	601a      	str	r2, [r3, #0]
    3890:	68fb      	ldr	r3, [r7, #12]
    3892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3894:	4613      	mov	r3, r2
    3896:	009b      	lsls	r3, r3, #2
    3898:	4413      	add	r3, r2
    389a:	009b      	lsls	r3, r3, #2
    389c:	f240 02bc 	movw	r2, #188	; 0xbc
    38a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    38a4:	441a      	add	r2, r3
    38a6:	68fb      	ldr	r3, [r7, #12]
    38a8:	3304      	adds	r3, #4
    38aa:	4610      	mov	r0, r2
    38ac:	4619      	mov	r1, r3
    38ae:	f7ff f87f 	bl	29b0 <vListInsertEnd>

                /* We may have just resumed a higher priority task. */
                if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    38b2:	68fb      	ldr	r3, [r7, #12]
    38b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    38b6:	f240 03b8 	movw	r3, #184	; 0xb8
    38ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    38be:	681b      	ldr	r3, [r3, #0]
    38c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    38c2:	429a      	cmp	r2, r3
    38c4:	d301      	bcc.n	38ca <vTaskResume+0x96>
                {
                    /* This yield may not cause the task just resumed to run, but
                       will leave the lists in the correct state for the next yield. */
                    portYIELD_WITHIN_API();
    38c6:	f000 fe43 	bl	4550 <vPortYieldFromISR>
                }
            }
        }
        taskEXIT_CRITICAL();
    38ca:	f000 fe65 	bl	4598 <vPortExitCritical>
    }
}
    38ce:	3710      	adds	r7, #16
    38d0:	46bd      	mov	sp, r7
    38d2:	bd80      	pop	{r7, pc}

000038d4 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
{
    38d4:	b580      	push	{r7, lr}
    38d6:	b086      	sub	sp, #24
    38d8:	af00      	add	r7, sp, #0
    38da:	6078      	str	r0, [r7, #4]
    portBASE_TYPE xYieldRequired = pdFALSE;
    38dc:	2300      	movs	r3, #0
    38de:	617b      	str	r3, [r7, #20]
    tskTCB *pxTCB;
    unsigned portBASE_TYPE uxSavedInterruptStatus;

    configASSERT( pxTaskToResume );

    pxTCB = ( tskTCB * ) pxTaskToResume;
    38e0:	687b      	ldr	r3, [r7, #4]
    38e2:	613b      	str	r3, [r7, #16]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    38e4:	2300      	movs	r3, #0
    38e6:	60fb      	str	r3, [r7, #12]
    38e8:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    38ec:	f380 8811 	msr	BASEPRI, r0
    {
        if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    38f0:	6938      	ldr	r0, [r7, #16]
    38f2:	f7ff ff79 	bl	37e8 <xTaskIsTaskSuspended>
    38f6:	4603      	mov	r3, r0
    38f8:	2b01      	cmp	r3, #1
    38fa:	d144      	bne.n	3986 <xTaskResumeFromISR+0xb2>
        {
            traceTASK_RESUME_FROM_ISR( pxTCB );

            if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    38fc:	f240 13a4 	movw	r3, #420	; 0x1a4
    3900:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3904:	681b      	ldr	r3, [r3, #0]
    3906:	2b00      	cmp	r3, #0
    3908:	d134      	bne.n	3974 <xTaskResumeFromISR+0xa0>
            {
                xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
    390a:	693b      	ldr	r3, [r7, #16]
    390c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    390e:	f240 03b8 	movw	r3, #184	; 0xb8
    3912:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3916:	681b      	ldr	r3, [r3, #0]
    3918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    391a:	429a      	cmp	r2, r3
    391c:	bf34      	ite	cc
    391e:	2300      	movcc	r3, #0
    3920:	2301      	movcs	r3, #1
    3922:	b2db      	uxtb	r3, r3
    3924:	617b      	str	r3, [r7, #20]
                vListRemove(  &( pxTCB->xGenericListItem ) );
    3926:	693b      	ldr	r3, [r7, #16]
    3928:	3304      	adds	r3, #4
    392a:	4618      	mov	r0, r3
    392c:	f7ff f8a0 	bl	2a70 <vListRemove>
                prvAddTaskToReadyQueue( pxTCB );
    3930:	693b      	ldr	r3, [r7, #16]
    3932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3934:	f240 139c 	movw	r3, #412	; 0x19c
    3938:	f2c2 0300 	movt	r3, #8192	; 0x2000
    393c:	681b      	ldr	r3, [r3, #0]
    393e:	429a      	cmp	r2, r3
    3940:	d906      	bls.n	3950 <xTaskResumeFromISR+0x7c>
    3942:	693b      	ldr	r3, [r7, #16]
    3944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3946:	f240 139c 	movw	r3, #412	; 0x19c
    394a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    394e:	601a      	str	r2, [r3, #0]
    3950:	693b      	ldr	r3, [r7, #16]
    3952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3954:	4613      	mov	r3, r2
    3956:	009b      	lsls	r3, r3, #2
    3958:	4413      	add	r3, r2
    395a:	009b      	lsls	r3, r3, #2
    395c:	f240 02bc 	movw	r2, #188	; 0xbc
    3960:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3964:	441a      	add	r2, r3
    3966:	693b      	ldr	r3, [r7, #16]
    3968:	3304      	adds	r3, #4
    396a:	4610      	mov	r0, r2
    396c:	4619      	mov	r1, r3
    396e:	f7ff f81f 	bl	29b0 <vListInsertEnd>
    3972:	e008      	b.n	3986 <xTaskResumeFromISR+0xb2>
            else
            {
                /* We cannot access the delayed or ready lists, so will hold this
                   task pending until the scheduler is resumed, at which point a
                   yield will be performed if necessary. */
                vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    3974:	693b      	ldr	r3, [r7, #16]
    3976:	3318      	adds	r3, #24
    3978:	f240 1050 	movw	r0, #336	; 0x150
    397c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3980:	4619      	mov	r1, r3
    3982:	f7ff f815 	bl	29b0 <vListInsertEnd>
            }
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    3986:	f04f 0000 	mov.w	r0, #0
    398a:	f380 8811 	msr	BASEPRI, r0

    return xYieldRequired;
    398e:	697b      	ldr	r3, [r7, #20]
}
    3990:	4618      	mov	r0, r3
    3992:	3718      	adds	r7, #24
    3994:	46bd      	mov	sp, r7
    3996:	bd80      	pop	{r7, pc}

00003998 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    3998:	b580      	push	{r7, lr}
    399a:	b086      	sub	sp, #24
    399c:	af04      	add	r7, sp, #16
        xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
    }
#else
    {
        /* Create the idle task without storing its handle. */
        xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
    399e:	2300      	movs	r3, #0
    39a0:	9300      	str	r3, [sp, #0]
    39a2:	2300      	movs	r3, #0
    39a4:	9301      	str	r3, [sp, #4]
    39a6:	2300      	movs	r3, #0
    39a8:	9302      	str	r3, [sp, #8]
    39aa:	2300      	movs	r3, #0
    39ac:	9303      	str	r3, [sp, #12]
    39ae:	f244 0051 	movw	r0, #16465	; 0x4051
    39b2:	f2c0 0000 	movt	r0, #0
    39b6:	f246 51c0 	movw	r1, #26048	; 0x65c0
    39ba:	f2c0 0100 	movt	r1, #0
    39be:	2280      	movs	r2, #128	; 0x80
    39c0:	2300      	movs	r3, #0
    39c2:	f7ff fc6b 	bl	329c <xTaskGenericCreate>
    39c6:	6078      	str	r0, [r7, #4]
            xReturn = xTimerCreateTimerTask();
        }
    }
#endif

    if( xReturn == pdPASS )
    39c8:	687b      	ldr	r3, [r7, #4]
    39ca:	2b01      	cmp	r3, #1
    39cc:	d111      	bne.n	39f2 <vTaskStartScheduler+0x5a>
           so interrupts will automatically get re-enabled when the first task
           starts to run.

           STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
           DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
        portDISABLE_INTERRUPTS();
    39ce:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    39d2:	f380 8811 	msr	BASEPRI, r0

        xSchedulerRunning = pdTRUE;
    39d6:	f240 13a0 	movw	r3, #416	; 0x1a0
    39da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    39de:	2201      	movs	r2, #1
    39e0:	601a      	str	r2, [r3, #0]
        xTickCount = ( portTickType ) 0U;
    39e2:	f240 1394 	movw	r3, #404	; 0x194
    39e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    39ea:	2200      	movs	r2, #0
    39ec:	601a      	str	r2, [r3, #0]
           the run time counter time base. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        /* Setting up the timer tick is hardware specific and thus in the
           portable interface. */
        if( xPortStartScheduler() != pdFALSE )
    39ee:	f000 fd81 	bl	44f4 <xPortStartScheduler>
        }
    }

    /* This line will only be reached if the kernel could not be started. */
    configASSERT( xReturn );
}
    39f2:	3708      	adds	r7, #8
    39f4:	46bd      	mov	sp, r7
    39f6:	bd80      	pop	{r7, pc}

000039f8 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    39f8:	b580      	push	{r7, lr}
    39fa:	af00      	add	r7, sp, #0
    /* Stop the scheduler interrupts and call the portable scheduler end
       routine so the original ISRs can be restored if necessary.  The port
       layer must ensure interrupts enable	bit is left in the correct state. */
    portDISABLE_INTERRUPTS();
    39fc:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    3a00:	f380 8811 	msr	BASEPRI, r0
    xSchedulerRunning = pdFALSE;
    3a04:	f240 13a0 	movw	r3, #416	; 0x1a0
    3a08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3a0c:	2200      	movs	r2, #0
    3a0e:	601a      	str	r2, [r3, #0]
    vPortEndScheduler();
    3a10:	f000 fd98 	bl	4544 <vPortEndScheduler>
}
    3a14:	bd80      	pop	{r7, pc}
    3a16:	bf00      	nop

00003a18 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    3a18:	b480      	push	{r7}
    3a1a:	af00      	add	r7, sp, #0
    /* A critical section is not required as the variable is of type
       portBASE_TYPE. */
    ++uxSchedulerSuspended;
    3a1c:	f240 13a4 	movw	r3, #420	; 0x1a4
    3a20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3a24:	681b      	ldr	r3, [r3, #0]
    3a26:	1c5a      	adds	r2, r3, #1
    3a28:	f240 13a4 	movw	r3, #420	; 0x1a4
    3a2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3a30:	601a      	str	r2, [r3, #0]
}
    3a32:	46bd      	mov	sp, r7
    3a34:	f85d 7b04 	ldr.w	r7, [sp], #4
    3a38:	4770      	bx	lr
    3a3a:	bf00      	nop

00003a3c <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    3a3c:	b590      	push	{r4, r7, lr}
    3a3e:	b083      	sub	sp, #12
    3a40:	af00      	add	r7, sp, #0
    register tskTCB *pxTCB;
    signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    3a42:	2300      	movs	r3, #0
    3a44:	607b      	str	r3, [r7, #4]
    /* It is possible that an ISR caused a task to be removed from an event
       list while the scheduler was suspended.  If this was the case then the
       removed task will have been added to the xPendingReadyList.  Once the
       scheduler has been resumed it is safe to move all the pending ready
       tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
    3a46:	f000 fd91 	bl	456c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
    3a4a:	f240 13a4 	movw	r3, #420	; 0x1a4
    3a4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3a52:	681b      	ldr	r3, [r3, #0]
    3a54:	1e5a      	subs	r2, r3, #1
    3a56:	f240 13a4 	movw	r3, #420	; 0x1a4
    3a5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3a5e:	601a      	str	r2, [r3, #0]

        if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    3a60:	f240 13a4 	movw	r3, #420	; 0x1a4
    3a64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3a68:	681b      	ldr	r3, [r3, #0]
    3a6a:	2b00      	cmp	r3, #0
    3a6c:	d177      	bne.n	3b5e <xTaskResumeAll+0x122>
        {
            if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    3a6e:	f240 1390 	movw	r3, #400	; 0x190
    3a72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3a76:	681b      	ldr	r3, [r3, #0]
    3a78:	2b00      	cmp	r3, #0
    3a7a:	d070      	beq.n	3b5e <xTaskResumeAll+0x122>
            {
                portBASE_TYPE xYieldRequired = pdFALSE;
    3a7c:	2300      	movs	r3, #0
    3a7e:	603b      	str	r3, [r7, #0]

                /* Move any readied tasks from the pending list into the
                   appropriate ready list. */
                while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    3a80:	e036      	b.n	3af0 <xTaskResumeAll+0xb4>
                {
                    pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    3a82:	f240 1350 	movw	r3, #336	; 0x150
    3a86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3a8a:	68db      	ldr	r3, [r3, #12]
    3a8c:	68dc      	ldr	r4, [r3, #12]
                    vListRemove( &( pxTCB->xEventListItem ) );
    3a8e:	f104 0318 	add.w	r3, r4, #24
    3a92:	4618      	mov	r0, r3
    3a94:	f7fe ffec 	bl	2a70 <vListRemove>
                    vListRemove( &( pxTCB->xGenericListItem ) );
    3a98:	1d23      	adds	r3, r4, #4
    3a9a:	4618      	mov	r0, r3
    3a9c:	f7fe ffe8 	bl	2a70 <vListRemove>
                    prvAddTaskToReadyQueue( pxTCB );
    3aa0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3aa2:	f240 139c 	movw	r3, #412	; 0x19c
    3aa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3aaa:	681b      	ldr	r3, [r3, #0]
    3aac:	429a      	cmp	r2, r3
    3aae:	d905      	bls.n	3abc <xTaskResumeAll+0x80>
    3ab0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3ab2:	f240 139c 	movw	r3, #412	; 0x19c
    3ab6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3aba:	601a      	str	r2, [r3, #0]
    3abc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3abe:	4613      	mov	r3, r2
    3ac0:	009b      	lsls	r3, r3, #2
    3ac2:	4413      	add	r3, r2
    3ac4:	009b      	lsls	r3, r3, #2
    3ac6:	f240 02bc 	movw	r2, #188	; 0xbc
    3aca:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3ace:	441a      	add	r2, r3
    3ad0:	1d23      	adds	r3, r4, #4
    3ad2:	4610      	mov	r0, r2
    3ad4:	4619      	mov	r1, r3
    3ad6:	f7fe ff6b 	bl	29b0 <vListInsertEnd>

                    /* If we have moved a task that has a priority higher than
                       the current task then we should yield. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3ada:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3adc:	f240 03b8 	movw	r3, #184	; 0xb8
    3ae0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ae4:	681b      	ldr	r3, [r3, #0]
    3ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3ae8:	429a      	cmp	r2, r3
    3aea:	d301      	bcc.n	3af0 <xTaskResumeAll+0xb4>
                    {
                        xYieldRequired = pdTRUE;
    3aec:	2301      	movs	r3, #1
    3aee:	603b      	str	r3, [r7, #0]
            {
                portBASE_TYPE xYieldRequired = pdFALSE;

                /* Move any readied tasks from the pending list into the
                   appropriate ready list. */
                while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    3af0:	f240 1350 	movw	r3, #336	; 0x150
    3af4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3af8:	681b      	ldr	r3, [r3, #0]
    3afa:	2b00      	cmp	r3, #0
    3afc:	d1c1      	bne.n	3a82 <xTaskResumeAll+0x46>
                }

                /* If any ticks occurred while the scheduler was suspended then
                   they should be processed now.  This ensures the tick count does not
                   slip, and that any delayed tasks are resumed at the correct time. */
                if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    3afe:	f240 13a8 	movw	r3, #424	; 0x1a8
    3b02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b06:	681b      	ldr	r3, [r3, #0]
    3b08:	2b00      	cmp	r3, #0
    3b0a:	d014      	beq.n	3b36 <xTaskResumeAll+0xfa>
                {
                    while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    3b0c:	e00c      	b.n	3b28 <xTaskResumeAll+0xec>
                    {
                        vTaskIncrementTick();
    3b0e:	f000 f865 	bl	3bdc <vTaskIncrementTick>
                        --uxMissedTicks;
    3b12:	f240 13a8 	movw	r3, #424	; 0x1a8
    3b16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b1a:	681b      	ldr	r3, [r3, #0]
    3b1c:	1e5a      	subs	r2, r3, #1
    3b1e:	f240 13a8 	movw	r3, #424	; 0x1a8
    3b22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b26:	601a      	str	r2, [r3, #0]
                /* If any ticks occurred while the scheduler was suspended then
                   they should be processed now.  This ensures the tick count does not
                   slip, and that any delayed tasks are resumed at the correct time. */
                if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
                {
                    while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    3b28:	f240 13a8 	movw	r3, #424	; 0x1a8
    3b2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b30:	681b      	ldr	r3, [r3, #0]
    3b32:	2b00      	cmp	r3, #0
    3b34:	d1eb      	bne.n	3b0e <xTaskResumeAll+0xd2>
                        xYieldRequired = pdTRUE;
                    }
#endif
                }

                if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    3b36:	683b      	ldr	r3, [r7, #0]
    3b38:	2b01      	cmp	r3, #1
    3b3a:	d006      	beq.n	3b4a <xTaskResumeAll+0x10e>
    3b3c:	f240 13ac 	movw	r3, #428	; 0x1ac
    3b40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b44:	681b      	ldr	r3, [r3, #0]
    3b46:	2b01      	cmp	r3, #1
    3b48:	d109      	bne.n	3b5e <xTaskResumeAll+0x122>
                {
                    xAlreadyYielded = pdTRUE;
    3b4a:	2301      	movs	r3, #1
    3b4c:	607b      	str	r3, [r7, #4]
                    xMissedYield = pdFALSE;
    3b4e:	f240 13ac 	movw	r3, #428	; 0x1ac
    3b52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b56:	2200      	movs	r2, #0
    3b58:	601a      	str	r2, [r3, #0]
                    portYIELD_WITHIN_API();
    3b5a:	f000 fcf9 	bl	4550 <vPortYieldFromISR>
                }
            }
        }
    }
    taskEXIT_CRITICAL();
    3b5e:	f000 fd1b 	bl	4598 <vPortExitCritical>

    return xAlreadyYielded;
    3b62:	687b      	ldr	r3, [r7, #4]
}
    3b64:	4618      	mov	r0, r3
    3b66:	370c      	adds	r7, #12
    3b68:	46bd      	mov	sp, r7
    3b6a:	bd90      	pop	{r4, r7, pc}

00003b6c <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
    3b6c:	b580      	push	{r7, lr}
    3b6e:	b082      	sub	sp, #8
    3b70:	af00      	add	r7, sp, #0
    portTickType xTicks;

    /* Critical section required if running on a 16 bit processor. */
    taskENTER_CRITICAL();
    3b72:	f000 fcfb 	bl	456c <vPortEnterCritical>
    {
        xTicks = xTickCount;
    3b76:	f240 1394 	movw	r3, #404	; 0x194
    3b7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b7e:	681b      	ldr	r3, [r3, #0]
    3b80:	607b      	str	r3, [r7, #4]
    }
    taskEXIT_CRITICAL();
    3b82:	f000 fd09 	bl	4598 <vPortExitCritical>

    return xTicks;
    3b86:	687b      	ldr	r3, [r7, #4]
}
    3b88:	4618      	mov	r0, r3
    3b8a:	3708      	adds	r7, #8
    3b8c:	46bd      	mov	sp, r7
    3b8e:	bd80      	pop	{r7, pc}

00003b90 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
    3b90:	b480      	push	{r7}
    3b92:	b083      	sub	sp, #12
    3b94:	af00      	add	r7, sp, #0
    portTickType xReturn;
    unsigned portBASE_TYPE uxSavedInterruptStatus;

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    3b96:	2300      	movs	r3, #0
    3b98:	607b      	str	r3, [r7, #4]
    3b9a:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    3b9e:	f380 8811 	msr	BASEPRI, r0
    xReturn = xTickCount;
    3ba2:	f240 1394 	movw	r3, #404	; 0x194
    3ba6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3baa:	681b      	ldr	r3, [r3, #0]
    3bac:	603b      	str	r3, [r7, #0]
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    3bae:	f04f 0000 	mov.w	r0, #0
    3bb2:	f380 8811 	msr	BASEPRI, r0

    return xReturn;
    3bb6:	683b      	ldr	r3, [r7, #0]
}
    3bb8:	4618      	mov	r0, r3
    3bba:	370c      	adds	r7, #12
    3bbc:	46bd      	mov	sp, r7
    3bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
    3bc2:	4770      	bx	lr

00003bc4 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
    3bc4:	b480      	push	{r7}
    3bc6:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
       portBASE_TYPE. */
    return uxCurrentNumberOfTasks;
    3bc8:	f240 1390 	movw	r3, #400	; 0x190
    3bcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3bd0:	681b      	ldr	r3, [r3, #0]
}
    3bd2:	4618      	mov	r0, r3
    3bd4:	46bd      	mov	sp, r7
    3bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
    3bda:	4770      	bx	lr

00003bdc <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    3bdc:	b580      	push	{r7, lr}
    3bde:	b084      	sub	sp, #16
    3be0:	af00      	add	r7, sp, #0
    tskTCB * pxTCB;

    /* Called by the portable layer each time a tick interrupt occurs.
       Increments the tick then checks to see if the new tick value will cause any
       tasks to be unblocked. */
    if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    3be2:	f240 13a4 	movw	r3, #420	; 0x1a4
    3be6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3bea:	681b      	ldr	r3, [r3, #0]
    3bec:	2b00      	cmp	r3, #0
    3bee:	f040 80b9 	bne.w	3d64 <vTaskIncrementTick+0x188>
    {
        ++xTickCount;
    3bf2:	f240 1394 	movw	r3, #404	; 0x194
    3bf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3bfa:	681b      	ldr	r3, [r3, #0]
    3bfc:	1c5a      	adds	r2, r3, #1
    3bfe:	f240 1394 	movw	r3, #404	; 0x194
    3c02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c06:	601a      	str	r2, [r3, #0]
        if( xTickCount == ( portTickType ) 0U )
    3c08:	f240 1394 	movw	r3, #404	; 0x194
    3c0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c10:	681b      	ldr	r3, [r3, #0]
    3c12:	2b00      	cmp	r3, #0
    3c14:	d13f      	bne.n	3c96 <vTaskIncrementTick+0xba>
            /* Tick count has overflowed so we need to swap the delay lists.
               If there are any items in pxDelayedTaskList here then there is
               an error! */
            configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );

            pxTemp = pxDelayedTaskList;
    3c16:	f240 1348 	movw	r3, #328	; 0x148
    3c1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c1e:	681b      	ldr	r3, [r3, #0]
    3c20:	60fb      	str	r3, [r7, #12]
            pxDelayedTaskList = pxOverflowDelayedTaskList;
    3c22:	f240 134c 	movw	r3, #332	; 0x14c
    3c26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c2a:	681a      	ldr	r2, [r3, #0]
    3c2c:	f240 1348 	movw	r3, #328	; 0x148
    3c30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c34:	601a      	str	r2, [r3, #0]
            pxOverflowDelayedTaskList = pxTemp;
    3c36:	f240 134c 	movw	r3, #332	; 0x14c
    3c3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c3e:	68fa      	ldr	r2, [r7, #12]
    3c40:	601a      	str	r2, [r3, #0]
            xNumOfOverflows++;
    3c42:	f240 13b0 	movw	r3, #432	; 0x1b0
    3c46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c4a:	681b      	ldr	r3, [r3, #0]
    3c4c:	1c5a      	adds	r2, r3, #1
    3c4e:	f240 13b0 	movw	r3, #432	; 0x1b0
    3c52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c56:	601a      	str	r2, [r3, #0]

            if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    3c58:	f240 1348 	movw	r3, #328	; 0x148
    3c5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c60:	681b      	ldr	r3, [r3, #0]
    3c62:	681b      	ldr	r3, [r3, #0]
    3c64:	2b00      	cmp	r3, #0
    3c66:	d107      	bne.n	3c78 <vTaskIncrementTick+0x9c>
                /* The new current delayed list is empty.  Set
                   xNextTaskUnblockTime to the maximum possible value so it is
                   extremely unlikely that the
                   if( xTickCount >= xNextTaskUnblockTime ) test will pass until
                   there is an item in the delayed list. */
                xNextTaskUnblockTime = portMAX_DELAY;
    3c68:	f240 0328 	movw	r3, #40	; 0x28
    3c6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c70:	f04f 32ff 	mov.w	r2, #4294967295
    3c74:	601a      	str	r2, [r3, #0]
    3c76:	e00e      	b.n	3c96 <vTaskIncrementTick+0xba>
            {
                /* The new current delayed list is not empty, get the value of
                   the item at the head of the delayed list.  This is the time at
                   which the task at the head of the delayed list should be removed
                   from the Blocked state. */
                pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    3c78:	f240 1348 	movw	r3, #328	; 0x148
    3c7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c80:	681b      	ldr	r3, [r3, #0]
    3c82:	68db      	ldr	r3, [r3, #12]
    3c84:	68db      	ldr	r3, [r3, #12]
    3c86:	60bb      	str	r3, [r7, #8]
                xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    3c88:	68bb      	ldr	r3, [r7, #8]
    3c8a:	685a      	ldr	r2, [r3, #4]
    3c8c:	f240 0328 	movw	r3, #40	; 0x28
    3c90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c94:	601a      	str	r2, [r3, #0]
            }
        }

        /* See if this tick has made a timeout expire. */
        prvCheckDelayedTasks();
    3c96:	f240 1394 	movw	r3, #404	; 0x194
    3c9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c9e:	681a      	ldr	r2, [r3, #0]
    3ca0:	f240 0328 	movw	r3, #40	; 0x28
    3ca4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ca8:	681b      	ldr	r3, [r3, #0]
    3caa:	429a      	cmp	r2, r3
    3cac:	d359      	bcc.n	3d62 <vTaskIncrementTick+0x186>
    3cae:	f240 1348 	movw	r3, #328	; 0x148
    3cb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3cb6:	681b      	ldr	r3, [r3, #0]
    3cb8:	681b      	ldr	r3, [r3, #0]
    3cba:	2b00      	cmp	r3, #0
    3cbc:	d107      	bne.n	3cce <vTaskIncrementTick+0xf2>
    3cbe:	f240 0328 	movw	r3, #40	; 0x28
    3cc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3cc6:	f04f 32ff 	mov.w	r2, #4294967295
    3cca:	601a      	str	r2, [r3, #0]
    3ccc:	e049      	b.n	3d62 <vTaskIncrementTick+0x186>
    3cce:	f240 1348 	movw	r3, #328	; 0x148
    3cd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3cd6:	681b      	ldr	r3, [r3, #0]
    3cd8:	68db      	ldr	r3, [r3, #12]
    3cda:	68db      	ldr	r3, [r3, #12]
    3cdc:	60bb      	str	r3, [r7, #8]
    3cde:	68bb      	ldr	r3, [r7, #8]
    3ce0:	685b      	ldr	r3, [r3, #4]
    3ce2:	607b      	str	r3, [r7, #4]
    3ce4:	f240 1394 	movw	r3, #404	; 0x194
    3ce8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3cec:	681a      	ldr	r2, [r3, #0]
    3cee:	687b      	ldr	r3, [r7, #4]
    3cf0:	429a      	cmp	r2, r3
    3cf2:	d206      	bcs.n	3d02 <vTaskIncrementTick+0x126>
    3cf4:	f240 0328 	movw	r3, #40	; 0x28
    3cf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3cfc:	687a      	ldr	r2, [r7, #4]
    3cfe:	601a      	str	r2, [r3, #0]
    3d00:	e02f      	b.n	3d62 <vTaskIncrementTick+0x186>
    3d02:	68bb      	ldr	r3, [r7, #8]
    3d04:	3304      	adds	r3, #4
    3d06:	4618      	mov	r0, r3
    3d08:	f7fe feb2 	bl	2a70 <vListRemove>
    3d0c:	68bb      	ldr	r3, [r7, #8]
    3d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3d10:	2b00      	cmp	r3, #0
    3d12:	d004      	beq.n	3d1e <vTaskIncrementTick+0x142>
    3d14:	68bb      	ldr	r3, [r7, #8]
    3d16:	3318      	adds	r3, #24
    3d18:	4618      	mov	r0, r3
    3d1a:	f7fe fea9 	bl	2a70 <vListRemove>
    3d1e:	68bb      	ldr	r3, [r7, #8]
    3d20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3d22:	f240 139c 	movw	r3, #412	; 0x19c
    3d26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d2a:	681b      	ldr	r3, [r3, #0]
    3d2c:	429a      	cmp	r2, r3
    3d2e:	d906      	bls.n	3d3e <vTaskIncrementTick+0x162>
    3d30:	68bb      	ldr	r3, [r7, #8]
    3d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3d34:	f240 139c 	movw	r3, #412	; 0x19c
    3d38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d3c:	601a      	str	r2, [r3, #0]
    3d3e:	68bb      	ldr	r3, [r7, #8]
    3d40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3d42:	4613      	mov	r3, r2
    3d44:	009b      	lsls	r3, r3, #2
    3d46:	4413      	add	r3, r2
    3d48:	009b      	lsls	r3, r3, #2
    3d4a:	f240 02bc 	movw	r2, #188	; 0xbc
    3d4e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3d52:	441a      	add	r2, r3
    3d54:	68bb      	ldr	r3, [r7, #8]
    3d56:	3304      	adds	r3, #4
    3d58:	4610      	mov	r0, r2
    3d5a:	4619      	mov	r1, r3
    3d5c:	f7fe fe28 	bl	29b0 <vListInsertEnd>
    3d60:	e7a5      	b.n	3cae <vTaskIncrementTick+0xd2>
    3d62:	e00c      	b.n	3d7e <vTaskIncrementTick+0x1a2>
    }
    else
    {
        ++uxMissedTicks;
    3d64:	f240 13a8 	movw	r3, #424	; 0x1a8
    3d68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d6c:	681b      	ldr	r3, [r3, #0]
    3d6e:	1c5a      	adds	r2, r3, #1
    3d70:	f240 13a8 	movw	r3, #424	; 0x1a8
    3d74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d78:	601a      	str	r2, [r3, #0]

        /* The tick hook gets called at regular intervals, even if the
           scheduler is locked. */
#if ( configUSE_TICK_HOOK == 1 )
        {
            vApplicationTickHook();
    3d7a:	f002 fb1f 	bl	63bc <vApplicationTickHook>

#if ( configUSE_TICK_HOOK == 1 )
    {
        /* Guard against the tick hook being called when the missed tick
           count is being unwound (when the scheduler is being unlocked. */
        if( uxMissedTicks == ( unsigned portBASE_TYPE ) 0U )
    3d7e:	f240 13a8 	movw	r3, #424	; 0x1a8
    3d82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d86:	681b      	ldr	r3, [r3, #0]
    3d88:	2b00      	cmp	r3, #0
    3d8a:	d101      	bne.n	3d90 <vTaskIncrementTick+0x1b4>
        {
            vApplicationTickHook();
    3d8c:	f002 fb16 	bl	63bc <vApplicationTickHook>
        }
    }
#endif

    traceTASK_INCREMENT_TICK( xTickCount );
}
    3d90:	3710      	adds	r7, #16
    3d92:	46bd      	mov	sp, r7
    3d94:	bd80      	pop	{r7, pc}
    3d96:	bf00      	nop

00003d98 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    3d98:	b580      	push	{r7, lr}
    3d9a:	b082      	sub	sp, #8
    3d9c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    3d9e:	f240 13a4 	movw	r3, #420	; 0x1a4
    3da2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3da6:	681b      	ldr	r3, [r3, #0]
    3da8:	2b00      	cmp	r3, #0
    3daa:	d006      	beq.n	3dba <vTaskSwitchContext+0x22>
    {
        /* The scheduler is currently suspended - do not allow a context
           switch. */
        xMissedYield = pdTRUE;
    3dac:	f240 13ac 	movw	r3, #428	; 0x1ac
    3db0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3db4:	2201      	movs	r2, #1
    3db6:	601a      	str	r2, [r3, #0]
    3db8:	e047      	b.n	3e4a <vTaskSwitchContext+0xb2>
    }
    else
    {
        traceTASK_SWITCHED_OUT();
    3dba:	f002 faf9 	bl	63b0 <myTraceSwitchedOut>

        taskFIRST_CHECK_FOR_STACK_OVERFLOW();
        taskSECOND_CHECK_FOR_STACK_OVERFLOW();

        /* Find the highest priority queue that contains ready tasks. */
        while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    3dbe:	e00a      	b.n	3dd6 <vTaskSwitchContext+0x3e>
        {
            configASSERT( uxTopReadyPriority );
            --uxTopReadyPriority;
    3dc0:	f240 139c 	movw	r3, #412	; 0x19c
    3dc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3dc8:	681b      	ldr	r3, [r3, #0]
    3dca:	1e5a      	subs	r2, r3, #1
    3dcc:	f240 139c 	movw	r3, #412	; 0x19c
    3dd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3dd4:	601a      	str	r2, [r3, #0]

        taskFIRST_CHECK_FOR_STACK_OVERFLOW();
        taskSECOND_CHECK_FOR_STACK_OVERFLOW();

        /* Find the highest priority queue that contains ready tasks. */
        while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    3dd6:	f240 139c 	movw	r3, #412	; 0x19c
    3dda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3dde:	6819      	ldr	r1, [r3, #0]
    3de0:	f240 02bc 	movw	r2, #188	; 0xbc
    3de4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3de8:	460b      	mov	r3, r1
    3dea:	009b      	lsls	r3, r3, #2
    3dec:	440b      	add	r3, r1
    3dee:	009b      	lsls	r3, r3, #2
    3df0:	4413      	add	r3, r2
    3df2:	681b      	ldr	r3, [r3, #0]
    3df4:	2b00      	cmp	r3, #0
    3df6:	d0e3      	beq.n	3dc0 <vTaskSwitchContext+0x28>
            --uxTopReadyPriority;
        }

        /* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
           same priority get an equal share of the processor time. */
        listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    3df8:	f240 139c 	movw	r3, #412	; 0x19c
    3dfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e00:	681a      	ldr	r2, [r3, #0]
    3e02:	4613      	mov	r3, r2
    3e04:	009b      	lsls	r3, r3, #2
    3e06:	4413      	add	r3, r2
    3e08:	009b      	lsls	r3, r3, #2
    3e0a:	f240 02bc 	movw	r2, #188	; 0xbc
    3e0e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3e12:	4413      	add	r3, r2
    3e14:	607b      	str	r3, [r7, #4]
    3e16:	687b      	ldr	r3, [r7, #4]
    3e18:	685b      	ldr	r3, [r3, #4]
    3e1a:	685a      	ldr	r2, [r3, #4]
    3e1c:	687b      	ldr	r3, [r7, #4]
    3e1e:	605a      	str	r2, [r3, #4]
    3e20:	687b      	ldr	r3, [r7, #4]
    3e22:	685a      	ldr	r2, [r3, #4]
    3e24:	687b      	ldr	r3, [r7, #4]
    3e26:	3308      	adds	r3, #8
    3e28:	429a      	cmp	r2, r3
    3e2a:	d104      	bne.n	3e36 <vTaskSwitchContext+0x9e>
    3e2c:	687b      	ldr	r3, [r7, #4]
    3e2e:	685b      	ldr	r3, [r3, #4]
    3e30:	685a      	ldr	r2, [r3, #4]
    3e32:	687b      	ldr	r3, [r7, #4]
    3e34:	605a      	str	r2, [r3, #4]
    3e36:	687b      	ldr	r3, [r7, #4]
    3e38:	685b      	ldr	r3, [r3, #4]
    3e3a:	68da      	ldr	r2, [r3, #12]
    3e3c:	f240 03b8 	movw	r3, #184	; 0xb8
    3e40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e44:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();
    3e46:	f002 faad 	bl	63a4 <myTraceSwitchedIn>
    }
}
    3e4a:	3708      	adds	r7, #8
    3e4c:	46bd      	mov	sp, r7
    3e4e:	bd80      	pop	{r7, pc}

00003e50 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    3e50:	b580      	push	{r7, lr}
    3e52:	b084      	sub	sp, #16
    3e54:	af00      	add	r7, sp, #0
    3e56:	6078      	str	r0, [r7, #4]
    3e58:	6039      	str	r1, [r7, #0]
       SCHEDULER SUSPENDED. */

    /* Place the event list item of the TCB in the appropriate event list.
       This is placed in the list in priority order so the highest priority task
       is the first to be woken by the event. */
    vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    3e5a:	f240 03b8 	movw	r3, #184	; 0xb8
    3e5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e62:	681b      	ldr	r3, [r3, #0]
    3e64:	3318      	adds	r3, #24
    3e66:	6878      	ldr	r0, [r7, #4]
    3e68:	4619      	mov	r1, r3
    3e6a:	f7fe fdc9 	bl	2a00 <vListInsert>

    /* We must remove ourselves from the ready list before adding ourselves
       to the blocked list as the same list item is used for both lists.  We have
       exclusive access to the ready lists as the scheduler is locked. */
    vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3e6e:	f240 03b8 	movw	r3, #184	; 0xb8
    3e72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e76:	681b      	ldr	r3, [r3, #0]
    3e78:	3304      	adds	r3, #4
    3e7a:	4618      	mov	r0, r3
    3e7c:	f7fe fdf8 	bl	2a70 <vListRemove>


#if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( xTicksToWait == portMAX_DELAY )
    3e80:	683b      	ldr	r3, [r7, #0]
    3e82:	f1b3 3fff 	cmp.w	r3, #4294967295
    3e86:	d10d      	bne.n	3ea4 <vTaskPlaceOnEventList+0x54>
        {
            /* Add ourselves to the suspended task list instead of a delayed task
               list to ensure we are not woken by a timing event.  We will block
               indefinitely. */
            vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3e88:	f240 03b8 	movw	r3, #184	; 0xb8
    3e8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e90:	681b      	ldr	r3, [r3, #0]
    3e92:	3304      	adds	r3, #4
    3e94:	f240 107c 	movw	r0, #380	; 0x17c
    3e98:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3e9c:	4619      	mov	r1, r3
    3e9e:	f7fe fd87 	bl	29b0 <vListInsertEnd>
    3ea2:	e00a      	b.n	3eba <vTaskPlaceOnEventList+0x6a>
        }
        else
        {
            /* Calculate the time at which the task should be woken if the event does
               not occur.  This may overflow but this doesn't matter. */
            xTimeToWake = xTickCount + xTicksToWait;
    3ea4:	f240 1394 	movw	r3, #404	; 0x194
    3ea8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3eac:	681a      	ldr	r2, [r3, #0]
    3eae:	683b      	ldr	r3, [r7, #0]
    3eb0:	4413      	add	r3, r2
    3eb2:	60fb      	str	r3, [r7, #12]
            prvAddCurrentTaskToDelayedList( xTimeToWake );
    3eb4:	68f8      	ldr	r0, [r7, #12]
    3eb6:	f000 f99f 	bl	41f8 <prvAddCurrentTaskToDelayedList>
           not occur.  This may overflow but this doesn't matter. */
        xTimeToWake = xTickCount + xTicksToWait;
        prvAddCurrentTaskToDelayedList( xTimeToWake );
    }
#endif
}
    3eba:	3710      	adds	r7, #16
    3ebc:	46bd      	mov	sp, r7
    3ebe:	bd80      	pop	{r7, pc}

00003ec0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    3ec0:	b580      	push	{r7, lr}
    3ec2:	b084      	sub	sp, #16
    3ec4:	af00      	add	r7, sp, #0
    3ec6:	6078      	str	r0, [r7, #4]
       get called - the lock count on the queue will get modified instead.  This
       means we can always expect exclusive access to the event list here.

       This function assumes that a check has already been made to ensure that
       pxEventList is not empty. */
    pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    3ec8:	687b      	ldr	r3, [r7, #4]
    3eca:	68db      	ldr	r3, [r3, #12]
    3ecc:	68db      	ldr	r3, [r3, #12]
    3ece:	60bb      	str	r3, [r7, #8]
    configASSERT( pxUnblockedTCB );
    vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    3ed0:	68bb      	ldr	r3, [r7, #8]
    3ed2:	3318      	adds	r3, #24
    3ed4:	4618      	mov	r0, r3
    3ed6:	f7fe fdcb 	bl	2a70 <vListRemove>

    if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    3eda:	f240 13a4 	movw	r3, #420	; 0x1a4
    3ede:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ee2:	681b      	ldr	r3, [r3, #0]
    3ee4:	2b00      	cmp	r3, #0
    3ee6:	d126      	bne.n	3f36 <xTaskRemoveFromEventList+0x76>
    {
        vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    3ee8:	68bb      	ldr	r3, [r7, #8]
    3eea:	3304      	adds	r3, #4
    3eec:	4618      	mov	r0, r3
    3eee:	f7fe fdbf 	bl	2a70 <vListRemove>
        prvAddTaskToReadyQueue( pxUnblockedTCB );
    3ef2:	68bb      	ldr	r3, [r7, #8]
    3ef4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3ef6:	f240 139c 	movw	r3, #412	; 0x19c
    3efa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3efe:	681b      	ldr	r3, [r3, #0]
    3f00:	429a      	cmp	r2, r3
    3f02:	d906      	bls.n	3f12 <xTaskRemoveFromEventList+0x52>
    3f04:	68bb      	ldr	r3, [r7, #8]
    3f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3f08:	f240 139c 	movw	r3, #412	; 0x19c
    3f0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3f10:	601a      	str	r2, [r3, #0]
    3f12:	68bb      	ldr	r3, [r7, #8]
    3f14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3f16:	4613      	mov	r3, r2
    3f18:	009b      	lsls	r3, r3, #2
    3f1a:	4413      	add	r3, r2
    3f1c:	009b      	lsls	r3, r3, #2
    3f1e:	f240 02bc 	movw	r2, #188	; 0xbc
    3f22:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3f26:	441a      	add	r2, r3
    3f28:	68bb      	ldr	r3, [r7, #8]
    3f2a:	3304      	adds	r3, #4
    3f2c:	4610      	mov	r0, r2
    3f2e:	4619      	mov	r1, r3
    3f30:	f7fe fd3e 	bl	29b0 <vListInsertEnd>
    3f34:	e008      	b.n	3f48 <xTaskRemoveFromEventList+0x88>
    }
    else
    {
        /* We cannot access the delayed or ready lists, so will hold this
           task pending until the scheduler is resumed. */
        vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    3f36:	68bb      	ldr	r3, [r7, #8]
    3f38:	3318      	adds	r3, #24
    3f3a:	f240 1050 	movw	r0, #336	; 0x150
    3f3e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3f42:	4619      	mov	r1, r3
    3f44:	f7fe fd34 	bl	29b0 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3f48:	68bb      	ldr	r3, [r7, #8]
    3f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3f4c:	f240 03b8 	movw	r3, #184	; 0xb8
    3f50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3f54:	681b      	ldr	r3, [r3, #0]
    3f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3f58:	429a      	cmp	r2, r3
    3f5a:	d302      	bcc.n	3f62 <xTaskRemoveFromEventList+0xa2>
    {
        /* Return true if the task removed from the event list has
           a higher priority than the calling task.  This allows
           the calling task to know if it should force a context
           switch now. */
        xReturn = pdTRUE;
    3f5c:	2301      	movs	r3, #1
    3f5e:	60fb      	str	r3, [r7, #12]
    3f60:	e001      	b.n	3f66 <xTaskRemoveFromEventList+0xa6>
    }
    else
    {
        xReturn = pdFALSE;
    3f62:	2300      	movs	r3, #0
    3f64:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
    3f66:	68fb      	ldr	r3, [r7, #12]
}
    3f68:	4618      	mov	r0, r3
    3f6a:	3710      	adds	r7, #16
    3f6c:	46bd      	mov	sp, r7
    3f6e:	bd80      	pop	{r7, pc}

00003f70 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
    3f70:	b480      	push	{r7}
    3f72:	b083      	sub	sp, #12
    3f74:	af00      	add	r7, sp, #0
    3f76:	6078      	str	r0, [r7, #4]
    configASSERT( pxTimeOut );
    pxTimeOut->xOverflowCount = xNumOfOverflows;
    3f78:	f240 13b0 	movw	r3, #432	; 0x1b0
    3f7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3f80:	681a      	ldr	r2, [r3, #0]
    3f82:	687b      	ldr	r3, [r7, #4]
    3f84:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
    3f86:	f240 1394 	movw	r3, #404	; 0x194
    3f8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3f8e:	681a      	ldr	r2, [r3, #0]
    3f90:	687b      	ldr	r3, [r7, #4]
    3f92:	605a      	str	r2, [r3, #4]
}
    3f94:	370c      	adds	r7, #12
    3f96:	46bd      	mov	sp, r7
    3f98:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f9c:	4770      	bx	lr
    3f9e:	bf00      	nop

00003fa0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    3fa0:	b580      	push	{r7, lr}
    3fa2:	b084      	sub	sp, #16
    3fa4:	af00      	add	r7, sp, #0
    3fa6:	6078      	str	r0, [r7, #4]
    3fa8:	6039      	str	r1, [r7, #0]
    portBASE_TYPE xReturn;

    configASSERT( pxTimeOut );
    configASSERT( pxTicksToWait );

    taskENTER_CRITICAL();
    3faa:	f000 fadf 	bl	456c <vPortEnterCritical>
    {
#if ( INCLUDE_vTaskSuspend == 1 )
        /* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
           the maximum block time then the task should block indefinitely, and
           therefore never time out. */
        if( *pxTicksToWait == portMAX_DELAY )
    3fae:	683b      	ldr	r3, [r7, #0]
    3fb0:	681b      	ldr	r3, [r3, #0]
    3fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
    3fb6:	d102      	bne.n	3fbe <xTaskCheckForTimeOut+0x1e>
        {
            xReturn = pdFALSE;
    3fb8:	2300      	movs	r3, #0
    3fba:	60fb      	str	r3, [r7, #12]
    3fbc:	e035      	b.n	402a <xTaskCheckForTimeOut+0x8a>
        }
        else /* We are not blocking indefinitely, perform the checks below. */
#endif

            if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    3fbe:	687b      	ldr	r3, [r7, #4]
    3fc0:	681a      	ldr	r2, [r3, #0]
    3fc2:	f240 13b0 	movw	r3, #432	; 0x1b0
    3fc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3fca:	681b      	ldr	r3, [r3, #0]
    3fcc:	429a      	cmp	r2, r3
    3fce:	d00b      	beq.n	3fe8 <xTaskCheckForTimeOut+0x48>
    3fd0:	687b      	ldr	r3, [r7, #4]
    3fd2:	685a      	ldr	r2, [r3, #4]
    3fd4:	f240 1394 	movw	r3, #404	; 0x194
    3fd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3fdc:	681b      	ldr	r3, [r3, #0]
    3fde:	429a      	cmp	r2, r3
    3fe0:	d802      	bhi.n	3fe8 <xTaskCheckForTimeOut+0x48>
            {
                /* The tick count is greater than the time at which vTaskSetTimeout()
                   was called, but has also overflowed since vTaskSetTimeOut() was called.
                   It must have wrapped all the way around and gone past us again. This
                   passed since vTaskSetTimeout() was called. */
                xReturn = pdTRUE;
    3fe2:	2301      	movs	r3, #1
    3fe4:	60fb      	str	r3, [r7, #12]
    3fe6:	e020      	b.n	402a <xTaskCheckForTimeOut+0x8a>
            }
            else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    3fe8:	f240 1394 	movw	r3, #404	; 0x194
    3fec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ff0:	681a      	ldr	r2, [r3, #0]
    3ff2:	687b      	ldr	r3, [r7, #4]
    3ff4:	685b      	ldr	r3, [r3, #4]
    3ff6:	1ad2      	subs	r2, r2, r3
    3ff8:	683b      	ldr	r3, [r7, #0]
    3ffa:	681b      	ldr	r3, [r3, #0]
    3ffc:	429a      	cmp	r2, r3
    3ffe:	d212      	bcs.n	4026 <xTaskCheckForTimeOut+0x86>
            {
                /* Not a genuine timeout. Adjust parameters for time remaining. */
                *pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    4000:	683b      	ldr	r3, [r7, #0]
    4002:	681a      	ldr	r2, [r3, #0]
    4004:	687b      	ldr	r3, [r7, #4]
    4006:	6859      	ldr	r1, [r3, #4]
    4008:	f240 1394 	movw	r3, #404	; 0x194
    400c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4010:	681b      	ldr	r3, [r3, #0]
    4012:	1acb      	subs	r3, r1, r3
    4014:	441a      	add	r2, r3
    4016:	683b      	ldr	r3, [r7, #0]
    4018:	601a      	str	r2, [r3, #0]
                vTaskSetTimeOutState( pxTimeOut );
    401a:	6878      	ldr	r0, [r7, #4]
    401c:	f7ff ffa8 	bl	3f70 <vTaskSetTimeOutState>
                xReturn = pdFALSE;
    4020:	2300      	movs	r3, #0
    4022:	60fb      	str	r3, [r7, #12]
    4024:	e001      	b.n	402a <xTaskCheckForTimeOut+0x8a>
            }
            else
            {
                xReturn = pdTRUE;
    4026:	2301      	movs	r3, #1
    4028:	60fb      	str	r3, [r7, #12]
            }
    }
    taskEXIT_CRITICAL();
    402a:	f000 fab5 	bl	4598 <vPortExitCritical>

    return xReturn;
    402e:	68fb      	ldr	r3, [r7, #12]
}
    4030:	4618      	mov	r0, r3
    4032:	3710      	adds	r7, #16
    4034:	46bd      	mov	sp, r7
    4036:	bd80      	pop	{r7, pc}

00004038 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    4038:	b480      	push	{r7}
    403a:	af00      	add	r7, sp, #0
    xMissedYield = pdTRUE;
    403c:	f240 13ac 	movw	r3, #428	; 0x1ac
    4040:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4044:	2201      	movs	r2, #1
    4046:	601a      	str	r2, [r3, #0]
}
    4048:	46bd      	mov	sp, r7
    404a:	f85d 7b04 	ldr.w	r7, [sp], #4
    404e:	4770      	bx	lr

00004050 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    4050:	b580      	push	{r7, lr}
    4052:	b082      	sub	sp, #8
    4054:	af00      	add	r7, sp, #0
    4056:	6078      	str	r0, [r7, #4]
    ( void ) pvParameters;

    for( ;; )
    {
        /* See if any tasks have been deleted. */
        prvCheckTasksWaitingTermination();
    4058:	f000 f886 	bl	4168 <prvCheckTasksWaitingTermination>
        {
            /* If we are not using preemption we keep forcing a task switch to
               see if any other task has become available.  If we are using
               preemption we don't need to do this as any task becoming available
               will automatically get the processor anyway. */
            taskYIELD();
    405c:	f000 fa78 	bl	4550 <vPortYieldFromISR>
NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
CALL A FUNCTION THAT MIGHT BLOCK. */
            vApplicationIdleHook();
        }
#endif
    }
    4060:	e7fa      	b.n	4058 <prvIdleTask+0x8>
    4062:	bf00      	nop

00004064 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
    4064:	b580      	push	{r7, lr}
    4066:	b084      	sub	sp, #16
    4068:	af00      	add	r7, sp, #0
    406a:	60f8      	str	r0, [r7, #12]
    406c:	60b9      	str	r1, [r7, #8]
    406e:	607a      	str	r2, [r7, #4]
    4070:	603b      	str	r3, [r7, #0]
    /* Store the function name in the TCB. */
#if configMAX_TASK_NAME_LEN > 1
    {
        /* Don't bring strncpy into the build unnecessarily. */
        strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    4072:	68fb      	ldr	r3, [r7, #12]
    4074:	3334      	adds	r3, #52	; 0x34
    4076:	4618      	mov	r0, r3
    4078:	68b9      	ldr	r1, [r7, #8]
    407a:	2210      	movs	r2, #16
    407c:	f002 fa48 	bl	6510 <strncpy>
    }
#endif
    pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
    4080:	68fb      	ldr	r3, [r7, #12]
    4082:	2200      	movs	r2, #0
    4084:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

    /* This is used as an array index so must ensure it's not too large.  First
       remove the privilege bit if one is present. */
    if( uxPriority >= configMAX_PRIORITIES )
    4088:	687b      	ldr	r3, [r7, #4]
    408a:	2b04      	cmp	r3, #4
    408c:	d901      	bls.n	4092 <prvInitialiseTCBVariables+0x2e>
    {
        uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    408e:	2304      	movs	r3, #4
    4090:	607b      	str	r3, [r7, #4]
    }

    pxTCB->uxPriority = uxPriority;
    4092:	68fb      	ldr	r3, [r7, #12]
    4094:	687a      	ldr	r2, [r7, #4]
    4096:	62da      	str	r2, [r3, #44]	; 0x2c
#if ( configUSE_MUTEXES == 1 )
    {
        pxTCB->uxBasePriority = uxPriority;
    4098:	68fb      	ldr	r3, [r7, #12]
    409a:	687a      	ldr	r2, [r7, #4]
    409c:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif

    vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    409e:	68fb      	ldr	r3, [r7, #12]
    40a0:	3304      	adds	r3, #4
    40a2:	4618      	mov	r0, r3
    40a4:	f7fe fc78 	bl	2998 <vListInitialiseItem>
    vListInitialiseItem( &( pxTCB->xEventListItem ) );
    40a8:	68fb      	ldr	r3, [r7, #12]
    40aa:	3318      	adds	r3, #24
    40ac:	4618      	mov	r0, r3
    40ae:	f7fe fc73 	bl	2998 <vListInitialiseItem>

    /* Set the pxTCB as a link back from the xListItem.  This is so we can get
       back to	the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    40b2:	68fb      	ldr	r3, [r7, #12]
    40b4:	68fa      	ldr	r2, [r7, #12]
    40b6:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    40b8:	687b      	ldr	r3, [r7, #4]
    40ba:	f1c3 0205 	rsb	r2, r3, #5
    40be:	68fb      	ldr	r3, [r7, #12]
    40c0:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    40c2:	68fb      	ldr	r3, [r7, #12]
    40c4:	68fa      	ldr	r2, [r7, #12]
    40c6:	625a      	str	r2, [r3, #36]	; 0x24
    {
        ( void ) xRegions;
        ( void ) usStackDepth;
    }
#endif
}
    40c8:	3710      	adds	r7, #16
    40ca:	46bd      	mov	sp, r7
    40cc:	bd80      	pop	{r7, pc}
    40ce:	bf00      	nop

000040d0 <prvInitialiseTaskLists>:
}
/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
    40d0:	b580      	push	{r7, lr}
    40d2:	b082      	sub	sp, #8
    40d4:	af00      	add	r7, sp, #0
    unsigned portBASE_TYPE uxPriority;

    for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    40d6:	2300      	movs	r3, #0
    40d8:	607b      	str	r3, [r7, #4]
    40da:	e00f      	b.n	40fc <prvInitialiseTaskLists+0x2c>
    {
        vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    40dc:	687a      	ldr	r2, [r7, #4]
    40de:	4613      	mov	r3, r2
    40e0:	009b      	lsls	r3, r3, #2
    40e2:	4413      	add	r3, r2
    40e4:	009b      	lsls	r3, r3, #2
    40e6:	f240 02bc 	movw	r2, #188	; 0xbc
    40ea:	f2c2 0200 	movt	r2, #8192	; 0x2000
    40ee:	4413      	add	r3, r2
    40f0:	4618      	mov	r0, r3
    40f2:	f7fe fc31 	bl	2958 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
    unsigned portBASE_TYPE uxPriority;

    for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    40f6:	687b      	ldr	r3, [r7, #4]
    40f8:	3301      	adds	r3, #1
    40fa:	607b      	str	r3, [r7, #4]
    40fc:	687b      	ldr	r3, [r7, #4]
    40fe:	2b04      	cmp	r3, #4
    4100:	d9ec      	bls.n	40dc <prvInitialiseTaskLists+0xc>
    {
        vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    }

    vListInitialise( ( xList * ) &xDelayedTaskList1 );
    4102:	f240 1020 	movw	r0, #288	; 0x120
    4106:	f2c2 0000 	movt	r0, #8192	; 0x2000
    410a:	f7fe fc25 	bl	2958 <vListInitialise>
    vListInitialise( ( xList * ) &xDelayedTaskList2 );
    410e:	f240 1034 	movw	r0, #308	; 0x134
    4112:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4116:	f7fe fc1f 	bl	2958 <vListInitialise>
    vListInitialise( ( xList * ) &xPendingReadyList );
    411a:	f240 1050 	movw	r0, #336	; 0x150
    411e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4122:	f7fe fc19 	bl	2958 <vListInitialise>

#if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( ( xList * ) &xTasksWaitingTermination );
    4126:	f240 1064 	movw	r0, #356	; 0x164
    412a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    412e:	f7fe fc13 	bl	2958 <vListInitialise>
    }
#endif

#if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( ( xList * ) &xSuspendedTaskList );
    4132:	f240 107c 	movw	r0, #380	; 0x17c
    4136:	f2c2 0000 	movt	r0, #8192	; 0x2000
    413a:	f7fe fc0d 	bl	2958 <vListInitialise>
    }
#endif

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
       using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
    413e:	f240 1348 	movw	r3, #328	; 0x148
    4142:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4146:	f240 1220 	movw	r2, #288	; 0x120
    414a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    414e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
    4150:	f240 134c 	movw	r3, #332	; 0x14c
    4154:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4158:	f240 1234 	movw	r2, #308	; 0x134
    415c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4160:	601a      	str	r2, [r3, #0]
}
    4162:	3708      	adds	r7, #8
    4164:	46bd      	mov	sp, r7
    4166:	bd80      	pop	{r7, pc}

00004168 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    4168:	b580      	push	{r7, lr}
    416a:	b082      	sub	sp, #8
    416c:	af00      	add	r7, sp, #0
    {
        portBASE_TYPE xListIsEmpty;

        /* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
           too often in the idle task. */
        if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    416e:	f240 1378 	movw	r3, #376	; 0x178
    4172:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4176:	681b      	ldr	r3, [r3, #0]
    4178:	2b00      	cmp	r3, #0
    417a:	d03a      	beq.n	41f2 <prvCheckTasksWaitingTermination+0x8a>
        {
            vTaskSuspendAll();
    417c:	f7ff fc4c 	bl	3a18 <vTaskSuspendAll>
            xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    4180:	f240 1364 	movw	r3, #356	; 0x164
    4184:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4188:	681b      	ldr	r3, [r3, #0]
    418a:	2b00      	cmp	r3, #0
    418c:	bf14      	ite	ne
    418e:	2300      	movne	r3, #0
    4190:	2301      	moveq	r3, #1
    4192:	b2db      	uxtb	r3, r3
    4194:	607b      	str	r3, [r7, #4]
            xTaskResumeAll();
    4196:	f7ff fc51 	bl	3a3c <xTaskResumeAll>

            if( xListIsEmpty == pdFALSE )
    419a:	687b      	ldr	r3, [r7, #4]
    419c:	2b00      	cmp	r3, #0
    419e:	d128      	bne.n	41f2 <prvCheckTasksWaitingTermination+0x8a>
            {
                tskTCB *pxTCB;

                taskENTER_CRITICAL();
    41a0:	f000 f9e4 	bl	456c <vPortEnterCritical>
                {
                    pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    41a4:	f240 1364 	movw	r3, #356	; 0x164
    41a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    41ac:	68db      	ldr	r3, [r3, #12]
    41ae:	68db      	ldr	r3, [r3, #12]
    41b0:	603b      	str	r3, [r7, #0]
                    vListRemove( &( pxTCB->xGenericListItem ) );
    41b2:	683b      	ldr	r3, [r7, #0]
    41b4:	3304      	adds	r3, #4
    41b6:	4618      	mov	r0, r3
    41b8:	f7fe fc5a 	bl	2a70 <vListRemove>
                    --uxCurrentNumberOfTasks;
    41bc:	f240 1390 	movw	r3, #400	; 0x190
    41c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    41c4:	681b      	ldr	r3, [r3, #0]
    41c6:	1e5a      	subs	r2, r3, #1
    41c8:	f240 1390 	movw	r3, #400	; 0x190
    41cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    41d0:	601a      	str	r2, [r3, #0]
                    --uxTasksDeleted;
    41d2:	f240 1378 	movw	r3, #376	; 0x178
    41d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    41da:	681b      	ldr	r3, [r3, #0]
    41dc:	1e5a      	subs	r2, r3, #1
    41de:	f240 1378 	movw	r3, #376	; 0x178
    41e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    41e6:	601a      	str	r2, [r3, #0]
                }
                taskEXIT_CRITICAL();
    41e8:	f000 f9d6 	bl	4598 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
    41ec:	6838      	ldr	r0, [r7, #0]
    41ee:	f000 f879 	bl	42e4 <prvDeleteTCB>
            }
        }
    }
#endif
}
    41f2:	3708      	adds	r7, #8
    41f4:	46bd      	mov	sp, r7
    41f6:	bd80      	pop	{r7, pc}

000041f8 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
    41f8:	b580      	push	{r7, lr}
    41fa:	b082      	sub	sp, #8
    41fc:	af00      	add	r7, sp, #0
    41fe:	6078      	str	r0, [r7, #4]
    /* The list item will be inserted in wake time order. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    4200:	f240 03b8 	movw	r3, #184	; 0xb8
    4204:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4208:	681b      	ldr	r3, [r3, #0]
    420a:	687a      	ldr	r2, [r7, #4]
    420c:	605a      	str	r2, [r3, #4]

    if( xTimeToWake < xTickCount )
    420e:	f240 1394 	movw	r3, #404	; 0x194
    4212:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4216:	681b      	ldr	r3, [r3, #0]
    4218:	687a      	ldr	r2, [r7, #4]
    421a:	429a      	cmp	r2, r3
    421c:	d20f      	bcs.n	423e <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* Wake time has overflowed.  Place this item in the overflow list. */
        vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    421e:	f240 134c 	movw	r3, #332	; 0x14c
    4222:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4226:	681a      	ldr	r2, [r3, #0]
    4228:	f240 03b8 	movw	r3, #184	; 0xb8
    422c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4230:	681b      	ldr	r3, [r3, #0]
    4232:	3304      	adds	r3, #4
    4234:	4610      	mov	r0, r2
    4236:	4619      	mov	r1, r3
    4238:	f7fe fbe2 	bl	2a00 <vListInsert>
    423c:	e01c      	b.n	4278 <prvAddCurrentTaskToDelayedList+0x80>
    }
    else
    {
        /* The wake time has not overflowed, so we can use the current block list. */
        vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    423e:	f240 1348 	movw	r3, #328	; 0x148
    4242:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4246:	681a      	ldr	r2, [r3, #0]
    4248:	f240 03b8 	movw	r3, #184	; 0xb8
    424c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4250:	681b      	ldr	r3, [r3, #0]
    4252:	3304      	adds	r3, #4
    4254:	4610      	mov	r0, r2
    4256:	4619      	mov	r1, r3
    4258:	f7fe fbd2 	bl	2a00 <vListInsert>

        /* If the task entering the blocked state was placed at the head of the
           list of blocked tasks then xNextTaskUnblockTime needs to be updated
           too. */
        if( xTimeToWake < xNextTaskUnblockTime )
    425c:	f240 0328 	movw	r3, #40	; 0x28
    4260:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4264:	681b      	ldr	r3, [r3, #0]
    4266:	687a      	ldr	r2, [r7, #4]
    4268:	429a      	cmp	r2, r3
    426a:	d205      	bcs.n	4278 <prvAddCurrentTaskToDelayedList+0x80>
        {
            xNextTaskUnblockTime = xTimeToWake;
    426c:	f240 0328 	movw	r3, #40	; 0x28
    4270:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4274:	687a      	ldr	r2, [r7, #4]
    4276:	601a      	str	r2, [r3, #0]
        }
    }
}
    4278:	3708      	adds	r7, #8
    427a:	46bd      	mov	sp, r7
    427c:	bd80      	pop	{r7, pc}
    427e:	bf00      	nop

00004280 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
    4280:	b580      	push	{r7, lr}
    4282:	b084      	sub	sp, #16
    4284:	af00      	add	r7, sp, #0
    4286:	4603      	mov	r3, r0
    4288:	6039      	str	r1, [r7, #0]
    428a:	80fb      	strh	r3, [r7, #6]
    tskTCB *pxNewTCB;

    /* Allocate space for the TCB.  Where the memory comes from depends on
       the implementation of the port malloc function. */
    pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    428c:	2048      	movs	r0, #72	; 0x48
    428e:	f000 f9e7 	bl	4660 <pvPortMalloc>
    4292:	60f8      	str	r0, [r7, #12]

    if( pxNewTCB != NULL )
    4294:	68fb      	ldr	r3, [r7, #12]
    4296:	2b00      	cmp	r3, #0
    4298:	d01f      	beq.n	42da <prvAllocateTCBAndStack+0x5a>
    {
        /* Allocate space for the stack used by the task being created.
           The base of the stack memory stored in the TCB so the task can
           be deleted later if required. */
        pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    429a:	683b      	ldr	r3, [r7, #0]
    429c:	2b00      	cmp	r3, #0
    429e:	d106      	bne.n	42ae <prvAllocateTCBAndStack+0x2e>
    42a0:	88fb      	ldrh	r3, [r7, #6]
    42a2:	009b      	lsls	r3, r3, #2
    42a4:	4618      	mov	r0, r3
    42a6:	f000 f9db 	bl	4660 <pvPortMalloc>
    42aa:	4603      	mov	r3, r0
    42ac:	e000      	b.n	42b0 <prvAllocateTCBAndStack+0x30>
    42ae:	683b      	ldr	r3, [r7, #0]
    42b0:	68fa      	ldr	r2, [r7, #12]
    42b2:	6313      	str	r3, [r2, #48]	; 0x30

        if( pxNewTCB->pxStack == NULL )
    42b4:	68fb      	ldr	r3, [r7, #12]
    42b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    42b8:	2b00      	cmp	r3, #0
    42ba:	d105      	bne.n	42c8 <prvAllocateTCBAndStack+0x48>
        {
            /* Could not allocate the stack.  Delete the allocated TCB. */
            vPortFree( pxNewTCB );
    42bc:	68f8      	ldr	r0, [r7, #12]
    42be:	f000 fa93 	bl	47e8 <vPortFree>
            pxNewTCB = NULL;
    42c2:	2300      	movs	r3, #0
    42c4:	60fb      	str	r3, [r7, #12]
    42c6:	e008      	b.n	42da <prvAllocateTCBAndStack+0x5a>
        }
        else
        {
            /* Just to help debugging. */
            memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
    42c8:	68fb      	ldr	r3, [r7, #12]
    42ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    42cc:	88fb      	ldrh	r3, [r7, #6]
    42ce:	009b      	lsls	r3, r3, #2
    42d0:	4610      	mov	r0, r2
    42d2:	21a5      	movs	r1, #165	; 0xa5
    42d4:	461a      	mov	r2, r3
    42d6:	f002 f8cb 	bl	6470 <memset>
        }
    }

    return pxNewTCB;
    42da:	68fb      	ldr	r3, [r7, #12]
}
    42dc:	4618      	mov	r0, r3
    42de:	3710      	adds	r7, #16
    42e0:	46bd      	mov	sp, r7
    42e2:	bd80      	pop	{r7, pc}

000042e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

static void prvDeleteTCB( tskTCB *pxTCB )
{
    42e4:	b580      	push	{r7, lr}
    42e6:	b082      	sub	sp, #8
    42e8:	af00      	add	r7, sp, #0
    42ea:	6078      	str	r0, [r7, #4]
       want to allocate and clean RAM statically. */
    portCLEAN_UP_TCB( pxTCB );

    /* Free up the memory allocated by the scheduler for the task.  It is up to
       the task to free any memory allocated at the application level. */
    vPortFreeAligned( pxTCB->pxStack );
    42ec:	687b      	ldr	r3, [r7, #4]
    42ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    42f0:	4618      	mov	r0, r3
    42f2:	f000 fa79 	bl	47e8 <vPortFree>
    vPortFree( pxTCB );
    42f6:	6878      	ldr	r0, [r7, #4]
    42f8:	f000 fa76 	bl	47e8 <vPortFree>
}
    42fc:	3708      	adds	r7, #8
    42fe:	46bd      	mov	sp, r7
    4300:	bd80      	pop	{r7, pc}
    4302:	bf00      	nop

00004304 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

xTaskHandle xTaskGetCurrentTaskHandle( void )
{
    4304:	b480      	push	{r7}
    4306:	b083      	sub	sp, #12
    4308:	af00      	add	r7, sp, #0
    xTaskHandle xReturn;

    /* A critical section is not required as this is not called from
       an interrupt and the current TCB will always be the same for any
       individual execution thread. */
    xReturn = pxCurrentTCB;
    430a:	f240 03b8 	movw	r3, #184	; 0xb8
    430e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4312:	681b      	ldr	r3, [r3, #0]
    4314:	607b      	str	r3, [r7, #4]

    return xReturn;
    4316:	687b      	ldr	r3, [r7, #4]
}
    4318:	4618      	mov	r0, r3
    431a:	370c      	adds	r7, #12
    431c:	46bd      	mov	sp, r7
    431e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4322:	4770      	bx	lr

00004324 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
{
    4324:	b580      	push	{r7, lr}
    4326:	b084      	sub	sp, #16
    4328:	af00      	add	r7, sp, #0
    432a:	6078      	str	r0, [r7, #4]
    tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    432c:	687b      	ldr	r3, [r7, #4]
    432e:	60fb      	str	r3, [r7, #12]

    configASSERT( pxMutexHolder );

    if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    4330:	68fb      	ldr	r3, [r7, #12]
    4332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4334:	f240 03b8 	movw	r3, #184	; 0xb8
    4338:	f2c2 0300 	movt	r3, #8192	; 0x2000
    433c:	681b      	ldr	r3, [r3, #0]
    433e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4340:	429a      	cmp	r2, r3
    4342:	d24f      	bcs.n	43e4 <vTaskPriorityInherit+0xc0>
    {
        /* Adjust the mutex holder state to account for its new priority. */
        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    4344:	f240 03b8 	movw	r3, #184	; 0xb8
    4348:	f2c2 0300 	movt	r3, #8192	; 0x2000
    434c:	681b      	ldr	r3, [r3, #0]
    434e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4350:	f1c3 0205 	rsb	r2, r3, #5
    4354:	68fb      	ldr	r3, [r7, #12]
    4356:	619a      	str	r2, [r3, #24]

        /* If the task being modified is in the ready state it will need to
           be moved in to a new list. */
        if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    4358:	68fb      	ldr	r3, [r7, #12]
    435a:	6959      	ldr	r1, [r3, #20]
    435c:	68fb      	ldr	r3, [r7, #12]
    435e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4360:	4613      	mov	r3, r2
    4362:	009b      	lsls	r3, r3, #2
    4364:	4413      	add	r3, r2
    4366:	009b      	lsls	r3, r3, #2
    4368:	f240 02bc 	movw	r2, #188	; 0xbc
    436c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4370:	4413      	add	r3, r2
    4372:	4299      	cmp	r1, r3
    4374:	d12e      	bne.n	43d4 <vTaskPriorityInherit+0xb0>
        {
            vListRemove( &( pxTCB->xGenericListItem ) );
    4376:	68fb      	ldr	r3, [r7, #12]
    4378:	3304      	adds	r3, #4
    437a:	4618      	mov	r0, r3
    437c:	f7fe fb78 	bl	2a70 <vListRemove>

            /* Inherit the priority before being moved into the new list. */
            pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    4380:	f240 03b8 	movw	r3, #184	; 0xb8
    4384:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4388:	681b      	ldr	r3, [r3, #0]
    438a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    438c:	68fb      	ldr	r3, [r7, #12]
    438e:	62da      	str	r2, [r3, #44]	; 0x2c
            prvAddTaskToReadyQueue( pxTCB );
    4390:	68fb      	ldr	r3, [r7, #12]
    4392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4394:	f240 139c 	movw	r3, #412	; 0x19c
    4398:	f2c2 0300 	movt	r3, #8192	; 0x2000
    439c:	681b      	ldr	r3, [r3, #0]
    439e:	429a      	cmp	r2, r3
    43a0:	d906      	bls.n	43b0 <vTaskPriorityInherit+0x8c>
    43a2:	68fb      	ldr	r3, [r7, #12]
    43a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    43a6:	f240 139c 	movw	r3, #412	; 0x19c
    43aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    43ae:	601a      	str	r2, [r3, #0]
    43b0:	68fb      	ldr	r3, [r7, #12]
    43b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    43b4:	4613      	mov	r3, r2
    43b6:	009b      	lsls	r3, r3, #2
    43b8:	4413      	add	r3, r2
    43ba:	009b      	lsls	r3, r3, #2
    43bc:	f240 02bc 	movw	r2, #188	; 0xbc
    43c0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    43c4:	441a      	add	r2, r3
    43c6:	68fb      	ldr	r3, [r7, #12]
    43c8:	3304      	adds	r3, #4
    43ca:	4610      	mov	r0, r2
    43cc:	4619      	mov	r1, r3
    43ce:	f7fe faef 	bl	29b0 <vListInsertEnd>
    43d2:	e007      	b.n	43e4 <vTaskPriorityInherit+0xc0>
        }
        else
        {
            /* Just inherit the priority. */
            pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    43d4:	f240 03b8 	movw	r3, #184	; 0xb8
    43d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    43dc:	681b      	ldr	r3, [r3, #0]
    43de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    43e0:	68fb      	ldr	r3, [r7, #12]
    43e2:	62da      	str	r2, [r3, #44]	; 0x2c
        }

        traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
    }
}
    43e4:	3710      	adds	r7, #16
    43e6:	46bd      	mov	sp, r7
    43e8:	bd80      	pop	{r7, pc}
    43ea:	bf00      	nop

000043ec <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
{
    43ec:	b580      	push	{r7, lr}
    43ee:	b084      	sub	sp, #16
    43f0:	af00      	add	r7, sp, #0
    43f2:	6078      	str	r0, [r7, #4]
    tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    43f4:	687b      	ldr	r3, [r7, #4]
    43f6:	60fb      	str	r3, [r7, #12]

    if( pxMutexHolder != NULL )
    43f8:	687b      	ldr	r3, [r7, #4]
    43fa:	2b00      	cmp	r3, #0
    43fc:	d035      	beq.n	446a <vTaskPriorityDisinherit+0x7e>
    {
        if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    43fe:	68fb      	ldr	r3, [r7, #12]
    4400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4402:	68fb      	ldr	r3, [r7, #12]
    4404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4406:	429a      	cmp	r2, r3
    4408:	d02f      	beq.n	446a <vTaskPriorityDisinherit+0x7e>
        {
            /* We must be the running task to be able to give the mutex back.
               Remove ourselves from the ready list we currently appear in. */
            vListRemove( &( pxTCB->xGenericListItem ) );
    440a:	68fb      	ldr	r3, [r7, #12]
    440c:	3304      	adds	r3, #4
    440e:	4618      	mov	r0, r3
    4410:	f7fe fb2e 	bl	2a70 <vListRemove>

            /* Disinherit the priority before adding the task into the new
               ready list. */
            traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
            pxTCB->uxPriority = pxTCB->uxBasePriority;
    4414:	68fb      	ldr	r3, [r7, #12]
    4416:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    4418:	68fb      	ldr	r3, [r7, #12]
    441a:	62da      	str	r2, [r3, #44]	; 0x2c
            listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    441c:	68fb      	ldr	r3, [r7, #12]
    441e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4420:	f1c3 0205 	rsb	r2, r3, #5
    4424:	68fb      	ldr	r3, [r7, #12]
    4426:	619a      	str	r2, [r3, #24]
            prvAddTaskToReadyQueue( pxTCB );
    4428:	68fb      	ldr	r3, [r7, #12]
    442a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    442c:	f240 139c 	movw	r3, #412	; 0x19c
    4430:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4434:	681b      	ldr	r3, [r3, #0]
    4436:	429a      	cmp	r2, r3
    4438:	d906      	bls.n	4448 <vTaskPriorityDisinherit+0x5c>
    443a:	68fb      	ldr	r3, [r7, #12]
    443c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    443e:	f240 139c 	movw	r3, #412	; 0x19c
    4442:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4446:	601a      	str	r2, [r3, #0]
    4448:	68fb      	ldr	r3, [r7, #12]
    444a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    444c:	4613      	mov	r3, r2
    444e:	009b      	lsls	r3, r3, #2
    4450:	4413      	add	r3, r2
    4452:	009b      	lsls	r3, r3, #2
    4454:	f240 02bc 	movw	r2, #188	; 0xbc
    4458:	f2c2 0200 	movt	r2, #8192	; 0x2000
    445c:	441a      	add	r2, r3
    445e:	68fb      	ldr	r3, [r7, #12]
    4460:	3304      	adds	r3, #4
    4462:	4610      	mov	r0, r2
    4464:	4619      	mov	r1, r3
    4466:	f7fe faa3 	bl	29b0 <vListInsertEnd>
        }
    }
}
    446a:	3710      	adds	r7, #16
    446c:	46bd      	mov	sp, r7
    446e:	bd80      	pop	{r7, pc}

00004470 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
    4470:	b480      	push	{r7}
    4472:	b085      	sub	sp, #20
    4474:	af00      	add	r7, sp, #0
    4476:	60f8      	str	r0, [r7, #12]
    4478:	60b9      	str	r1, [r7, #8]
    447a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
    447c:	68fb      	ldr	r3, [r7, #12]
    447e:	3b04      	subs	r3, #4
    4480:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    4482:	68fb      	ldr	r3, [r7, #12]
    4484:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    4488:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    448a:	68fb      	ldr	r3, [r7, #12]
    448c:	3b04      	subs	r3, #4
    448e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
    4490:	68ba      	ldr	r2, [r7, #8]
    4492:	68fb      	ldr	r3, [r7, #12]
    4494:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    4496:	68fb      	ldr	r3, [r7, #12]
    4498:	3b04      	subs	r3, #4
    449a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;	/* LR */
    449c:	68fb      	ldr	r3, [r7, #12]
    449e:	2200      	movs	r2, #0
    44a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
    44a2:	68fb      	ldr	r3, [r7, #12]
    44a4:	3b14      	subs	r3, #20
    44a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
    44a8:	687a      	ldr	r2, [r7, #4]
    44aa:	68fb      	ldr	r3, [r7, #12]
    44ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
    44ae:	68fb      	ldr	r3, [r7, #12]
    44b0:	3b20      	subs	r3, #32
    44b2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
    44b4:	68fb      	ldr	r3, [r7, #12]
}
    44b6:	4618      	mov	r0, r3
    44b8:	3714      	adds	r7, #20
    44ba:	46bd      	mov	sp, r7
    44bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    44c0:	4770      	bx	lr
    44c2:	bf00      	nop

000044c4 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
    44c4:	4b06      	ldr	r3, [pc, #24]	; (44e0 <pxCurrentTCBConst2>)
    44c6:	6819      	ldr	r1, [r3, #0]
    44c8:	6808      	ldr	r0, [r1, #0]
    44ca:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    44ce:	f380 8809 	msr	PSP, r0
    44d2:	f04f 0000 	mov.w	r0, #0
    44d6:	f380 8811 	msr	BASEPRI, r0
    44da:	f04e 0e0d 	orr.w	lr, lr, #13
    44de:	4770      	bx	lr

000044e0 <pxCurrentTCBConst2>:
    44e0:	200000b8 	.word	0x200000b8

000044e4 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
    44e4:	485d      	ldr	r0, [pc, #372]	; (465c <prvSetupTimerInterrupt+0x2c>)
    44e6:	6800      	ldr	r0, [r0, #0]
    44e8:	6800      	ldr	r0, [r0, #0]
    44ea:	f380 8808 	msr	MSP, r0
    44ee:	b662      	cpsie	i
    44f0:	df00      	svc	0
    44f2:	bf00      	nop

000044f4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
    44f4:	b580      	push	{r7, lr}
    44f6:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    44f8:	f64e 5320 	movw	r3, #60704	; 0xed20
    44fc:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4500:	f64e 5220 	movw	r2, #60704	; 0xed20
    4504:	f2ce 0200 	movt	r2, #57344	; 0xe000
    4508:	6812      	ldr	r2, [r2, #0]
    450a:	f442 02fe 	orr.w	r2, r2, #8323072	; 0x7f0000
    450e:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    4510:	f64e 5320 	movw	r3, #60704	; 0xed20
    4514:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4518:	f64e 5220 	movw	r2, #60704	; 0xed20
    451c:	f2ce 0200 	movt	r2, #57344	; 0xe000
    4520:	6812      	ldr	r2, [r2, #0]
    4522:	f042 42fe 	orr.w	r2, r2, #2130706432	; 0x7f000000
    4526:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
    4528:	f000 f882 	bl	4630 <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    452c:	f240 032c 	movw	r3, #44	; 0x2c
    4530:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4534:	2200      	movs	r2, #0
    4536:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
    4538:	f7ff ffd4 	bl	44e4 <prvPortStartFirstTask>

	/* Should not get here! */
	return 0;
    453c:	2300      	movs	r3, #0
}
    453e:	4618      	mov	r0, r3
    4540:	bd80      	pop	{r7, pc}
    4542:	bf00      	nop

00004544 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    4544:	b480      	push	{r7}
    4546:	af00      	add	r7, sp, #0
	/* It is unlikely that the CM3 port will require this function as there
	is nothing to return to.  */
}
    4548:	46bd      	mov	sp, r7
    454a:	f85d 7b04 	ldr.w	r7, [sp], #4
    454e:	4770      	bx	lr

00004550 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
    4550:	b480      	push	{r7}
    4552:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    4554:	f64e 5304 	movw	r3, #60676	; 0xed04
    4558:	f2ce 0300 	movt	r3, #57344	; 0xe000
    455c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4560:	601a      	str	r2, [r3, #0]
}
    4562:	46bd      	mov	sp, r7
    4564:	f85d 7b04 	ldr.w	r7, [sp], #4
    4568:	4770      	bx	lr
    456a:	bf00      	nop

0000456c <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    456c:	b480      	push	{r7}
    456e:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
    4570:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4574:	f380 8811 	msr	BASEPRI, r0
	uxCriticalNesting++;
    4578:	f240 032c 	movw	r3, #44	; 0x2c
    457c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4580:	681b      	ldr	r3, [r3, #0]
    4582:	1c5a      	adds	r2, r3, #1
    4584:	f240 032c 	movw	r3, #44	; 0x2c
    4588:	f2c2 0300 	movt	r3, #8192	; 0x2000
    458c:	601a      	str	r2, [r3, #0]
}
    458e:	46bd      	mov	sp, r7
    4590:	f85d 7b04 	ldr.w	r7, [sp], #4
    4594:	4770      	bx	lr
    4596:	bf00      	nop

00004598 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    4598:	b480      	push	{r7}
    459a:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
    459c:	f240 032c 	movw	r3, #44	; 0x2c
    45a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    45a4:	681b      	ldr	r3, [r3, #0]
    45a6:	1e5a      	subs	r2, r3, #1
    45a8:	f240 032c 	movw	r3, #44	; 0x2c
    45ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    45b0:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
    45b2:	f240 032c 	movw	r3, #44	; 0x2c
    45b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    45ba:	681b      	ldr	r3, [r3, #0]
    45bc:	2b00      	cmp	r3, #0
    45be:	d103      	bne.n	45c8 <vPortExitCritical+0x30>
	{
		portENABLE_INTERRUPTS();
    45c0:	f04f 0000 	mov.w	r0, #0
    45c4:	f380 8811 	msr	BASEPRI, r0
	}
}
    45c8:	46bd      	mov	sp, r7
    45ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    45ce:	4770      	bx	lr

000045d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    45d0:	f3ef 8009 	mrs	r0, PSP
    45d4:	4b0c      	ldr	r3, [pc, #48]	; (4608 <pxCurrentTCBConst>)
    45d6:	681a      	ldr	r2, [r3, #0]
    45d8:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    45dc:	6010      	str	r0, [r2, #0]
    45de:	e92d 4008 	stmdb	sp!, {r3, lr}
    45e2:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    45e6:	f380 8811 	msr	BASEPRI, r0
    45ea:	f7ff fbd5 	bl	3d98 <vTaskSwitchContext>
    45ee:	f04f 0000 	mov.w	r0, #0
    45f2:	f380 8811 	msr	BASEPRI, r0
    45f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    45fa:	6819      	ldr	r1, [r3, #0]
    45fc:	6808      	ldr	r0, [r1, #0]
    45fe:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    4602:	f380 8809 	msr	PSP, r0
    4606:	4770      	bx	lr

00004608 <pxCurrentTCBConst>:
    4608:	200000b8 	.word	0x200000b8

0000460c <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    460c:	b580      	push	{r7, lr}
    460e:	b082      	sub	sp, #8
    4610:	af00      	add	r7, sp, #0
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
	#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
    4612:	2300      	movs	r3, #0
    4614:	607b      	str	r3, [r7, #4]
    4616:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    461a:	f380 8811 	msr	BASEPRI, r0
	{
		vTaskIncrementTick();
    461e:	f7ff fadd 	bl	3bdc <vTaskIncrementTick>
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
    4622:	f04f 0000 	mov.w	r0, #0
    4626:	f380 8811 	msr	BASEPRI, r0
}
    462a:	3708      	adds	r7, #8
    462c:	46bd      	mov	sp, r7
    462e:	bd80      	pop	{r7, pc}

00004630 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
    4630:	b480      	push	{r7}
    4632:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    4634:	f24e 0314 	movw	r3, #57364	; 0xe014
    4638:	f2ce 0300 	movt	r3, #57344	; 0xe000
    463c:	f641 123f 	movw	r2, #6463	; 0x193f
    4640:	f2c0 0201 	movt	r2, #1
    4644:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    4646:	f24e 0310 	movw	r3, #57360	; 0xe010
    464a:	f2ce 0300 	movt	r3, #57344	; 0xe000
    464e:	2207      	movs	r2, #7
    4650:	601a      	str	r2, [r3, #0]
}
    4652:	46bd      	mov	sp, r7
    4654:	f85d 7b04 	ldr.w	r7, [sp], #4
    4658:	4770      	bx	lr
    465a:	0000      	.short	0x0000
    465c:	e000ed08 	.word	0xe000ed08

00004660 <pvPortMalloc>:
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;										\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    4660:	b580      	push	{r7, lr}
    4662:	b08a      	sub	sp, #40	; 0x28
    4664:	af00      	add	r7, sp, #0
    4666:	6078      	str	r0, [r7, #4]
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
    4668:	2300      	movs	r3, #0
    466a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
    466c:	f7ff f9d4 	bl	3a18 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
    4670:	f24a 13c8 	movw	r3, #41416	; 0xa1c8
    4674:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4678:	681b      	ldr	r3, [r3, #0]
    467a:	2b00      	cmp	r3, #0
    467c:	d130      	bne.n	46e0 <pvPortMalloc+0x80>
		{
			prvHeapInit();
    467e:	f24a 13b8 	movw	r3, #41400	; 0xa1b8
    4682:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4686:	f240 12b8 	movw	r2, #440	; 0x1b8
    468a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    468e:	601a      	str	r2, [r3, #0]
    4690:	f24a 13b8 	movw	r3, #41400	; 0xa1b8
    4694:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4698:	2200      	movs	r2, #0
    469a:	605a      	str	r2, [r3, #4]
    469c:	f24a 13c0 	movw	r3, #41408	; 0xa1c0
    46a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    46a4:	f44f 4220 	mov.w	r2, #40960	; 0xa000
    46a8:	605a      	str	r2, [r3, #4]
    46aa:	f24a 13c0 	movw	r3, #41408	; 0xa1c0
    46ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    46b2:	2200      	movs	r2, #0
    46b4:	601a      	str	r2, [r3, #0]
    46b6:	f240 13b8 	movw	r3, #440	; 0x1b8
    46ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    46be:	617b      	str	r3, [r7, #20]
    46c0:	697b      	ldr	r3, [r7, #20]
    46c2:	f44f 4220 	mov.w	r2, #40960	; 0xa000
    46c6:	605a      	str	r2, [r3, #4]
    46c8:	697a      	ldr	r2, [r7, #20]
    46ca:	f24a 13c0 	movw	r3, #41408	; 0xa1c0
    46ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    46d2:	6013      	str	r3, [r2, #0]
			xHeapHasBeenInitialised = pdTRUE;
    46d4:	f24a 13c8 	movw	r3, #41416	; 0xa1c8
    46d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    46dc:	2201      	movs	r2, #1
    46de:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
    46e0:	687b      	ldr	r3, [r7, #4]
    46e2:	2b00      	cmp	r3, #0
    46e4:	d00d      	beq.n	4702 <pvPortMalloc+0xa2>
		{
			xWantedSize += heapSTRUCT_SIZE;
    46e6:	2310      	movs	r3, #16
    46e8:	687a      	ldr	r2, [r7, #4]
    46ea:	4413      	add	r3, r2
    46ec:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    46ee:	687b      	ldr	r3, [r7, #4]
    46f0:	f003 0307 	and.w	r3, r3, #7
    46f4:	2b00      	cmp	r3, #0
    46f6:	d004      	beq.n	4702 <pvPortMalloc+0xa2>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    46f8:	687b      	ldr	r3, [r7, #4]
    46fa:	f023 0307 	bic.w	r3, r3, #7
    46fe:	3308      	adds	r3, #8
    4700:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configTOTAL_HEAP_SIZE ) )
    4702:	687b      	ldr	r3, [r7, #4]
    4704:	2b00      	cmp	r3, #0
    4706:	d068      	beq.n	47da <pvPortMalloc+0x17a>
    4708:	687b      	ldr	r3, [r7, #4]
    470a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
    470e:	d264      	bcs.n	47da <pvPortMalloc+0x17a>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
    4710:	f24a 13b8 	movw	r3, #41400	; 0xa1b8
    4714:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4718:	623b      	str	r3, [r7, #32]
			pxBlock = xStart.pxNextFreeBlock;
    471a:	f24a 13b8 	movw	r3, #41400	; 0xa1b8
    471e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4722:	681b      	ldr	r3, [r3, #0]
    4724:	627b      	str	r3, [r7, #36]	; 0x24
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    4726:	e004      	b.n	4732 <pvPortMalloc+0xd2>
			{
				pxPreviousBlock = pxBlock;
    4728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    472a:	623b      	str	r3, [r7, #32]
				pxBlock = pxBlock->pxNextFreeBlock;
    472c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    472e:	681b      	ldr	r3, [r3, #0]
    4730:	627b      	str	r3, [r7, #36]	; 0x24
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    4732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4734:	685a      	ldr	r2, [r3, #4]
    4736:	687b      	ldr	r3, [r7, #4]
    4738:	429a      	cmp	r2, r3
    473a:	d203      	bcs.n	4744 <pvPortMalloc+0xe4>
    473c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    473e:	681b      	ldr	r3, [r3, #0]
    4740:	2b00      	cmp	r3, #0
    4742:	d1f1      	bne.n	4728 <pvPortMalloc+0xc8>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
    4744:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    4746:	f24a 13c0 	movw	r3, #41408	; 0xa1c0
    474a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    474e:	429a      	cmp	r2, r3
    4750:	d043      	beq.n	47da <pvPortMalloc+0x17a>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    4752:	6a3b      	ldr	r3, [r7, #32]
    4754:	681a      	ldr	r2, [r3, #0]
    4756:	2310      	movs	r3, #16
    4758:	4413      	add	r3, r2
    475a:	61fb      	str	r3, [r7, #28]

				/* This block is being returned for use so must be taken our of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    475c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    475e:	681a      	ldr	r2, [r3, #0]
    4760:	6a3b      	ldr	r3, [r7, #32]
    4762:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    4764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4766:	685a      	ldr	r2, [r3, #4]
    4768:	687b      	ldr	r3, [r7, #4]
    476a:	1ad2      	subs	r2, r2, r3
    476c:	2310      	movs	r3, #16
    476e:	005b      	lsls	r3, r3, #1
    4770:	429a      	cmp	r2, r3
    4772:	d925      	bls.n	47c0 <pvPortMalloc+0x160>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
    4774:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    4776:	687b      	ldr	r3, [r7, #4]
    4778:	4413      	add	r3, r2
    477a:	613b      	str	r3, [r7, #16]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    477c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    477e:	685a      	ldr	r2, [r3, #4]
    4780:	687b      	ldr	r3, [r7, #4]
    4782:	1ad2      	subs	r2, r2, r3
    4784:	693b      	ldr	r3, [r7, #16]
    4786:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
    4788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    478a:	687a      	ldr	r2, [r7, #4]
    478c:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    478e:	693b      	ldr	r3, [r7, #16]
    4790:	685b      	ldr	r3, [r3, #4]
    4792:	60fb      	str	r3, [r7, #12]
    4794:	f24a 13b8 	movw	r3, #41400	; 0xa1b8
    4798:	f2c2 0300 	movt	r3, #8192	; 0x2000
    479c:	61bb      	str	r3, [r7, #24]
    479e:	e002      	b.n	47a6 <pvPortMalloc+0x146>
    47a0:	69bb      	ldr	r3, [r7, #24]
    47a2:	681b      	ldr	r3, [r3, #0]
    47a4:	61bb      	str	r3, [r7, #24]
    47a6:	69bb      	ldr	r3, [r7, #24]
    47a8:	681b      	ldr	r3, [r3, #0]
    47aa:	685a      	ldr	r2, [r3, #4]
    47ac:	68fb      	ldr	r3, [r7, #12]
    47ae:	429a      	cmp	r2, r3
    47b0:	d3f6      	bcc.n	47a0 <pvPortMalloc+0x140>
    47b2:	69bb      	ldr	r3, [r7, #24]
    47b4:	681a      	ldr	r2, [r3, #0]
    47b6:	693b      	ldr	r3, [r7, #16]
    47b8:	601a      	str	r2, [r3, #0]
    47ba:	69bb      	ldr	r3, [r7, #24]
    47bc:	693a      	ldr	r2, [r7, #16]
    47be:	601a      	str	r2, [r3, #0]
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
    47c0:	f240 0330 	movw	r3, #48	; 0x30
    47c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    47c8:	681a      	ldr	r2, [r3, #0]
    47ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    47cc:	685b      	ldr	r3, [r3, #4]
    47ce:	1ad2      	subs	r2, r2, r3
    47d0:	f240 0330 	movw	r3, #48	; 0x30
    47d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    47d8:	601a      	str	r2, [r3, #0]
			}
		}
	}
	xTaskResumeAll();
    47da:	f7ff f92f 	bl	3a3c <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    47de:	69fb      	ldr	r3, [r7, #28]
}
    47e0:	4618      	mov	r0, r3
    47e2:	3728      	adds	r7, #40	; 0x28
    47e4:	46bd      	mov	sp, r7
    47e6:	bd80      	pop	{r7, pc}

000047e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    47e8:	b580      	push	{r7, lr}
    47ea:	b086      	sub	sp, #24
    47ec:	af00      	add	r7, sp, #0
    47ee:	6078      	str	r0, [r7, #4]
unsigned char *puc = ( unsigned char * ) pv;
    47f0:	687b      	ldr	r3, [r7, #4]
    47f2:	613b      	str	r3, [r7, #16]
xBlockLink *pxLink;

	if( pv )
    47f4:	687b      	ldr	r3, [r7, #4]
    47f6:	2b00      	cmp	r3, #0
    47f8:	d030      	beq.n	485c <vPortFree+0x74>
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
    47fa:	2310      	movs	r3, #16
    47fc:	425b      	negs	r3, r3
    47fe:	693a      	ldr	r2, [r7, #16]
    4800:	4413      	add	r3, r2
    4802:	613b      	str	r3, [r7, #16]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
    4804:	693b      	ldr	r3, [r7, #16]
    4806:	60fb      	str	r3, [r7, #12]

		vTaskSuspendAll();
    4808:	f7ff f906 	bl	3a18 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
    480c:	68fb      	ldr	r3, [r7, #12]
    480e:	685b      	ldr	r3, [r3, #4]
    4810:	60bb      	str	r3, [r7, #8]
    4812:	f24a 13b8 	movw	r3, #41400	; 0xa1b8
    4816:	f2c2 0300 	movt	r3, #8192	; 0x2000
    481a:	617b      	str	r3, [r7, #20]
    481c:	e002      	b.n	4824 <vPortFree+0x3c>
    481e:	697b      	ldr	r3, [r7, #20]
    4820:	681b      	ldr	r3, [r3, #0]
    4822:	617b      	str	r3, [r7, #20]
    4824:	697b      	ldr	r3, [r7, #20]
    4826:	681b      	ldr	r3, [r3, #0]
    4828:	685a      	ldr	r2, [r3, #4]
    482a:	68bb      	ldr	r3, [r7, #8]
    482c:	429a      	cmp	r2, r3
    482e:	d3f6      	bcc.n	481e <vPortFree+0x36>
    4830:	697b      	ldr	r3, [r7, #20]
    4832:	681a      	ldr	r2, [r3, #0]
    4834:	68fb      	ldr	r3, [r7, #12]
    4836:	601a      	str	r2, [r3, #0]
    4838:	697b      	ldr	r3, [r7, #20]
    483a:	68fa      	ldr	r2, [r7, #12]
    483c:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
    483e:	68fb      	ldr	r3, [r7, #12]
    4840:	685a      	ldr	r2, [r3, #4]
    4842:	f240 0330 	movw	r3, #48	; 0x30
    4846:	f2c2 0300 	movt	r3, #8192	; 0x2000
    484a:	681b      	ldr	r3, [r3, #0]
    484c:	441a      	add	r2, r3
    484e:	f240 0330 	movw	r3, #48	; 0x30
    4852:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4856:	601a      	str	r2, [r3, #0]
		}
		xTaskResumeAll();
    4858:	f7ff f8f0 	bl	3a3c <xTaskResumeAll>
	}
}
    485c:	3718      	adds	r7, #24
    485e:	46bd      	mov	sp, r7
    4860:	bd80      	pop	{r7, pc}
    4862:	bf00      	nop

00004864 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    4864:	b480      	push	{r7}
    4866:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
    4868:	f240 0330 	movw	r3, #48	; 0x30
    486c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4870:	681b      	ldr	r3, [r3, #0]
}
    4872:	4618      	mov	r0, r3
    4874:	46bd      	mov	sp, r7
    4876:	f85d 7b04 	ldr.w	r7, [sp], #4
    487a:	4770      	bx	lr

0000487c <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    487c:	b480      	push	{r7}
    487e:	af00      	add	r7, sp, #0
	/* This just exists to keep the linker quiet. */
}
    4880:	46bd      	mov	sp, r7
    4882:	f85d 7b04 	ldr.w	r7, [sp], #4
    4886:	4770      	bx	lr

00004888 <prv_mode_add_task>:
ps_mode_t modes[NUMOFMODES];

static ps_mode_t * current_mode;

void prv_mode_add_task(id_t mode_id, ps_task_t * ptask)
{
    4888:	b480      	push	{r7}
    488a:	b085      	sub	sp, #20
    488c:	af00      	add	r7, sp, #0
    488e:	6078      	str	r0, [r7, #4]
    4890:	6039      	str	r1, [r7, #0]
    int num = modes[mode_id].num;
    4892:	f24a 2300 	movw	r3, #41472	; 0xa200
    4896:	f2c2 0300 	movt	r3, #8192	; 0x2000
    489a:	687a      	ldr	r2, [r7, #4]
    489c:	0152      	lsls	r2, r2, #5
    489e:	4413      	add	r3, r2
    48a0:	330c      	adds	r3, #12
    48a2:	681b      	ldr	r3, [r3, #0]
    48a4:	60fb      	str	r3, [r7, #12]
    modes[mode_id].tasks[num] = ptask;
    48a6:	f24a 2300 	movw	r3, #41472	; 0xa200
    48aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    48ae:	687a      	ldr	r2, [r7, #4]
    48b0:	00d1      	lsls	r1, r2, #3
    48b2:	68fa      	ldr	r2, [r7, #12]
    48b4:	440a      	add	r2, r1
    48b6:	3204      	adds	r2, #4
    48b8:	6839      	ldr	r1, [r7, #0]
    48ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    modes[mode_id].num = num + 1;
    48be:	68fb      	ldr	r3, [r7, #12]
    48c0:	1c5a      	adds	r2, r3, #1
    48c2:	f24a 2300 	movw	r3, #41472	; 0xa200
    48c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    48ca:	6879      	ldr	r1, [r7, #4]
    48cc:	0149      	lsls	r1, r1, #5
    48ce:	440b      	add	r3, r1
    48d0:	330c      	adds	r3, #12
    48d2:	601a      	str	r2, [r3, #0]
}
    48d4:	3714      	adds	r7, #20
    48d6:	46bd      	mov	sp, r7
    48d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    48dc:	4770      	bx	lr
    48de:	bf00      	nop

000048e0 <prv_mode_get_current_mode>:

ps_mode_t * prv_mode_get_current_mode()
{
    48e0:	b480      	push	{r7}
    48e2:	af00      	add	r7, sp, #0
    return current_mode;
    48e4:	f24a 2340 	movw	r3, #41536	; 0xa240
    48e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    48ec:	681b      	ldr	r3, [r3, #0]
}
    48ee:	4618      	mov	r0, r3
    48f0:	46bd      	mov	sp, r7
    48f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    48f6:	4770      	bx	lr

000048f8 <prv_mode_get_task_num>:

int prv_mode_get_task_num(id_t mode_id)
{
    48f8:	b480      	push	{r7}
    48fa:	b083      	sub	sp, #12
    48fc:	af00      	add	r7, sp, #0
    48fe:	6078      	str	r0, [r7, #4]
    return modes[mode_id].num;
    4900:	f24a 2300 	movw	r3, #41472	; 0xa200
    4904:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4908:	687a      	ldr	r2, [r7, #4]
    490a:	0152      	lsls	r2, r2, #5
    490c:	4413      	add	r3, r2
    490e:	330c      	adds	r3, #12
    4910:	681b      	ldr	r3, [r3, #0]
}
    4912:	4618      	mov	r0, r3
    4914:	370c      	adds	r7, #12
    4916:	46bd      	mov	sp, r7
    4918:	f85d 7b04 	ldr.w	r7, [sp], #4
    491c:	4770      	bx	lr
    491e:	bf00      	nop

00004920 <prv_mode_get_mode_period>:

// set function implemented in model_time
tick_t prv_mode_get_mode_period(id_t mode_id)
{
    4920:	b480      	push	{r7}
    4922:	b083      	sub	sp, #12
    4924:	af00      	add	r7, sp, #0
    4926:	6078      	str	r0, [r7, #4]
    return modes[mode_id].period;
    4928:	f24a 2300 	movw	r3, #41472	; 0xa200
    492c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4930:	687a      	ldr	r2, [r7, #4]
    4932:	0152      	lsls	r2, r2, #5
    4934:	4413      	add	r3, r2
    4936:	3304      	adds	r3, #4
    4938:	681b      	ldr	r3, [r3, #0]
}
    493a:	4618      	mov	r0, r3
    493c:	370c      	adds	r7, #12
    493e:	46bd      	mov	sp, r7
    4940:	f85d 7b04 	ldr.w	r7, [sp], #4
    4944:	4770      	bx	lr
    4946:	bf00      	nop

00004948 <prv_mode_set_mode_period>:

void prv_mode_set_mode_period(id_t mode_id , tick_t period)
{
    4948:	b480      	push	{r7}
    494a:	b083      	sub	sp, #12
    494c:	af00      	add	r7, sp, #0
    494e:	6078      	str	r0, [r7, #4]
    4950:	6039      	str	r1, [r7, #0]
    modes[mode_id].period = period;
    4952:	f24a 2300 	movw	r3, #41472	; 0xa200
    4956:	f2c2 0300 	movt	r3, #8192	; 0x2000
    495a:	687a      	ldr	r2, [r7, #4]
    495c:	0152      	lsls	r2, r2, #5
    495e:	4413      	add	r3, r2
    4960:	3304      	adds	r3, #4
    4962:	683a      	ldr	r2, [r7, #0]
    4964:	601a      	str	r2, [r3, #0]
}
    4966:	370c      	adds	r7, #12
    4968:	46bd      	mov	sp, r7
    496a:	f85d 7b04 	ldr.w	r7, [sp], #4
    496e:	4770      	bx	lr

00004970 <prv_mode_get_mode_unit>:

tick_t prv_mode_get_mode_unit(id_t mode_id)
{
    4970:	b480      	push	{r7}
    4972:	b083      	sub	sp, #12
    4974:	af00      	add	r7, sp, #0
    4976:	6078      	str	r0, [r7, #4]
    return modes[mode_id].unit;
    4978:	f24a 2300 	movw	r3, #41472	; 0xa200
    497c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4980:	687a      	ldr	r2, [r7, #4]
    4982:	0152      	lsls	r2, r2, #5
    4984:	4413      	add	r3, r2
    4986:	3308      	adds	r3, #8
    4988:	681b      	ldr	r3, [r3, #0]
}
    498a:	4618      	mov	r0, r3
    498c:	370c      	adds	r7, #12
    498e:	46bd      	mov	sp, r7
    4990:	f85d 7b04 	ldr.w	r7, [sp], #4
    4994:	4770      	bx	lr
    4996:	bf00      	nop

00004998 <prv_mode_set_mode_unit>:
void prv_mode_set_mode_unit(id_t mode_id, tick_t unit)
{
    4998:	b480      	push	{r7}
    499a:	b083      	sub	sp, #12
    499c:	af00      	add	r7, sp, #0
    499e:	6078      	str	r0, [r7, #4]
    49a0:	6039      	str	r1, [r7, #0]
    modes[mode_id].unit  = unit;
    49a2:	f24a 2300 	movw	r3, #41472	; 0xa200
    49a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    49aa:	687a      	ldr	r2, [r7, #4]
    49ac:	0152      	lsls	r2, r2, #5
    49ae:	4413      	add	r3, r2
    49b0:	3308      	adds	r3, #8
    49b2:	683a      	ldr	r2, [r7, #0]
    49b4:	601a      	str	r2, [r3, #0]
}
    49b6:	370c      	adds	r7, #12
    49b8:	46bd      	mov	sp, r7
    49ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    49be:	4770      	bx	lr

000049c0 <ps_mode_create>:


// public API
void ps_mode_create(id_t mode_id, ps_task_t * task_array[], int num)
{
    49c0:	b580      	push	{r7, lr}
    49c2:	b086      	sub	sp, #24
    49c4:	af00      	add	r7, sp, #0
    49c6:	60f8      	str	r0, [r7, #12]
    49c8:	60b9      	str	r1, [r7, #8]
    49ca:	607a      	str	r2, [r7, #4]
    int i;

    modes[mode_id].mode_id = mode_id;
    49cc:	f24a 2300 	movw	r3, #41472	; 0xa200
    49d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    49d4:	68fa      	ldr	r2, [r7, #12]
    49d6:	0152      	lsls	r2, r2, #5
    49d8:	4413      	add	r3, r2
    49da:	68fa      	ldr	r2, [r7, #12]
    49dc:	601a      	str	r2, [r3, #0]
    for(i=0;i<num;++i){
    49de:	2300      	movs	r3, #0
    49e0:	617b      	str	r3, [r7, #20]
    49e2:	e00b      	b.n	49fc <ps_mode_create+0x3c>
        prv_mode_add_task(mode_id, task_array[i]);
    49e4:	697b      	ldr	r3, [r7, #20]
    49e6:	009b      	lsls	r3, r3, #2
    49e8:	68ba      	ldr	r2, [r7, #8]
    49ea:	4413      	add	r3, r2
    49ec:	681b      	ldr	r3, [r3, #0]
    49ee:	68f8      	ldr	r0, [r7, #12]
    49f0:	4619      	mov	r1, r3
    49f2:	f7ff ff49 	bl	4888 <prv_mode_add_task>
void ps_mode_create(id_t mode_id, ps_task_t * task_array[], int num)
{
    int i;

    modes[mode_id].mode_id = mode_id;
    for(i=0;i<num;++i){
    49f6:	697b      	ldr	r3, [r7, #20]
    49f8:	3301      	adds	r3, #1
    49fa:	617b      	str	r3, [r7, #20]
    49fc:	697a      	ldr	r2, [r7, #20]
    49fe:	687b      	ldr	r3, [r7, #4]
    4a00:	429a      	cmp	r2, r3
    4a02:	dbef      	blt.n	49e4 <ps_mode_create+0x24>
        prv_mode_add_task(mode_id, task_array[i]);
    }

    mod.pmode[mod.num] = &modes[mode_id];
    4a04:	f24a 13f4 	movw	r3, #41460	; 0xa1f4
    4a08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a0c:	6818      	ldr	r0, [r3, #0]
    4a0e:	68fb      	ldr	r3, [r7, #12]
    4a10:	015a      	lsls	r2, r3, #5
    4a12:	f24a 2300 	movw	r3, #41472	; 0xa200
    4a16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a1a:	18d1      	adds	r1, r2, r3
    4a1c:	f24a 12f4 	movw	r2, #41460	; 0xa1f4
    4a20:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4a24:	0083      	lsls	r3, r0, #2
    4a26:	4413      	add	r3, r2
    4a28:	6059      	str	r1, [r3, #4]
    mod.num ++;
    4a2a:	f24a 13f4 	movw	r3, #41460	; 0xa1f4
    4a2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a32:	681b      	ldr	r3, [r3, #0]
    4a34:	1c5a      	adds	r2, r3, #1
    4a36:	f24a 13f4 	movw	r3, #41460	; 0xa1f4
    4a3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a3e:	601a      	str	r2, [r3, #0]

}
    4a40:	3718      	adds	r7, #24
    4a42:	46bd      	mov	sp, r7
    4a44:	bd80      	pop	{r7, pc}
    4a46:	bf00      	nop

00004a48 <ps_mode_start>:

void ps_mode_start(id_t mode_id)
{
    4a48:	b580      	push	{r7, lr}
    4a4a:	b084      	sub	sp, #16
    4a4c:	af00      	add	r7, sp, #0
    4a4e:	6078      	str	r0, [r7, #4]
    /*start all the tasks in this mode*/
    int i;
    current_mode = &modes[mode_id];
    4a50:	687b      	ldr	r3, [r7, #4]
    4a52:	015a      	lsls	r2, r3, #5
    4a54:	f24a 2300 	movw	r3, #41472	; 0xa200
    4a58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a5c:	441a      	add	r2, r3
    4a5e:	f24a 2340 	movw	r3, #41536	; 0xa240
    4a62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a66:	601a      	str	r2, [r3, #0]
    for(i=0;i<modes[mode_id].num;++i){
    4a68:	2300      	movs	r3, #0
    4a6a:	60fb      	str	r3, [r7, #12]
    4a6c:	e010      	b.n	4a90 <ps_mode_start+0x48>
        prv_task_start( modes[mode_id].tasks[i]);
    4a6e:	f24a 2300 	movw	r3, #41472	; 0xa200
    4a72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a76:	687a      	ldr	r2, [r7, #4]
    4a78:	00d1      	lsls	r1, r2, #3
    4a7a:	68fa      	ldr	r2, [r7, #12]
    4a7c:	440a      	add	r2, r1
    4a7e:	3204      	adds	r2, #4
    4a80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    4a84:	4618      	mov	r0, r3
    4a86:	f000 f8eb 	bl	4c60 <prv_task_start>
void ps_mode_start(id_t mode_id)
{
    /*start all the tasks in this mode*/
    int i;
    current_mode = &modes[mode_id];
    for(i=0;i<modes[mode_id].num;++i){
    4a8a:	68fb      	ldr	r3, [r7, #12]
    4a8c:	3301      	adds	r3, #1
    4a8e:	60fb      	str	r3, [r7, #12]
    4a90:	f24a 2300 	movw	r3, #41472	; 0xa200
    4a94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a98:	687a      	ldr	r2, [r7, #4]
    4a9a:	0152      	lsls	r2, r2, #5
    4a9c:	4413      	add	r3, r2
    4a9e:	330c      	adds	r3, #12
    4aa0:	681a      	ldr	r2, [r3, #0]
    4aa2:	68fb      	ldr	r3, [r7, #12]
    4aa4:	429a      	cmp	r2, r3
    4aa6:	dce2      	bgt.n	4a6e <ps_mode_start+0x26>
        prv_task_start( modes[mode_id].tasks[i]);
    }
}
    4aa8:	3710      	adds	r7, #16
    4aaa:	46bd      	mov	sp, r7
    4aac:	bd80      	pop	{r7, pc}
    4aae:	bf00      	nop

00004ab0 <ps_mode_switch_create>:


void ps_mode_switch_create(bool (*condition)(void), id_t mode_dest)
{
    4ab0:	b480      	push	{r7}
    4ab2:	b085      	sub	sp, #20
    4ab4:	af00      	add	r7, sp, #0
    4ab6:	6078      	str	r0, [r7, #4]
    4ab8:	6039      	str	r1, [r7, #0]
    int num = cond.num;
    4aba:	f24a 13d0 	movw	r3, #41424	; 0xa1d0
    4abe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ac2:	681b      	ldr	r3, [r3, #0]
    4ac4:	60fb      	str	r3, [r7, #12]
    cond.conditions[num].mode_dest = mode_dest;
    4ac6:	f24a 12d0 	movw	r2, #41424	; 0xa1d0
    4aca:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4ace:	68fb      	ldr	r3, [r7, #12]
    4ad0:	00db      	lsls	r3, r3, #3
    4ad2:	4413      	add	r3, r2
    4ad4:	683a      	ldr	r2, [r7, #0]
    4ad6:	605a      	str	r2, [r3, #4]
    cond.conditions[num].condition = condition;
    4ad8:	f24a 12d0 	movw	r2, #41424	; 0xa1d0
    4adc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4ae0:	68fb      	ldr	r3, [r7, #12]
    4ae2:	00db      	lsls	r3, r3, #3
    4ae4:	4413      	add	r3, r2
    4ae6:	687a      	ldr	r2, [r7, #4]
    4ae8:	609a      	str	r2, [r3, #8]
    cond.num = num + 1;
    4aea:	68fb      	ldr	r3, [r7, #12]
    4aec:	1c5a      	adds	r2, r3, #1
    4aee:	f24a 13d0 	movw	r3, #41424	; 0xa1d0
    4af2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4af6:	601a      	str	r2, [r3, #0]
}
    4af8:	3714      	adds	r7, #20
    4afa:	46bd      	mov	sp, r7
    4afc:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b00:	4770      	bx	lr
    4b02:	bf00      	nop

00004b04 <ps_mode_switch>:

void ps_mode_switch()
{
    4b04:	b580      	push	{r7, lr}
    4b06:	b082      	sub	sp, #8
    4b08:	af00      	add	r7, sp, #0
    int i;
    ps_mode_t * current_mode;
    if( prv_model_time_is_mode_end() == 1){
    4b0a:	f001 f965 	bl	5dd8 <prv_model_time_is_mode_end>
    4b0e:	4603      	mov	r3, r0
    4b10:	2b01      	cmp	r3, #1
    4b12:	d139      	bne.n	4b88 <ps_mode_switch+0x84>
        //port_print("i'm in ps_mode_switch()\n\r");

        for(i=0;i<cond.num;++i){
    4b14:	2300      	movs	r3, #0
    4b16:	607b      	str	r3, [r7, #4]
    4b18:	e01c      	b.n	4b54 <ps_mode_switch+0x50>
            if(cond.conditions[i].condition() == 1){
    4b1a:	f24a 12d0 	movw	r2, #41424	; 0xa1d0
    4b1e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4b22:	687b      	ldr	r3, [r7, #4]
    4b24:	00db      	lsls	r3, r3, #3
    4b26:	4413      	add	r3, r2
    4b28:	689b      	ldr	r3, [r3, #8]
    4b2a:	4798      	blx	r3
    4b2c:	4603      	mov	r3, r0
    4b2e:	2b01      	cmp	r3, #1
    4b30:	d10d      	bne.n	4b4e <ps_mode_switch+0x4a>
                prv_model_time_reset();  // reset the xModeTimeStart
    4b32:	f001 f90f 	bl	5d54 <prv_model_time_reset>
                ps_mode_start(cond.conditions[i].mode_dest);
    4b36:	f24a 12d0 	movw	r2, #41424	; 0xa1d0
    4b3a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4b3e:	687b      	ldr	r3, [r7, #4]
    4b40:	00db      	lsls	r3, r3, #3
    4b42:	4413      	add	r3, r2
    4b44:	685b      	ldr	r3, [r3, #4]
    4b46:	4618      	mov	r0, r3
    4b48:	f7ff ff7e 	bl	4a48 <ps_mode_start>
                break;
    4b4c:	e00a      	b.n	4b64 <ps_mode_switch+0x60>
    int i;
    ps_mode_t * current_mode;
    if( prv_model_time_is_mode_end() == 1){
        //port_print("i'm in ps_mode_switch()\n\r");

        for(i=0;i<cond.num;++i){
    4b4e:	687b      	ldr	r3, [r7, #4]
    4b50:	3301      	adds	r3, #1
    4b52:	607b      	str	r3, [r7, #4]
    4b54:	f24a 13d0 	movw	r3, #41424	; 0xa1d0
    4b58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b5c:	681a      	ldr	r2, [r3, #0]
    4b5e:	687b      	ldr	r3, [r7, #4]
    4b60:	429a      	cmp	r2, r3
    4b62:	dcda      	bgt.n	4b1a <ps_mode_switch+0x16>
                prv_model_time_reset();  // reset the xModeTimeStart
                ps_mode_start(cond.conditions[i].mode_dest);
                break;
            }
        }
        if(i == cond.num){
    4b64:	f24a 13d0 	movw	r3, #41424	; 0xa1d0
    4b68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b6c:	681a      	ldr	r2, [r3, #0]
    4b6e:	687b      	ldr	r3, [r7, #4]
    4b70:	429a      	cmp	r2, r3
    4b72:	d107      	bne.n	4b84 <ps_mode_switch+0x80>
            current_mode = prv_mode_get_current_mode();
    4b74:	f7ff feb4 	bl	48e0 <prv_mode_get_current_mode>
    4b78:	6038      	str	r0, [r7, #0]
            ps_mode_start(current_mode->mode_id);
    4b7a:	683b      	ldr	r3, [r7, #0]
    4b7c:	681b      	ldr	r3, [r3, #0]
    4b7e:	4618      	mov	r0, r3
    4b80:	f7ff ff62 	bl	4a48 <ps_mode_start>
        }

        prv_event_future_model_time_reset();  // when enter new mode period, set the xFutureModelTime as the Input end.
    4b84:	f000 fb9a 	bl	52bc <prv_event_future_model_time_reset>
    }
}
    4b88:	3708      	adds	r7, #8
    4b8a:	46bd      	mov	sp, r7
    4b8c:	bd80      	pop	{r7, pc}
    4b8e:	bf00      	nop

00004b90 <system_start>:



void system_start()
{
    4b90:	b580      	push	{r7, lr}
    4b92:	af00      	add	r7, sp, #0
    prv_model_time_initialize();
    4b94:	f001 f89c 	bl	5cd0 <prv_model_time_initialize>
    prv_event_list_initialize();
    4b98:	f000 faac 	bl	50f4 <prv_event_list_initialize>
    prv_ef_create();
    4b9c:	f000 fe38 	bl	5810 <prv_ef_create>
    ps_mode_start(0);
    4ba0:	2000      	movs	r0, #0
    4ba2:	f7ff ff51 	bl	4a48 <ps_mode_start>
    port_scheduler_start();
    4ba6:	f7fe fef7 	bl	3998 <vTaskStartScheduler>
}
    4baa:	bd80      	pop	{r7, pc}

00004bac <prv_task_get_id>:

struct ps_task_array_t tsk = {0};


id_t   prv_task_get_id(ps_task_t * ptask)
{
    4bac:	b480      	push	{r7}
    4bae:	b083      	sub	sp, #12
    4bb0:	af00      	add	r7, sp, #0
    4bb2:	6078      	str	r0, [r7, #4]
    return ptask->task_id;
    4bb4:	687b      	ldr	r3, [r7, #4]
    4bb6:	681b      	ldr	r3, [r3, #0]
}
    4bb8:	4618      	mov	r0, r3
    4bba:	370c      	adds	r7, #12
    4bbc:	46bd      	mov	sp, r7
    4bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
    4bc2:	4770      	bx	lr

00004bc4 <prv_task_get_LET>:


tick_t prv_task_get_LET(ps_task_t * ptask)
{
    4bc4:	b480      	push	{r7}
    4bc6:	b083      	sub	sp, #12
    4bc8:	af00      	add	r7, sp, #0
    4bca:	6078      	str	r0, [r7, #4]
    return ptask->LET;
    4bcc:	687b      	ldr	r3, [r7, #4]
    4bce:	685b      	ldr	r3, [r3, #4]
}
    4bd0:	4618      	mov	r0, r3
    4bd2:	370c      	adds	r7, #12
    4bd4:	46bd      	mov	sp, r7
    4bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
    4bda:	4770      	bx	lr

00004bdc <prv_task_get_period>:

tick_t prv_task_get_period(ps_task_t * ptask)
{
    4bdc:	b480      	push	{r7}
    4bde:	b083      	sub	sp, #12
    4be0:	af00      	add	r7, sp, #0
    4be2:	6078      	str	r0, [r7, #4]
    return ptask->period;
    4be4:	687b      	ldr	r3, [r7, #4]
    4be6:	689b      	ldr	r3, [r3, #8]
}
    4be8:	4618      	mov	r0, r3
    4bea:	370c      	adds	r7, #12
    4bec:	46bd      	mov	sp, r7
    4bee:	f85d 7b04 	ldr.w	r7, [sp], #4
    4bf2:	4770      	bx	lr

00004bf4 <prv_task_get_deadline>:

tick_t prv_task_get_deadline(ps_task_t * ptask)
{
    4bf4:	b480      	push	{r7}
    4bf6:	b083      	sub	sp, #12
    4bf8:	af00      	add	r7, sp, #0
    4bfa:	6078      	str	r0, [r7, #4]
    return ptask->deadline;
    4bfc:	687b      	ldr	r3, [r7, #4]
    4bfe:	68db      	ldr	r3, [r3, #12]
}
    4c00:	4618      	mov	r0, r3
    4c02:	370c      	adds	r7, #12
    4c04:	46bd      	mov	sp, r7
    4c06:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c0a:	4770      	bx	lr

00004c0c <prv_task_get_servant_num>:

int    prv_task_get_servant_num(ps_task_t * ptask)
{
    4c0c:	b480      	push	{r7}
    4c0e:	b083      	sub	sp, #12
    4c10:	af00      	add	r7, sp, #0
    4c12:	6078      	str	r0, [r7, #4]
    return ptask->servant_num;
    4c14:	687b      	ldr	r3, [r7, #4]
    4c16:	691b      	ldr	r3, [r3, #16]
}
    4c18:	4618      	mov	r0, r3
    4c1a:	370c      	adds	r7, #12
    4c1c:	46bd      	mov	sp, r7
    4c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c22:	4770      	bx	lr

00004c24 <prv_task_get_sensor>:

ps_servant_t * prv_task_get_sensor(ps_task_t * ptask)
{
    4c24:	b480      	push	{r7}
    4c26:	b083      	sub	sp, #12
    4c28:	af00      	add	r7, sp, #0
    4c2a:	6078      	str	r0, [r7, #4]
    return ptask->servants[0];
    4c2c:	687b      	ldr	r3, [r7, #4]
    4c2e:	695b      	ldr	r3, [r3, #20]
}
    4c30:	4618      	mov	r0, r3
    4c32:	370c      	adds	r7, #12
    4c34:	46bd      	mov	sp, r7
    4c36:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c3a:	4770      	bx	lr

00004c3c <prv_task_get_actuator>:

ps_servant_t * prv_task_get_actuator(ps_task_t * ptask)
{
    4c3c:	b480      	push	{r7}
    4c3e:	b083      	sub	sp, #12
    4c40:	af00      	add	r7, sp, #0
    4c42:	6078      	str	r0, [r7, #4]
    return ptask->servants[ptask->servant_num - 1];
    4c44:	687b      	ldr	r3, [r7, #4]
    4c46:	691b      	ldr	r3, [r3, #16]
    4c48:	3b01      	subs	r3, #1
    4c4a:	687a      	ldr	r2, [r7, #4]
    4c4c:	3304      	adds	r3, #4
    4c4e:	009b      	lsls	r3, r3, #2
    4c50:	4413      	add	r3, r2
    4c52:	685b      	ldr	r3, [r3, #4]
}
    4c54:	4618      	mov	r0, r3
    4c56:	370c      	adds	r7, #12
    4c58:	46bd      	mov	sp, r7
    4c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c5e:	4770      	bx	lr

00004c60 <prv_task_start>:

void   prv_task_start(ps_task_t * ptask)
{
    4c60:	b580      	push	{r7, lr}
    4c62:	b084      	sub	sp, #16
    4c64:	af00      	add	r7, sp, #0
    4c66:	6078      	str	r0, [r7, #4]
    ps_servant_t * sensor = prv_task_get_sensor(ptask);
    4c68:	6878      	ldr	r0, [r7, #4]
    4c6a:	f7ff ffdb 	bl	4c24 <prv_task_get_sensor>
    4c6e:	60f8      	str	r0, [r7, #12]
    prv_servant_trigger( sensor );
    4c70:	68f8      	ldr	r0, [r7, #12]
    4c72:	f000 f937 	bl	4ee4 <prv_servant_trigger>
}
    4c76:	3710      	adds	r7, #16
    4c78:	46bd      	mov	sp, r7
    4c7a:	bd80      	pop	{r7, pc}

00004c7c <ps_task_create>:

ps_task_t * ps_task_create(id_t task_id, tick_t LET,
                       ps_servant_t * servants[],
                       int servant_num)
{
    4c7c:	b480      	push	{r7}
    4c7e:	b087      	sub	sp, #28
    4c80:	af00      	add	r7, sp, #0
    4c82:	60f8      	str	r0, [r7, #12]
    4c84:	60b9      	str	r1, [r7, #8]
    4c86:	607a      	str	r2, [r7, #4]
    4c88:	603b      	str	r3, [r7, #0]
    int i;
    int pos = tsk.num;
    4c8a:	f24a 2344 	movw	r3, #41540	; 0xa244
    4c8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c92:	681b      	ldr	r3, [r3, #0]
    4c94:	613b      	str	r3, [r7, #16]
    tsk.tasks[pos].task_id = task_id;
    4c96:	f24a 2344 	movw	r3, #41540	; 0xa244
    4c9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c9e:	693a      	ldr	r2, [r7, #16]
    4ca0:	2194      	movs	r1, #148	; 0x94
    4ca2:	fb01 f202 	mul.w	r2, r1, r2
    4ca6:	4413      	add	r3, r2
    4ca8:	3304      	adds	r3, #4
    4caa:	68fa      	ldr	r2, [r7, #12]
    4cac:	601a      	str	r2, [r3, #0]
    tsk.tasks[pos].LET = tsk.tasks[pos].period = tsk.tasks[pos].deadline = LET;
    4cae:	f24a 2344 	movw	r3, #41540	; 0xa244
    4cb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4cb6:	693a      	ldr	r2, [r7, #16]
    4cb8:	2194      	movs	r1, #148	; 0x94
    4cba:	fb01 f202 	mul.w	r2, r1, r2
    4cbe:	4413      	add	r3, r2
    4cc0:	3310      	adds	r3, #16
    4cc2:	68ba      	ldr	r2, [r7, #8]
    4cc4:	601a      	str	r2, [r3, #0]
    4cc6:	f24a 2344 	movw	r3, #41540	; 0xa244
    4cca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4cce:	693a      	ldr	r2, [r7, #16]
    4cd0:	2194      	movs	r1, #148	; 0x94
    4cd2:	fb01 f202 	mul.w	r2, r1, r2
    4cd6:	4413      	add	r3, r2
    4cd8:	3310      	adds	r3, #16
    4cda:	681a      	ldr	r2, [r3, #0]
    4cdc:	f24a 2344 	movw	r3, #41540	; 0xa244
    4ce0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ce4:	6939      	ldr	r1, [r7, #16]
    4ce6:	2094      	movs	r0, #148	; 0x94
    4ce8:	fb00 f101 	mul.w	r1, r0, r1
    4cec:	440b      	add	r3, r1
    4cee:	330c      	adds	r3, #12
    4cf0:	601a      	str	r2, [r3, #0]
    4cf2:	f24a 2344 	movw	r3, #41540	; 0xa244
    4cf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4cfa:	693a      	ldr	r2, [r7, #16]
    4cfc:	2194      	movs	r1, #148	; 0x94
    4cfe:	fb01 f202 	mul.w	r2, r1, r2
    4d02:	4413      	add	r3, r2
    4d04:	330c      	adds	r3, #12
    4d06:	681a      	ldr	r2, [r3, #0]
    4d08:	f24a 2344 	movw	r3, #41540	; 0xa244
    4d0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d10:	6939      	ldr	r1, [r7, #16]
    4d12:	2094      	movs	r0, #148	; 0x94
    4d14:	fb00 f101 	mul.w	r1, r0, r1
    4d18:	440b      	add	r3, r1
    4d1a:	3308      	adds	r3, #8
    4d1c:	601a      	str	r2, [r3, #0]
    tsk.tasks[pos].servant_num = servant_num;
    4d1e:	f24a 2344 	movw	r3, #41540	; 0xa244
    4d22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d26:	693a      	ldr	r2, [r7, #16]
    4d28:	2194      	movs	r1, #148	; 0x94
    4d2a:	fb01 f202 	mul.w	r2, r1, r2
    4d2e:	4413      	add	r3, r2
    4d30:	3314      	adds	r3, #20
    4d32:	683a      	ldr	r2, [r7, #0]
    4d34:	601a      	str	r2, [r3, #0]

    for(i=0;i<servant_num;++i){
    4d36:	2300      	movs	r3, #0
    4d38:	617b      	str	r3, [r7, #20]
    4d3a:	e029      	b.n	4d90 <ps_task_create+0x114>
        tsk.tasks[pos].servants[i] = servants[i];
    4d3c:	697b      	ldr	r3, [r7, #20]
    4d3e:	009b      	lsls	r3, r3, #2
    4d40:	687a      	ldr	r2, [r7, #4]
    4d42:	4413      	add	r3, r2
    4d44:	6818      	ldr	r0, [r3, #0]
    4d46:	f24a 2244 	movw	r2, #41540	; 0xa244
    4d4a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4d4e:	6939      	ldr	r1, [r7, #16]
    4d50:	460b      	mov	r3, r1
    4d52:	00db      	lsls	r3, r3, #3
    4d54:	440b      	add	r3, r1
    4d56:	009b      	lsls	r3, r3, #2
    4d58:	440b      	add	r3, r1
    4d5a:	6979      	ldr	r1, [r7, #20]
    4d5c:	440b      	add	r3, r1
    4d5e:	3304      	adds	r3, #4
    4d60:	009b      	lsls	r3, r3, #2
    4d62:	4413      	add	r3, r2
    4d64:	6098      	str	r0, [r3, #8]
        tsk.tasks[pos].servants[i]->LET = LET;
    4d66:	f24a 2244 	movw	r2, #41540	; 0xa244
    4d6a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4d6e:	6939      	ldr	r1, [r7, #16]
    4d70:	460b      	mov	r3, r1
    4d72:	00db      	lsls	r3, r3, #3
    4d74:	440b      	add	r3, r1
    4d76:	009b      	lsls	r3, r3, #2
    4d78:	440b      	add	r3, r1
    4d7a:	6979      	ldr	r1, [r7, #20]
    4d7c:	440b      	add	r3, r1
    4d7e:	3304      	adds	r3, #4
    4d80:	009b      	lsls	r3, r3, #2
    4d82:	4413      	add	r3, r2
    4d84:	689b      	ldr	r3, [r3, #8]
    4d86:	68ba      	ldr	r2, [r7, #8]
    4d88:	609a      	str	r2, [r3, #8]
    int pos = tsk.num;
    tsk.tasks[pos].task_id = task_id;
    tsk.tasks[pos].LET = tsk.tasks[pos].period = tsk.tasks[pos].deadline = LET;
    tsk.tasks[pos].servant_num = servant_num;

    for(i=0;i<servant_num;++i){
    4d8a:	697b      	ldr	r3, [r7, #20]
    4d8c:	3301      	adds	r3, #1
    4d8e:	617b      	str	r3, [r7, #20]
    4d90:	697a      	ldr	r2, [r7, #20]
    4d92:	683b      	ldr	r3, [r7, #0]
    4d94:	429a      	cmp	r2, r3
    4d96:	dbd1      	blt.n	4d3c <ps_task_create+0xc0>
        tsk.tasks[pos].servants[i] = servants[i];
        tsk.tasks[pos].servants[i]->LET = LET;
    }
    tsk.num ++;
    4d98:	f24a 2344 	movw	r3, #41540	; 0xa244
    4d9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4da0:	681b      	ldr	r3, [r3, #0]
    4da2:	1c5a      	adds	r2, r3, #1
    4da4:	f24a 2344 	movw	r3, #41540	; 0xa244
    4da8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4dac:	601a      	str	r2, [r3, #0]

	return &tsk.tasks[pos];
    4dae:	693b      	ldr	r3, [r7, #16]
    4db0:	2294      	movs	r2, #148	; 0x94
    4db2:	fb02 f203 	mul.w	r2, r2, r3
    4db6:	f24a 2344 	movw	r3, #41540	; 0xa244
    4dba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4dbe:	4413      	add	r3, r2
    4dc0:	3304      	adds	r3, #4
}
    4dc2:	4618      	mov	r0, r3
    4dc4:	371c      	adds	r7, #28
    4dc6:	46bd      	mov	sp, r7
    4dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
    4dcc:	4770      	bx	lr
    4dce:	bf00      	nop

00004dd0 <prv_servant_get_id>:
extern ps_event_sem_t sem[NUMOFSERVANTS];

ps_servant_t * pservants[NUMOFSERVANTS];

id_t      prv_servant_get_id(ps_servant_t *pservant)
{
    4dd0:	b480      	push	{r7}
    4dd2:	b083      	sub	sp, #12
    4dd4:	af00      	add	r7, sp, #0
    4dd6:	6078      	str	r0, [r7, #4]
    return pservant->servant_id;
    4dd8:	687b      	ldr	r3, [r7, #4]
    4dda:	681b      	ldr	r3, [r3, #0]
}
    4ddc:	4618      	mov	r0, r3
    4dde:	370c      	adds	r7, #12
    4de0:	46bd      	mov	sp, r7
    4de2:	f85d 7b04 	ldr.w	r7, [sp], #4
    4de6:	4770      	bx	lr

00004de8 <prv_servant_get_type>:


int prv_servant_get_type(ps_servant_t * pservant)
{
    4de8:	b480      	push	{r7}
    4dea:	b083      	sub	sp, #12
    4dec:	af00      	add	r7, sp, #0
    4dee:	6078      	str	r0, [r7, #4]
    return pservant->servant_type;
    4df0:	687b      	ldr	r3, [r7, #4]
    4df2:	691b      	ldr	r3, [r3, #16]
}
    4df4:	4618      	mov	r0, r3
    4df6:	370c      	adds	r7, #12
    4df8:	46bd      	mov	sp, r7
    4dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
    4dfe:	4770      	bx	lr

00004e00 <prv_servant_get_LED>:

tick_t    prv_servant_get_LED(ps_servant_t *pservant)
{
    4e00:	b480      	push	{r7}
    4e02:	b083      	sub	sp, #12
    4e04:	af00      	add	r7, sp, #0
    4e06:	6078      	str	r0, [r7, #4]
    return pservant->LED;
    4e08:	687b      	ldr	r3, [r7, #4]
    4e0a:	68db      	ldr	r3, [r3, #12]
}
    4e0c:	4618      	mov	r0, r3
    4e0e:	370c      	adds	r7, #12
    4e10:	46bd      	mov	sp, r7
    4e12:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e16:	4770      	bx	lr

00004e18 <prv_servant_get_LET>:

tick_t    prv_servant_get_LET(ps_servant_t *pservant)
{
    4e18:	b480      	push	{r7}
    4e1a:	b083      	sub	sp, #12
    4e1c:	af00      	add	r7, sp, #0
    4e1e:	6078      	str	r0, [r7, #4]
    return pservant->LET;
    4e20:	687b      	ldr	r3, [r7, #4]
    4e22:	689b      	ldr	r3, [r3, #8]
}
    4e24:	4618      	mov	r0, r3
    4e26:	370c      	adds	r7, #12
    4e28:	46bd      	mov	sp, r7
    4e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e2e:	4770      	bx	lr

00004e30 <prv_servant_get_start_time>:

tick_t prv_servant_get_start_time(ps_servant_t * pservant)
{
    4e30:	b480      	push	{r7}
    4e32:	b083      	sub	sp, #12
    4e34:	af00      	add	r7, sp, #0
    4e36:	6078      	str	r0, [r7, #4]
    return pservant->start_time;
    4e38:	687b      	ldr	r3, [r7, #4]
    4e3a:	685b      	ldr	r3, [r3, #4]
}
    4e3c:	4618      	mov	r0, r3
    4e3e:	370c      	adds	r7, #12
    4e40:	46bd      	mov	sp, r7
    4e42:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e46:	4770      	bx	lr

00004e48 <prv_servant_set_start_time>:

void  prv_servant_set_start_time(ps_servant_t * pservant, tick_t start_time)
{
    4e48:	b480      	push	{r7}
    4e4a:	b083      	sub	sp, #12
    4e4c:	af00      	add	r7, sp, #0
    4e4e:	6078      	str	r0, [r7, #4]
    4e50:	6039      	str	r1, [r7, #0]
    pservant->start_time = start_time;
    4e52:	687b      	ldr	r3, [r7, #4]
    4e54:	683a      	ldr	r2, [r7, #0]
    4e56:	605a      	str	r2, [r3, #4]
}
    4e58:	370c      	adds	r7, #12
    4e5a:	46bd      	mov	sp, r7
    4e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e60:	4770      	bx	lr
    4e62:	bf00      	nop

00004e64 <prv_servant_get_num>:

int  prv_servant_get_num(ps_servant_t *pservant)
{
    4e64:	b480      	push	{r7}
    4e66:	b083      	sub	sp, #12
    4e68:	af00      	add	r7, sp, #0
    4e6a:	6078      	str	r0, [r7, #4]
    return pservant->num;
    4e6c:	687b      	ldr	r3, [r7, #4]
    4e6e:	695b      	ldr	r3, [r3, #20]
}
    4e70:	4618      	mov	r0, r3
    4e72:	370c      	adds	r7, #12
    4e74:	46bd      	mov	sp, r7
    4e76:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e7a:	4770      	bx	lr

00004e7c <prv_servant_get_arrive>:

int  prv_servant_get_arrive(ps_servant_t *pservant)
{
    4e7c:	b480      	push	{r7}
    4e7e:	b083      	sub	sp, #12
    4e80:	af00      	add	r7, sp, #0
    4e82:	6078      	str	r0, [r7, #4]
    return pservant->arrive;
    4e84:	687b      	ldr	r3, [r7, #4]
    4e86:	699b      	ldr	r3, [r3, #24]
}
    4e88:	4618      	mov	r0, r3
    4e8a:	370c      	adds	r7, #12
    4e8c:	46bd      	mov	sp, r7
    4e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e92:	4770      	bx	lr

00004e94 <prv_servant_set_arrive>:

void prv_servant_set_arrive( ps_servant_t * pservant, int n)
{
    4e94:	b480      	push	{r7}
    4e96:	b083      	sub	sp, #12
    4e98:	af00      	add	r7, sp, #0
    4e9a:	6078      	str	r0, [r7, #4]
    4e9c:	6039      	str	r1, [r7, #0]
	pservant->arrive = n;
    4e9e:	687b      	ldr	r3, [r7, #4]
    4ea0:	683a      	ldr	r2, [r7, #0]
    4ea2:	619a      	str	r2, [r3, #24]
}
    4ea4:	370c      	adds	r7, #12
    4ea6:	46bd      	mov	sp, r7
    4ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
    4eac:	4770      	bx	lr
    4eae:	bf00      	nop

00004eb0 <prv_servant_clean_arrive>:

void prv_servant_clean_arrive( ps_servant_t * pservant)
{
    4eb0:	b580      	push	{r7, lr}
    4eb2:	b082      	sub	sp, #8
    4eb4:	af00      	add	r7, sp, #0
    4eb6:	6078      	str	r0, [r7, #4]
	prv_servant_set_arrive(pservant, 0);
    4eb8:	6878      	ldr	r0, [r7, #4]
    4eba:	2100      	movs	r1, #0
    4ebc:	f7ff ffea 	bl	4e94 <prv_servant_set_arrive>
}
    4ec0:	3708      	adds	r7, #8
    4ec2:	46bd      	mov	sp, r7
    4ec4:	bd80      	pop	{r7, pc}
    4ec6:	bf00      	nop

00004ec8 <prv_servant_add_arrive>:

void prv_servant_add_arrive(ps_servant_t *pservant)
{
    4ec8:	b480      	push	{r7}
    4eca:	b083      	sub	sp, #12
    4ecc:	af00      	add	r7, sp, #0
    4ece:	6078      	str	r0, [r7, #4]
    pservant->arrive ++;
    4ed0:	687b      	ldr	r3, [r7, #4]
    4ed2:	699b      	ldr	r3, [r3, #24]
    4ed4:	1c5a      	adds	r2, r3, #1
    4ed6:	687b      	ldr	r3, [r7, #4]
    4ed8:	619a      	str	r2, [r3, #24]
}
    4eda:	370c      	adds	r7, #12
    4edc:	46bd      	mov	sp, r7
    4ede:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ee2:	4770      	bx	lr

00004ee4 <prv_servant_trigger>:

void prv_servant_trigger( ps_servant_t * pservant)
{
    4ee4:	b580      	push	{r7, lr}
    4ee6:	b084      	sub	sp, #16
    4ee8:	af00      	add	r7, sp, #0
    4eea:	6078      	str	r0, [r7, #4]
	id_t servant_id = prv_servant_get_id( pservant );
    4eec:	6878      	ldr	r0, [r7, #4]
    4eee:	f7ff ff6f 	bl	4dd0 <prv_servant_get_id>
    4ef2:	60f8      	str	r0, [r7, #12]
	prv_ef_set_current_servant(pservant);  // mark the dest servant as the current servant
    4ef4:	6878      	ldr	r0, [r7, #4]
    4ef6:	f000 fb0b 	bl	5510 <prv_ef_set_current_servant>
	port_trigger(sem[servant_id]);  // trigger the sem of the dest servant
    4efa:	f24d 33b0 	movw	r3, #54192	; 0xd3b0
    4efe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f02:	68fa      	ldr	r2, [r7, #12]
    4f04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    4f08:	4618      	mov	r0, r3
    4f0a:	2100      	movs	r1, #0
    4f0c:	2200      	movs	r2, #0
    4f0e:	2300      	movs	r3, #0
    4f10:	f7fd feb2 	bl	2c78 <xQueueGenericSend>
}
    4f14:	3710      	adds	r7, #16
    4f16:	46bd      	mov	sp, r7
    4f18:	bd80      	pop	{r7, pc}
    4f1a:	bf00      	nop

00004f1c <ps_servant_create>:
/* create servant and record the time,relation and function information */
ps_servant_t * ps_servant_create(id_t servant_id, int servant_type, tick_t LED,
                                int num,
                                ps_servant_t *src_array[],
                                void (*runnable)(void *))
{
    4f1c:	b580      	push	{r7, lr}
    4f1e:	b08a      	sub	sp, #40	; 0x28
    4f20:	af04      	add	r7, sp, #16
    4f22:	60f8      	str	r0, [r7, #12]
    4f24:	60b9      	str	r1, [r7, #8]
    4f26:	607a      	str	r2, [r7, #4]
    4f28:	603b      	str	r3, [r7, #0]
    int i;
    ps_servant_t * pservant = (ps_servant_t *)port_malloc(sizeof(ps_servant_t));
    4f2a:	201c      	movs	r0, #28
    4f2c:	f7ff fb98 	bl	4660 <pvPortMalloc>
    4f30:	6138      	str	r0, [r7, #16]

    pservant->servant_id = servant_id;
    4f32:	693b      	ldr	r3, [r7, #16]
    4f34:	68fa      	ldr	r2, [r7, #12]
    4f36:	601a      	str	r2, [r3, #0]
    pservant->servant_type = servant_type;
    4f38:	693b      	ldr	r3, [r7, #16]
    4f3a:	68ba      	ldr	r2, [r7, #8]
    4f3c:	611a      	str	r2, [r3, #16]
    pservant->LED = LED;
    4f3e:	693b      	ldr	r3, [r7, #16]
    4f40:	687a      	ldr	r2, [r7, #4]
    4f42:	60da      	str	r2, [r3, #12]
    pservant->num = num;
    4f44:	693b      	ldr	r3, [r7, #16]
    4f46:	683a      	ldr	r2, [r7, #0]
    4f48:	615a      	str	r2, [r3, #20]
    pservant->arrive = 0;
    4f4a:	693b      	ldr	r3, [r7, #16]
    4f4c:	2200      	movs	r2, #0
    4f4e:	619a      	str	r2, [r3, #24]

    pservants[servant_id] = pservant; // store the new servant into servant array
    4f50:	f24a 63e8 	movw	r3, #42728	; 0xa6e8
    4f54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f58:	68fa      	ldr	r2, [r7, #12]
    4f5a:	6939      	ldr	r1, [r7, #16]
    4f5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    port_servant_create(runnable, 2);
    4f60:	2302      	movs	r3, #2
    4f62:	9300      	str	r3, [sp, #0]
    4f64:	2300      	movs	r3, #0
    4f66:	9301      	str	r3, [sp, #4]
    4f68:	2300      	movs	r3, #0
    4f6a:	9302      	str	r3, [sp, #8]
    4f6c:	2300      	movs	r3, #0
    4f6e:	9303      	str	r3, [sp, #12]
    4f70:	6a78      	ldr	r0, [r7, #36]	; 0x24
    4f72:	2100      	movs	r1, #0
    4f74:	2280      	movs	r2, #128	; 0x80
    4f76:	2300      	movs	r3, #0
    4f78:	f7fe f990 	bl	329c <xTaskGenericCreate>

    for(i = 0; i < num; ++ i){
    4f7c:	2300      	movs	r3, #0
    4f7e:	617b      	str	r3, [r7, #20]
    4f80:	e00b      	b.n	4f9a <ps_servant_create+0x7e>
        prv_ef_add_relation(src_array[i], pservant);
    4f82:	697b      	ldr	r3, [r7, #20]
    4f84:	009b      	lsls	r3, r3, #2
    4f86:	6a3a      	ldr	r2, [r7, #32]
    4f88:	4413      	add	r3, r2
    4f8a:	681b      	ldr	r3, [r3, #0]
    4f8c:	4618      	mov	r0, r3
    4f8e:	6939      	ldr	r1, [r7, #16]
    4f90:	f000 fada 	bl	5548 <prv_ef_add_relation>
    pservant->arrive = 0;

    pservants[servant_id] = pservant; // store the new servant into servant array
    port_servant_create(runnable, 2);

    for(i = 0; i < num; ++ i){
    4f94:	697b      	ldr	r3, [r7, #20]
    4f96:	3301      	adds	r3, #1
    4f98:	617b      	str	r3, [r7, #20]
    4f9a:	697a      	ldr	r2, [r7, #20]
    4f9c:	683b      	ldr	r3, [r7, #0]
    4f9e:	429a      	cmp	r2, r3
    4fa0:	dbef      	blt.n	4f82 <ps_servant_create+0x66>
        prv_ef_add_relation(src_array[i], pservant);
    }

	return pservant;
    4fa2:	693b      	ldr	r3, [r7, #16]
}
    4fa4:	4618      	mov	r0, r3
    4fa6:	3718      	adds	r7, #24
    4fa8:	46bd      	mov	sp, r7
    4faa:	bd80      	pop	{r7, pc}

00004fac <ps_servant_cooperate>:

void ps_servant_cooperate()
{
    4fac:	b580      	push	{r7, lr}
    4fae:	af00      	add	r7, sp, #0
    port_trigger(sem[NUMOFSERVANTS-1]);
    4fb0:	f24d 33b0 	movw	r3, #54192	; 0xd3b0
    4fb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    4fba:	4618      	mov	r0, r3
    4fbc:	2100      	movs	r1, #0
    4fbe:	2200      	movs	r2, #0
    4fc0:	2300      	movs	r3, #0
    4fc2:	f7fd fe59 	bl	2c78 <xQueueGenericSend>
    port_servant_yield();
    4fc6:	f7ff fac3 	bl	4550 <vPortYieldFromISR>
    // yield API
}
    4fca:	bd80      	pop	{r7, pc}

00004fcc <prv_event_sem_initialize>:
list_t xEventReadyList;
ps_event_t events[NUMOFRELATIONS];
ps_event_sem_t sem[NUMOFSERVANTS];

static void prv_event_sem_initialize()
{
    4fcc:	b580      	push	{r7, lr}
    4fce:	b082      	sub	sp, #8
    4fd0:	af00      	add	r7, sp, #0
	int i;
	for( i = 0; i < NUMOFSERVANTS; ++ i){
    4fd2:	2300      	movs	r3, #0
    4fd4:	607b      	str	r3, [r7, #4]
    4fd6:	e033      	b.n	5040 <prv_event_sem_initialize+0x74>
        port_pure_event_create( sem[i] );
    4fd8:	2001      	movs	r0, #1
    4fda:	2100      	movs	r1, #0
    4fdc:	2203      	movs	r2, #3
    4fde:	f7fd fdbd 	bl	2b5c <xQueueGenericCreate>
    4fe2:	4601      	mov	r1, r0
    4fe4:	f24d 33b0 	movw	r3, #54192	; 0xd3b0
    4fe8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fec:	687a      	ldr	r2, [r7, #4]
    4fee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    4ff2:	f24d 33b0 	movw	r3, #54192	; 0xd3b0
    4ff6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ffa:	687a      	ldr	r2, [r7, #4]
    4ffc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5000:	2b00      	cmp	r3, #0
    5002:	d00c      	beq.n	501e <prv_event_sem_initialize+0x52>
    5004:	f24d 33b0 	movw	r3, #54192	; 0xd3b0
    5008:	f2c2 0300 	movt	r3, #8192	; 0x2000
    500c:	687a      	ldr	r2, [r7, #4]
    500e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5012:	4618      	mov	r0, r3
    5014:	2100      	movs	r1, #0
    5016:	2200      	movs	r2, #0
    5018:	2300      	movs	r3, #0
    501a:	f7fd fe2d 	bl	2c78 <xQueueGenericSend>
        port_wait( sem[i] );
    501e:	f24d 33b0 	movw	r3, #54192	; 0xd3b0
    5022:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5026:	687a      	ldr	r2, [r7, #4]
    5028:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    502c:	4618      	mov	r0, r3
    502e:	2100      	movs	r1, #0
    5030:	f04f 32ff 	mov.w	r2, #4294967295
    5034:	2300      	movs	r3, #0
    5036:	f7fd fee5 	bl	2e04 <xQueueGenericReceive>
ps_event_sem_t sem[NUMOFSERVANTS];

static void prv_event_sem_initialize()
{
	int i;
	for( i = 0; i < NUMOFSERVANTS; ++ i){
    503a:	687b      	ldr	r3, [r7, #4]
    503c:	3301      	adds	r3, #1
    503e:	607b      	str	r3, [r7, #4]
    5040:	687b      	ldr	r3, [r7, #4]
    5042:	2b1f      	cmp	r3, #31
    5044:	ddc8      	ble.n	4fd8 <prv_event_sem_initialize+0xc>
        port_pure_event_create( sem[i] );
        port_wait( sem[i] );
	}
}
    5046:	3708      	adds	r7, #8
    5048:	46bd      	mov	sp, r7
    504a:	bd80      	pop	{r7, pc}

0000504c <prv_event_initialize>:

void prv_event_initialize()
{
    504c:	b580      	push	{r7, lr}
    504e:	b082      	sub	sp, #8
    5050:	af00      	add	r7, sp, #0
    int i;
    for( i = 0; i < NUMOFRELATIONS; ++i ){
    5052:	2300      	movs	r3, #0
    5054:	607b      	str	r3, [r7, #4]
    5056:	e044      	b.n	50e2 <prv_event_initialize+0x96>
        events[i].pservant_src = NULL;
    5058:	f24a 73b0 	movw	r3, #42928	; 0xa7b0
    505c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5060:	687a      	ldr	r2, [r7, #4]
    5062:	2158      	movs	r1, #88	; 0x58
    5064:	fb01 f202 	mul.w	r2, r1, r2
    5068:	4413      	add	r3, r2
    506a:	2200      	movs	r2, #0
    506c:	601a      	str	r2, [r3, #0]
        events[i].pservant_dest = NULL;
    506e:	f24a 73b0 	movw	r3, #42928	; 0xa7b0
    5072:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5076:	687a      	ldr	r2, [r7, #4]
    5078:	2158      	movs	r1, #88	; 0x58
    507a:	fb01 f202 	mul.w	r2, r1, r2
    507e:	4413      	add	r3, r2
    5080:	2200      	movs	r2, #0
    5082:	605a      	str	r2, [r3, #4]
        events[i].flag = 0;
    5084:	f24a 73b0 	movw	r3, #42928	; 0xa7b0
    5088:	f2c2 0300 	movt	r3, #8192	; 0x2000
    508c:	687a      	ldr	r2, [r7, #4]
    508e:	2158      	movs	r1, #88	; 0x58
    5090:	fb01 f202 	mul.w	r2, r1, r2
    5094:	4413      	add	r3, r2
    5096:	3350      	adds	r3, #80	; 0x50
    5098:	2200      	movs	r2, #0
    509a:	601a      	str	r2, [r3, #0]
        prv_item_initialize(& events[i].eventItem);
    509c:	687b      	ldr	r3, [r7, #4]
    509e:	2258      	movs	r2, #88	; 0x58
    50a0:	fb02 f303 	mul.w	r3, r2, r3
    50a4:	f103 0240 	add.w	r2, r3, #64	; 0x40
    50a8:	f24a 73b0 	movw	r3, #42928	; 0xa7b0
    50ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50b0:	4413      	add	r3, r2
    50b2:	4618      	mov	r0, r3
    50b4:	f000 fbd8 	bl	5868 <prv_item_initialize>

        prv_list_insert(&events[i].eventItem, &xEventIdleList);
    50b8:	687b      	ldr	r3, [r7, #4]
    50ba:	2258      	movs	r2, #88	; 0x58
    50bc:	fb02 f303 	mul.w	r3, r2, r3
    50c0:	f103 0240 	add.w	r2, r3, #64	; 0x40
    50c4:	f24a 73b0 	movw	r3, #42928	; 0xa7b0
    50c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50cc:	4413      	add	r3, r2
    50ce:	4618      	mov	r0, r3
    50d0:	f24a 716c 	movw	r1, #42860	; 0xa76c
    50d4:	f2c2 0100 	movt	r1, #8192	; 0x2000
    50d8:	f000 fbd8 	bl	588c <prv_list_insert>
}

void prv_event_initialize()
{
    int i;
    for( i = 0; i < NUMOFRELATIONS; ++i ){
    50dc:	687b      	ldr	r3, [r7, #4]
    50de:	3301      	adds	r3, #1
    50e0:	607b      	str	r3, [r7, #4]
    50e2:	687b      	ldr	r3, [r7, #4]
    50e4:	2b7f      	cmp	r3, #127	; 0x7f
    50e6:	ddb7      	ble.n	5058 <prv_event_initialize+0xc>
        prv_item_initialize(& events[i].eventItem);

        prv_list_insert(&events[i].eventItem, &xEventIdleList);
    }

	prv_event_sem_initialize();  // init the semaphores
    50e8:	f7ff ff70 	bl	4fcc <prv_event_sem_initialize>
}
    50ec:	3708      	adds	r7, #8
    50ee:	46bd      	mov	sp, r7
    50f0:	bd80      	pop	{r7, pc}
    50f2:	bf00      	nop

000050f4 <prv_event_list_initialize>:

void prv_event_list_initialize()
{
    50f4:	b580      	push	{r7, lr}
    50f6:	af00      	add	r7, sp, #0
    prv_list_initialize(&xEventIdleList);
    50f8:	f24a 706c 	movw	r0, #42860	; 0xa76c
    50fc:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5100:	f000 fb9c 	bl	583c <prv_list_initialize>
    prv_list_initialize(&xEventGlobalList);
    5104:	f24a 707c 	movw	r0, #42876	; 0xa77c
    5108:	f2c2 0000 	movt	r0, #8192	; 0x2000
    510c:	f000 fb96 	bl	583c <prv_list_initialize>
    prv_list_initialize(&xEventLocalList);
    5110:	f24a 708c 	movw	r0, #42892	; 0xa78c
    5114:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5118:	f000 fb90 	bl	583c <prv_list_initialize>
    prv_list_initialize(&xEventReadyList);
    511c:	f24a 709c 	movw	r0, #42908	; 0xa79c
    5120:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5124:	f000 fb8a 	bl	583c <prv_list_initialize>

    prv_event_initialize();
    5128:	f7ff ff90 	bl	504c <prv_event_initialize>
}
    512c:	bd80      	pop	{r7, pc}
    512e:	bf00      	nop

00005130 <prv_event_send>:


// know the dest servant of pevent, and send the event to each of the dest servants
void prv_event_send(ps_event_t *pevent)
{
    5130:	b580      	push	{r7, lr}
    5132:	b082      	sub	sp, #8
    5134:	af00      	add	r7, sp, #0
    5136:	6078      	str	r0, [r7, #4]
    prv_list_insert(&pevent->eventItem, &xEventGlobalList);
    5138:	687b      	ldr	r3, [r7, #4]
    513a:	3340      	adds	r3, #64	; 0x40
    513c:	4618      	mov	r0, r3
    513e:	f24a 717c 	movw	r1, #42876	; 0xa77c
    5142:	f2c2 0100 	movt	r1, #8192	; 0x2000
    5146:	f000 fba1 	bl	588c <prv_list_insert>
}
    514a:	3708      	adds	r7, #8
    514c:	46bd      	mov	sp, r7
    514e:	bd80      	pop	{r7, pc}

00005150 <prv_event_delete>:

void prv_event_delete(ps_event_t * pevent)
{
    5150:	b580      	push	{r7, lr}
    5152:	b082      	sub	sp, #8
    5154:	af00      	add	r7, sp, #0
    5156:	6078      	str	r0, [r7, #4]
    prv_list_insert(&pevent->eventItem, &xEventIdleList);
    5158:	687b      	ldr	r3, [r7, #4]
    515a:	3340      	adds	r3, #64	; 0x40
    515c:	4618      	mov	r0, r3
    515e:	f24a 716c 	movw	r1, #42860	; 0xa76c
    5162:	f2c2 0100 	movt	r1, #8192	; 0x2000
    5166:	f000 fb91 	bl	588c <prv_list_insert>
}
    516a:	3708      	adds	r7, #8
    516c:	46bd      	mov	sp, r7
    516e:	bd80      	pop	{r7, pc}

00005170 <prv_event_tag_set>:

void prv_event_tag_set(ps_event_t * pevent, int microstep)
{
    5170:	b590      	push	{r4, r7, lr}
    5172:	b085      	sub	sp, #20
    5174:	af00      	add	r7, sp, #0
    5176:	6078      	str	r0, [r7, #4]
    5178:	6039      	str	r1, [r7, #0]
	// update the timestamp and init the microstep of event
    ps_servant_t * pservant_src = pevent->pservant_src;
    517a:	687b      	ldr	r3, [r7, #4]
    517c:	681b      	ldr	r3, [r3, #0]
    517e:	60fb      	str	r3, [r7, #12]
	ps_servant_t * pservant_dest = pevent->pservant_dest;
    5180:	687b      	ldr	r3, [r7, #4]
    5182:	685b      	ldr	r3, [r3, #4]
    5184:	60bb      	str	r3, [r7, #8]

	//if(pservant_dest->servant_type == 0){
	//	pevent->tag.timestamp = prv_model_time_output_end();
	//	pevent->tag.microstep = 0;
	//}
	if (pservant_dest->servant_type == 1){
    5186:	68bb      	ldr	r3, [r7, #8]
    5188:	691b      	ldr	r3, [r3, #16]
    518a:	2b01      	cmp	r3, #1
    518c:	d115      	bne.n	51ba <prv_event_tag_set+0x4a>
		if( pservant_src->servant_type == 0){  // sensor communicate with controller
    518e:	68fb      	ldr	r3, [r7, #12]
    5190:	691b      	ldr	r3, [r3, #16]
    5192:	2b00      	cmp	r3, #0
    5194:	d105      	bne.n	51a2 <prv_event_tag_set+0x32>
			pevent->tag.timestamp = prv_model_time_input_end();
    5196:	f000 fdf5 	bl	5d84 <prv_model_time_input_end>
    519a:	4602      	mov	r2, r0
    519c:	687b      	ldr	r3, [r7, #4]
    519e:	60da      	str	r2, [r3, #12]
    51a0:	e014      	b.n	51cc <prv_event_tag_set+0x5c>
		}else{ // controller communicate with controller
			pevent->tag.timestamp = prv_servant_get_start_time(pservant_src) + prv_servant_get_LED(pservant_src);
    51a2:	68f8      	ldr	r0, [r7, #12]
    51a4:	f7ff fe44 	bl	4e30 <prv_servant_get_start_time>
    51a8:	4604      	mov	r4, r0
    51aa:	68f8      	ldr	r0, [r7, #12]
    51ac:	f7ff fe28 	bl	4e00 <prv_servant_get_LED>
    51b0:	4603      	mov	r3, r0
    51b2:	18e2      	adds	r2, r4, r3
    51b4:	687b      	ldr	r3, [r7, #4]
    51b6:	60da      	str	r2, [r3, #12]
    51b8:	e008      	b.n	51cc <prv_event_tag_set+0x5c>
		}
	}
	else if( pservant_dest->servant_type == 2){ // actuator
    51ba:	68bb      	ldr	r3, [r7, #8]
    51bc:	691b      	ldr	r3, [r3, #16]
    51be:	2b02      	cmp	r3, #2
    51c0:	d104      	bne.n	51cc <prv_event_tag_set+0x5c>
		pevent->tag.timestamp = prv_model_time_output_start();
    51c2:	f000 fe01 	bl	5dc8 <prv_model_time_output_start>
    51c6:	4602      	mov	r2, r0
    51c8:	687b      	ldr	r3, [r7, #4]
    51ca:	60da      	str	r2, [r3, #12]

	}else{
		// error happened !!
	}
	pevent->tag.microstep = microstep;
    51cc:	687b      	ldr	r3, [r7, #4]
    51ce:	683a      	ldr	r2, [r7, #0]
    51d0:	611a      	str	r2, [r3, #16]
    pevent->tag.level = prv_servant_get_id(pservant_dest);
    51d2:	68b8      	ldr	r0, [r7, #8]
    51d4:	f7ff fdfc 	bl	4dd0 <prv_servant_get_id>
    51d8:	4602      	mov	r2, r0
    51da:	687b      	ldr	r3, [r7, #4]
    51dc:	615a      	str	r2, [r3, #20]
}
    51de:	3714      	adds	r7, #20
    51e0:	46bd      	mov	sp, r7
    51e2:	bd90      	pop	{r4, r7, pc}

000051e4 <prv_event_tag_update>:


// invoked in prv_event_can_process()
int prv_event_tag_update(ps_event_t * pevent)
{
    51e4:	b580      	push	{r7, lr}
    51e6:	b084      	sub	sp, #16
    51e8:	af00      	add	r7, sp, #0
    51ea:	6078      	str	r0, [r7, #4]
	pevent->tag.timestamp = xFutureModelTime;
    51ec:	f24a 7368 	movw	r3, #42856	; 0xa768
    51f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51f4:	681a      	ldr	r2, [r3, #0]
    51f6:	687b      	ldr	r3, [r7, #4]
    51f8:	60da      	str	r2, [r3, #12]
	tick_t led = pevent->pservant_dest->LED;
    51fa:	687b      	ldr	r3, [r7, #4]
    51fc:	685b      	ldr	r3, [r3, #4]
    51fe:	68db      	ldr	r3, [r3, #12]
    5200:	60fb      	str	r3, [r7, #12]
	if( !prv_event_is_overlap(pevent) && xFutureModelTime < prv_model_time_output_start()){
    5202:	6878      	ldr	r0, [r7, #4]
    5204:	f000 f868 	bl	52d8 <prv_event_is_overlap>
    5208:	4603      	mov	r3, r0
    520a:	2b00      	cmp	r3, #0
    520c:	d117      	bne.n	523e <prv_event_tag_update+0x5a>
    520e:	f000 fddb 	bl	5dc8 <prv_model_time_output_start>
    5212:	4602      	mov	r2, r0
    5214:	f24a 7368 	movw	r3, #42856	; 0xa768
    5218:	f2c2 0300 	movt	r3, #8192	; 0x2000
    521c:	681b      	ldr	r3, [r3, #0]
    521e:	429a      	cmp	r2, r3
    5220:	dd0d      	ble.n	523e <prv_event_tag_update+0x5a>
		// process event pevent at the xFuturemodelTime
		xFutureModelTime += led;
    5222:	f24a 7368 	movw	r3, #42856	; 0xa768
    5226:	f2c2 0300 	movt	r3, #8192	; 0x2000
    522a:	681a      	ldr	r2, [r3, #0]
    522c:	68fb      	ldr	r3, [r7, #12]
    522e:	441a      	add	r2, r3
    5230:	f24a 7368 	movw	r3, #42856	; 0xa768
    5234:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5238:	601a      	str	r2, [r3, #0]
		return 1; // update success
    523a:	2301      	movs	r3, #1
    523c:	e03a      	b.n	52b4 <prv_event_tag_update+0xd0>
	}else if (prv_event_is_overlap(pevent) && xFutureModelTime < prv_model_time_output_start()){
    523e:	6878      	ldr	r0, [r7, #4]
    5240:	f000 f84a 	bl	52d8 <prv_event_is_overlap>
    5244:	4603      	mov	r3, r0
    5246:	2b00      	cmp	r3, #0
    5248:	d027      	beq.n	529a <prv_event_tag_update+0xb6>
    524a:	f000 fdbd 	bl	5dc8 <prv_model_time_output_start>
    524e:	4602      	mov	r2, r0
    5250:	f24a 7368 	movw	r3, #42856	; 0xa768
    5254:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5258:	681b      	ldr	r3, [r3, #0]
    525a:	429a      	cmp	r2, r3
    525c:	dd1d      	ble.n	529a <prv_event_tag_update+0xb6>
		xFutureModelTime = prv_model_time_output_start()+INPUT+OUTPUT;
    525e:	f000 fdb3 	bl	5dc8 <prv_model_time_output_start>
    5262:	4603      	mov	r3, r0
    5264:	1d9a      	adds	r2, r3, #6
    5266:	f24a 7368 	movw	r3, #42856	; 0xa768
    526a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    526e:	601a      	str	r2, [r3, #0]
		pevent->tag.timestamp = xFutureModelTime;
    5270:	f24a 7368 	movw	r3, #42856	; 0xa768
    5274:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5278:	681a      	ldr	r2, [r3, #0]
    527a:	687b      	ldr	r3, [r7, #4]
    527c:	60da      	str	r2, [r3, #12]
		xFutureModelTime += led;
    527e:	f24a 7368 	movw	r3, #42856	; 0xa768
    5282:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5286:	681a      	ldr	r2, [r3, #0]
    5288:	68fb      	ldr	r3, [r7, #12]
    528a:	441a      	add	r2, r3
    528c:	f24a 7368 	movw	r3, #42856	; 0xa768
    5290:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5294:	601a      	str	r2, [r3, #0]
		return 0;
    5296:	2300      	movs	r3, #0
    5298:	e00c      	b.n	52b4 <prv_event_tag_update+0xd0>
	}else{
		xFutureModelTime += led;
    529a:	f24a 7368 	movw	r3, #42856	; 0xa768
    529e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52a2:	681a      	ldr	r2, [r3, #0]
    52a4:	68fb      	ldr	r3, [r7, #12]
    52a6:	441a      	add	r2, r3
    52a8:	f24a 7368 	movw	r3, #42856	; 0xa768
    52ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52b0:	601a      	str	r2, [r3, #0]
		return 0;
    52b2:	2300      	movs	r3, #0
	}
}
    52b4:	4618      	mov	r0, r3
    52b6:	3710      	adds	r7, #16
    52b8:	46bd      	mov	sp, r7
    52ba:	bd80      	pop	{r7, pc}

000052bc <prv_event_future_model_time_reset>:

void prv_event_future_model_time_reset()
{
    52bc:	b580      	push	{r7, lr}
    52be:	af00      	add	r7, sp, #0
	xFutureModelTime = port_get_current_time() + INPUT;
    52c0:	f7fe fc54 	bl	3b6c <xTaskGetTickCount>
    52c4:	4603      	mov	r3, r0
    52c6:	3303      	adds	r3, #3
    52c8:	461a      	mov	r2, r3
    52ca:	f24a 7368 	movw	r3, #42856	; 0xa768
    52ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52d2:	601a      	str	r2, [r3, #0]
}
    52d4:	bd80      	pop	{r7, pc}
    52d6:	bf00      	nop

000052d8 <prv_event_is_overlap>:


// 1 for overlap ; 0 for not overlap
int  prv_event_is_overlap(ps_event_t * pevent)
{
    52d8:	b590      	push	{r4, r7, lr}
    52da:	b085      	sub	sp, #20
    52dc:	af00      	add	r7, sp, #0
    52de:	6078      	str	r0, [r7, #4]
	tick_t led = pevent->pservant_dest->LED;
    52e0:	687b      	ldr	r3, [r7, #4]
    52e2:	685b      	ldr	r3, [r3, #4]
    52e4:	68db      	ldr	r3, [r3, #12]
    52e6:	60fb      	str	r3, [r7, #12]
	if( pevent->tag.timestamp + led > prv_model_time_output_start()){
    52e8:	687b      	ldr	r3, [r7, #4]
    52ea:	68da      	ldr	r2, [r3, #12]
    52ec:	68fb      	ldr	r3, [r7, #12]
    52ee:	18d4      	adds	r4, r2, r3
    52f0:	f000 fd6a 	bl	5dc8 <prv_model_time_output_start>
    52f4:	4603      	mov	r3, r0
    52f6:	429c      	cmp	r4, r3
    52f8:	dd01      	ble.n	52fe <prv_event_is_overlap+0x26>
		return 1;
    52fa:	2301      	movs	r3, #1
    52fc:	e000      	b.n	5300 <prv_event_is_overlap+0x28>
	}else{
		return 0;
    52fe:	2300      	movs	r3, #0
	}
}
    5300:	4618      	mov	r0, r3
    5302:	3714      	adds	r7, #20
    5304:	46bd      	mov	sp, r7
    5306:	bd90      	pop	{r4, r7, pc}

00005308 <prv_event_can_process>:

// 2 for I/O
// 1 for controller
// 0 for no valid
int prv_event_can_process(ps_event_t * pevent)
{
    5308:	b580      	push	{r7, lr}
    530a:	b084      	sub	sp, #16
    530c:	af00      	add	r7, sp, #0
    530e:	6078      	str	r0, [r7, #4]
	int servant_type = pevent->pservant_dest->servant_type;
    5310:	687b      	ldr	r3, [r7, #4]
    5312:	685b      	ldr	r3, [r3, #4]
    5314:	691b      	ldr	r3, [r3, #16]
    5316:	60fb      	str	r3, [r7, #12]
    // servant_type can't be sensor which only triggered by periodic timing events
	if( servant_type == 2){
    5318:	68fb      	ldr	r3, [r7, #12]
    531a:	2b02      	cmp	r3, #2
    531c:	d101      	bne.n	5322 <prv_event_can_process+0x1a>
		return 2;
    531e:	2302      	movs	r3, #2
    5320:	e00c      	b.n	533c <prv_event_can_process+0x34>
	}
    if (servant_type == 1){
    5322:	68fb      	ldr	r3, [r7, #12]
    5324:	2b01      	cmp	r3, #1
    5326:	d109      	bne.n	533c <prv_event_can_process+0x34>
		if(prv_event_tag_update(pevent)){
    5328:	6878      	ldr	r0, [r7, #4]
    532a:	f7ff ff5b 	bl	51e4 <prv_event_tag_update>
    532e:	4603      	mov	r3, r0
    5330:	2b00      	cmp	r3, #0
    5332:	d001      	beq.n	5338 <prv_event_can_process+0x30>
			return 1;
    5334:	2301      	movs	r3, #1
    5336:	e001      	b.n	533c <prv_event_can_process+0x34>
		}else{
			return 0;
    5338:	2300      	movs	r3, #0
    533a:	e7ff      	b.n	533c <prv_event_can_process+0x34>
		}
	}
}
    533c:	4618      	mov	r0, r3
    533e:	3710      	adds	r7, #16
    5340:	46bd      	mov	sp, r7
    5342:	bd80      	pop	{r7, pc}

00005344 <ps_event_wait>:

// wait for specific signal
void ps_event_wait()
{
    5344:	b580      	push	{r7, lr}
    5346:	b082      	sub	sp, #8
    5348:	af00      	add	r7, sp, #0
    ps_servant_t * pservant = prv_ef_get_current_servant();
    534a:	f000 f8f1 	bl	5530 <prv_ef_get_current_servant>
    534e:	6078      	str	r0, [r7, #4]
    id_t current_servant_id = pservant->servant_id;
    5350:	687b      	ldr	r3, [r7, #4]
    5352:	681b      	ldr	r3, [r3, #0]
    5354:	603b      	str	r3, [r7, #0]
    port_wait(sem[current_servant_id]);
    5356:	f24d 33b0 	movw	r3, #54192	; 0xd3b0
    535a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    535e:	683a      	ldr	r2, [r7, #0]
    5360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5364:	4618      	mov	r0, r3
    5366:	2100      	movs	r1, #0
    5368:	f04f 32ff 	mov.w	r2, #4294967295
    536c:	2300      	movs	r3, #0
    536e:	f7fd fd49 	bl	2e04 <xQueueGenericReceive>
}
    5372:	3708      	adds	r7, #8
    5374:	46bd      	mov	sp, r7
    5376:	bd80      	pop	{r7, pc}

00005378 <ps_event_receive>:


ps_data_t * ps_event_receive()
{
    5378:	b580      	push	{r7, lr}
    537a:	b088      	sub	sp, #32
    537c:	af00      	add	r7, sp, #0
    int len, i;
    ps_event_t * pevent[NUMOFINS];
    item_t * item;
    if( 0 != (len = prv_list_get_length( &xEventReadyList ) ) )
    537e:	f24a 739c 	movw	r3, #42908	; 0xa79c
    5382:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5386:	681b      	ldr	r3, [r3, #0]
    5388:	61bb      	str	r3, [r7, #24]
    538a:	69bb      	ldr	r3, [r7, #24]
    538c:	2b00      	cmp	r3, #0
    538e:	d050      	beq.n	5432 <ps_event_receive+0xba>
    {
        item                = prv_list_receive( &xEventReadyList );
    5390:	f24a 709c 	movw	r0, #42908	; 0xa79c
    5394:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5398:	f000 fbd2 	bl	5b40 <prv_list_receive>
    539c:	6178      	str	r0, [r7, #20]
        pevent[0]           = (ps_event_t *)item->item;
    539e:	697b      	ldr	r3, [r7, #20]
    53a0:	681b      	ldr	r3, [r3, #0]
    53a2:	607b      	str	r3, [r7, #4]
        pevent[0]->data.num = len;
    53a4:	687b      	ldr	r3, [r7, #4]
    53a6:	69ba      	ldr	r2, [r7, #24]
    53a8:	619a      	str	r2, [r3, #24]
        // set the start time of servant, important !!!!
        prv_servant_set_start_time( prv_ef_get_current_servant(), pevent[0]->tag.timestamp);
    53aa:	f000 f8c1 	bl	5530 <prv_ef_get_current_servant>
    53ae:	4602      	mov	r2, r0
    53b0:	687b      	ldr	r3, [r7, #4]
    53b2:	68db      	ldr	r3, [r3, #12]
    53b4:	4610      	mov	r0, r2
    53b6:	4619      	mov	r1, r3
    53b8:	f7ff fd46 	bl	4e48 <prv_servant_set_start_time>

        for(i = 1; i < len; ++i){
    53bc:	2301      	movs	r3, #1
    53be:	61fb      	str	r3, [r7, #28]
    53c0:	e02c      	b.n	541c <ps_event_receive+0xa4>
            item                    = prv_list_receive( &xEventReadyList );
    53c2:	f24a 709c 	movw	r0, #42908	; 0xa79c
    53c6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    53ca:	f000 fbb9 	bl	5b40 <prv_list_receive>
    53ce:	6178      	str	r0, [r7, #20]
            pevent[i]               = (ps_event_t *)item->item;
    53d0:	697b      	ldr	r3, [r7, #20]
    53d2:	681a      	ldr	r2, [r3, #0]
    53d4:	69fb      	ldr	r3, [r7, #28]
    53d6:	009b      	lsls	r3, r3, #2
    53d8:	f107 0120 	add.w	r1, r7, #32
    53dc:	440b      	add	r3, r1
    53de:	f843 2c1c 	str.w	r2, [r3, #-28]
            pevent[0]->data.data[i] = pevent[i]->data.data[0];  // integrate events' data
    53e2:	6878      	ldr	r0, [r7, #4]
    53e4:	69fb      	ldr	r3, [r7, #28]
    53e6:	009b      	lsls	r3, r3, #2
    53e8:	f107 0220 	add.w	r2, r7, #32
    53ec:	4413      	add	r3, r2
    53ee:	f853 3c1c 	ldr.w	r3, [r3, #-28]
    53f2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
    53f6:	69f9      	ldr	r1, [r7, #28]
    53f8:	3104      	adds	r1, #4
    53fa:	00c9      	lsls	r1, r1, #3
    53fc:	4401      	add	r1, r0
    53fe:	e9c1 2300 	strd	r2, r3, [r1]

            prv_event_delete(pevent[i]);   // delete left events
    5402:	69fb      	ldr	r3, [r7, #28]
    5404:	009b      	lsls	r3, r3, #2
    5406:	f107 0120 	add.w	r1, r7, #32
    540a:	440b      	add	r3, r1
    540c:	f853 3c1c 	ldr.w	r3, [r3, #-28]
    5410:	4618      	mov	r0, r3
    5412:	f7ff fe9d 	bl	5150 <prv_event_delete>
        pevent[0]           = (ps_event_t *)item->item;
        pevent[0]->data.num = len;
        // set the start time of servant, important !!!!
        prv_servant_set_start_time( prv_ef_get_current_servant(), pevent[0]->tag.timestamp);

        for(i = 1; i < len; ++i){
    5416:	69fb      	ldr	r3, [r7, #28]
    5418:	3301      	adds	r3, #1
    541a:	61fb      	str	r3, [r7, #28]
    541c:	69fa      	ldr	r2, [r7, #28]
    541e:	69bb      	ldr	r3, [r7, #24]
    5420:	429a      	cmp	r2, r3
    5422:	dbce      	blt.n	53c2 <ps_event_receive+0x4a>
            pevent[i]               = (ps_event_t *)item->item;
            pevent[0]->data.data[i] = pevent[i]->data.data[0];  // integrate events' data

            prv_event_delete(pevent[i]);   // delete left events
        }
        prv_event_delete(pevent[0]); // just change the owner of event, but won't delete the memory of event
    5424:	687b      	ldr	r3, [r7, #4]
    5426:	4618      	mov	r0, r3
    5428:	f7ff fe92 	bl	5150 <prv_event_delete>
        return &pevent[0]->data;
    542c:	687b      	ldr	r3, [r7, #4]
    542e:	3318      	adds	r3, #24
    5430:	e000      	b.n	5434 <ps_event_receive+0xbc>
    }
    return NULL;
    5432:	2300      	movs	r3, #0
}
    5434:	4618      	mov	r0, r3
    5436:	3720      	adds	r7, #32
    5438:	46bd      	mov	sp, r7
    543a:	bd80      	pop	{r7, pc}

0000543c <ps_event_create>:


void ps_event_create( ps_data_t * new_data)
{
    543c:	b580      	push	{r7, lr}
    543e:	b088      	sub	sp, #32
    5440:	af00      	add	r7, sp, #0
    5442:	6078      	str	r0, [r7, #4]
    int i, num;
    item_t * pitem;
	ps_event_t * pevent_temp;

    ps_servant_t * pservant = prv_ef_get_current_servant();
    5444:	f000 f874 	bl	5530 <prv_ef_get_current_servant>
    5448:	61b8      	str	r0, [r7, #24]
    num = prv_ef_get_dest_num(pservant);
    544a:	69b8      	ldr	r0, [r7, #24]
    544c:	f000 f830 	bl	54b0 <prv_ef_get_dest_num>
    5450:	6178      	str	r0, [r7, #20]

    for( i = 0; i < num; ++i ){
    5452:	2300      	movs	r3, #0
    5454:	61fb      	str	r3, [r7, #28]
    5456:	e023      	b.n	54a0 <ps_event_create+0x64>
        pitem = prv_list_receive(&xEventIdleList);
    5458:	f24a 706c 	movw	r0, #42860	; 0xa76c
    545c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5460:	f000 fb6e 	bl	5b40 <prv_list_receive>
    5464:	6138      	str	r0, [r7, #16]
        pevent_temp = (ps_event_t *)pitem->item;
    5466:	693b      	ldr	r3, [r7, #16]
    5468:	681b      	ldr	r3, [r3, #0]
    546a:	60fb      	str	r3, [r7, #12]

        pevent_temp->pservant_src  = pservant;
    546c:	68fb      	ldr	r3, [r7, #12]
    546e:	69ba      	ldr	r2, [r7, #24]
    5470:	601a      	str	r2, [r3, #0]
        pevent_temp->pservant_dest = prv_ef_get_ith_dest(pservant,i);
    5472:	69b8      	ldr	r0, [r7, #24]
    5474:	69f9      	ldr	r1, [r7, #28]
    5476:	f000 f831 	bl	54dc <prv_ef_get_ith_dest>
    547a:	4602      	mov	r2, r0
    547c:	68fb      	ldr	r3, [r7, #12]
    547e:	605a      	str	r2, [r3, #4]

        // update the tag of event according to the timing semantics of PSEFM
        prv_event_tag_set(pevent_temp, i);
    5480:	68f8      	ldr	r0, [r7, #12]
    5482:	69f9      	ldr	r1, [r7, #28]
    5484:	f7ff fe74 	bl	5170 <prv_event_tag_set>
        pevent_temp->data.data[0]  = new_data->data[0];
    5488:	687b      	ldr	r3, [r7, #4]
    548a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    548e:	68f9      	ldr	r1, [r7, #12]
    5490:	e9c1 2308 	strd	r2, r3, [r1, #32]

        prv_event_send(pevent_temp);
    5494:	68f8      	ldr	r0, [r7, #12]
    5496:	f7ff fe4b 	bl	5130 <prv_event_send>
	ps_event_t * pevent_temp;

    ps_servant_t * pservant = prv_ef_get_current_servant();
    num = prv_ef_get_dest_num(pservant);

    for( i = 0; i < num; ++i ){
    549a:	69fb      	ldr	r3, [r7, #28]
    549c:	3301      	adds	r3, #1
    549e:	61fb      	str	r3, [r7, #28]
    54a0:	69fa      	ldr	r2, [r7, #28]
    54a2:	697b      	ldr	r3, [r7, #20]
    54a4:	429a      	cmp	r2, r3
    54a6:	dbd7      	blt.n	5458 <ps_event_create+0x1c>
        prv_event_tag_set(pevent_temp, i);
        pevent_temp->data.data[0]  = new_data->data[0];

        prv_event_send(pevent_temp);
    }
}
    54a8:	3720      	adds	r7, #32
    54aa:	46bd      	mov	sp, r7
    54ac:	bd80      	pop	{r7, pc}
    54ae:	bf00      	nop

000054b0 <prv_ef_get_dest_num>:
ps_relation_t srcs[NUMOFSERVANTS];
ps_relation_t dests[NUMOFSERVANTS];


int prv_ef_get_dest_num(ps_servant_t * pservant)
{
    54b0:	b480      	push	{r7}
    54b2:	b083      	sub	sp, #12
    54b4:	af00      	add	r7, sp, #0
    54b6:	6078      	str	r0, [r7, #4]
    return dests[pservant->servant_id].num;
    54b8:	687b      	ldr	r3, [r7, #4]
    54ba:	6819      	ldr	r1, [r3, #0]
    54bc:	f24d 62b4 	movw	r2, #54964	; 0xd6b4
    54c0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    54c4:	460b      	mov	r3, r1
    54c6:	009b      	lsls	r3, r3, #2
    54c8:	440b      	add	r3, r1
    54ca:	009b      	lsls	r3, r3, #2
    54cc:	4413      	add	r3, r2
    54ce:	681b      	ldr	r3, [r3, #0]
}
    54d0:	4618      	mov	r0, r3
    54d2:	370c      	adds	r7, #12
    54d4:	46bd      	mov	sp, r7
    54d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    54da:	4770      	bx	lr

000054dc <prv_ef_get_ith_dest>:

ps_servant_t * prv_ef_get_ith_dest(ps_servant_t * pservant, int i)
{
    54dc:	b480      	push	{r7}
    54de:	b083      	sub	sp, #12
    54e0:	af00      	add	r7, sp, #0
    54e2:	6078      	str	r0, [r7, #4]
    54e4:	6039      	str	r1, [r7, #0]
    return dests[pservant->servant_id].pservants[i];
    54e6:	687b      	ldr	r3, [r7, #4]
    54e8:	6819      	ldr	r1, [r3, #0]
    54ea:	f24d 62b4 	movw	r2, #54964	; 0xd6b4
    54ee:	f2c2 0200 	movt	r2, #8192	; 0x2000
    54f2:	460b      	mov	r3, r1
    54f4:	009b      	lsls	r3, r3, #2
    54f6:	440b      	add	r3, r1
    54f8:	6839      	ldr	r1, [r7, #0]
    54fa:	440b      	add	r3, r1
    54fc:	009b      	lsls	r3, r3, #2
    54fe:	4413      	add	r3, r2
    5500:	685b      	ldr	r3, [r3, #4]
}
    5502:	4618      	mov	r0, r3
    5504:	370c      	adds	r7, #12
    5506:	46bd      	mov	sp, r7
    5508:	f85d 7b04 	ldr.w	r7, [sp], #4
    550c:	4770      	bx	lr
    550e:	bf00      	nop

00005510 <prv_ef_set_current_servant>:

void prv_ef_set_current_servant(ps_servant_t * pservant)
{
    5510:	b480      	push	{r7}
    5512:	b083      	sub	sp, #12
    5514:	af00      	add	r7, sp, #0
    5516:	6078      	str	r0, [r7, #4]
    pcurrent_servant = pservant;
    5518:	f24d 4330 	movw	r3, #54320	; 0xd430
    551c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5520:	687a      	ldr	r2, [r7, #4]
    5522:	601a      	str	r2, [r3, #0]
}
    5524:	370c      	adds	r7, #12
    5526:	46bd      	mov	sp, r7
    5528:	f85d 7b04 	ldr.w	r7, [sp], #4
    552c:	4770      	bx	lr
    552e:	bf00      	nop

00005530 <prv_ef_get_current_servant>:

ps_servant_t * prv_ef_get_current_servant()
{
    5530:	b480      	push	{r7}
    5532:	af00      	add	r7, sp, #0
    return pcurrent_servant;
    5534:	f24d 4330 	movw	r3, #54320	; 0xd430
    5538:	f2c2 0300 	movt	r3, #8192	; 0x2000
    553c:	681b      	ldr	r3, [r3, #0]
}
    553e:	4618      	mov	r0, r3
    5540:	46bd      	mov	sp, r7
    5542:	f85d 7b04 	ldr.w	r7, [sp], #4
    5546:	4770      	bx	lr

00005548 <prv_ef_add_relation>:

void prv_ef_add_relation(ps_servant_t * pservant_src, ps_servant_t * pservant_dest)
{
    5548:	b480      	push	{r7}
    554a:	b085      	sub	sp, #20
    554c:	af00      	add	r7, sp, #0
    554e:	6078      	str	r0, [r7, #4]
    5550:	6039      	str	r1, [r7, #0]
    int num = dests[pservant_src->servant_id].num;
    5552:	687b      	ldr	r3, [r7, #4]
    5554:	6819      	ldr	r1, [r3, #0]
    5556:	f24d 62b4 	movw	r2, #54964	; 0xd6b4
    555a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    555e:	460b      	mov	r3, r1
    5560:	009b      	lsls	r3, r3, #2
    5562:	440b      	add	r3, r1
    5564:	009b      	lsls	r3, r3, #2
    5566:	4413      	add	r3, r2
    5568:	681b      	ldr	r3, [r3, #0]
    556a:	60fb      	str	r3, [r7, #12]
    dests[pservant_src->servant_id].pservants[num] = pservant_dest;
    556c:	687b      	ldr	r3, [r7, #4]
    556e:	6819      	ldr	r1, [r3, #0]
    5570:	f24d 62b4 	movw	r2, #54964	; 0xd6b4
    5574:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5578:	460b      	mov	r3, r1
    557a:	009b      	lsls	r3, r3, #2
    557c:	440b      	add	r3, r1
    557e:	68f9      	ldr	r1, [r7, #12]
    5580:	440b      	add	r3, r1
    5582:	009b      	lsls	r3, r3, #2
    5584:	4413      	add	r3, r2
    5586:	683a      	ldr	r2, [r7, #0]
    5588:	605a      	str	r2, [r3, #4]
    dests[pservant_src->servant_id].num ++;
    558a:	687b      	ldr	r3, [r7, #4]
    558c:	681a      	ldr	r2, [r3, #0]
    558e:	f24d 61b4 	movw	r1, #54964	; 0xd6b4
    5592:	f2c2 0100 	movt	r1, #8192	; 0x2000
    5596:	4613      	mov	r3, r2
    5598:	009b      	lsls	r3, r3, #2
    559a:	4413      	add	r3, r2
    559c:	009b      	lsls	r3, r3, #2
    559e:	440b      	add	r3, r1
    55a0:	681b      	ldr	r3, [r3, #0]
    55a2:	1c58      	adds	r0, r3, #1
    55a4:	f24d 61b4 	movw	r1, #54964	; 0xd6b4
    55a8:	f2c2 0100 	movt	r1, #8192	; 0x2000
    55ac:	4613      	mov	r3, r2
    55ae:	009b      	lsls	r3, r3, #2
    55b0:	4413      	add	r3, r2
    55b2:	009b      	lsls	r3, r3, #2
    55b4:	440b      	add	r3, r1
    55b6:	6018      	str	r0, [r3, #0]

    num = srcs[pservant_dest->servant_id].num;
    55b8:	683b      	ldr	r3, [r7, #0]
    55ba:	6819      	ldr	r1, [r3, #0]
    55bc:	f24d 4234 	movw	r2, #54324	; 0xd434
    55c0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    55c4:	460b      	mov	r3, r1
    55c6:	009b      	lsls	r3, r3, #2
    55c8:	440b      	add	r3, r1
    55ca:	009b      	lsls	r3, r3, #2
    55cc:	4413      	add	r3, r2
    55ce:	681b      	ldr	r3, [r3, #0]
    55d0:	60fb      	str	r3, [r7, #12]
    srcs[pservant_dest->servant_id].pservants[num] = pservant_src;
    55d2:	683b      	ldr	r3, [r7, #0]
    55d4:	6819      	ldr	r1, [r3, #0]
    55d6:	f24d 4234 	movw	r2, #54324	; 0xd434
    55da:	f2c2 0200 	movt	r2, #8192	; 0x2000
    55de:	460b      	mov	r3, r1
    55e0:	009b      	lsls	r3, r3, #2
    55e2:	440b      	add	r3, r1
    55e4:	68f9      	ldr	r1, [r7, #12]
    55e6:	440b      	add	r3, r1
    55e8:	009b      	lsls	r3, r3, #2
    55ea:	4413      	add	r3, r2
    55ec:	687a      	ldr	r2, [r7, #4]
    55ee:	605a      	str	r2, [r3, #4]
    srcs[pservant_dest->servant_id].num ++;
    55f0:	683b      	ldr	r3, [r7, #0]
    55f2:	681a      	ldr	r2, [r3, #0]
    55f4:	f24d 4134 	movw	r1, #54324	; 0xd434
    55f8:	f2c2 0100 	movt	r1, #8192	; 0x2000
    55fc:	4613      	mov	r3, r2
    55fe:	009b      	lsls	r3, r3, #2
    5600:	4413      	add	r3, r2
    5602:	009b      	lsls	r3, r3, #2
    5604:	440b      	add	r3, r1
    5606:	681b      	ldr	r3, [r3, #0]
    5608:	1c58      	adds	r0, r3, #1
    560a:	f24d 4134 	movw	r1, #54324	; 0xd434
    560e:	f2c2 0100 	movt	r1, #8192	; 0x2000
    5612:	4613      	mov	r3, r2
    5614:	009b      	lsls	r3, r3, #2
    5616:	4413      	add	r3, r2
    5618:	009b      	lsls	r3, r3, #2
    561a:	440b      	add	r3, r1
    561c:	6018      	str	r0, [r3, #0]

    pservant_dest->num ++; // the number of source servants
    561e:	683b      	ldr	r3, [r7, #0]
    5620:	695b      	ldr	r3, [r3, #20]
    5622:	1c5a      	adds	r2, r3, #1
    5624:	683b      	ldr	r3, [r7, #0]
    5626:	615a      	str	r2, [r3, #20]
}
    5628:	3714      	adds	r7, #20
    562a:	46bd      	mov	sp, r7
    562c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5630:	4770      	bx	lr
    5632:	bf00      	nop

00005634 <prv_ef_sorting>:

// R-Servant
void prv_ef_sorting()
{
    5634:	b580      	push	{r7, lr}
    5636:	b086      	sub	sp, #24
    5638:	af00      	add	r7, sp, #0
    int i,len;
    item_t * pevent_item, *pevent_temp;
    tick_t pcurrent_time = port_get_current_time();
    563a:	f7fe fa97 	bl	3b6c <xTaskGetTickCount>
    563e:	4603      	mov	r3, r0
    5640:	60fb      	str	r3, [r7, #12]


    // sort the executable events
    pevent_item = prv_list_get_first_item( &xEventGlobalList );
    5642:	f24a 737c 	movw	r3, #42876	; 0xa77c
    5646:	f2c2 0300 	movt	r3, #8192	; 0x2000
    564a:	689b      	ldr	r3, [r3, #8]
    564c:	613b      	str	r3, [r7, #16]
    len = prv_list_get_length( &xEventGlobalList );
    564e:	f24a 737c 	movw	r3, #42876	; 0xa77c
    5652:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5656:	681b      	ldr	r3, [r3, #0]
    5658:	60bb      	str	r3, [r7, #8]
    for( i = 0; i < len; ++i){
    565a:	2300      	movs	r3, #0
    565c:	617b      	str	r3, [r7, #20]
    565e:	e021      	b.n	56a4 <prv_ef_sorting+0x70>

        if(prv_event_get_timestamp((ps_event_t *) pevent_item->item) < pcurrent_time){
    5660:	693b      	ldr	r3, [r7, #16]
    5662:	681b      	ldr	r3, [r3, #0]
    5664:	68da      	ldr	r2, [r3, #12]
    5666:	68fb      	ldr	r3, [r7, #12]
    5668:	429a      	cmp	r2, r3
    566a:	da15      	bge.n	5698 <prv_ef_sorting+0x64>
            pevent_temp = pevent_item;
    566c:	693b      	ldr	r3, [r7, #16]
    566e:	607b      	str	r3, [r7, #4]
            pevent_item = prv_item_get_next( pevent_item);
    5670:	693b      	ldr	r3, [r7, #16]
    5672:	689b      	ldr	r3, [r3, #8]
    5674:	613b      	str	r3, [r7, #16]
            prv_list_remove(pevent_temp);
    5676:	6878      	ldr	r0, [r7, #4]
    5678:	f000 fa00 	bl	5a7c <prv_list_remove>
            prv_list_insert_sorted( pevent_temp, &xEventLocalList);
    567c:	6878      	ldr	r0, [r7, #4]
    567e:	f24a 718c 	movw	r1, #42892	; 0xa78c
    5682:	f2c2 0100 	movt	r1, #8192	; 0x2000
    5686:	f000 f971 	bl	596c <prv_list_insert_sorted>

            // add the arrive record in dest servant
            prv_servant_add_arrive( prv_event_get_dest((ps_event_t *)pevent_item->item ));
    568a:	693b      	ldr	r3, [r7, #16]
    568c:	681b      	ldr	r3, [r3, #0]
    568e:	685b      	ldr	r3, [r3, #4]
    5690:	4618      	mov	r0, r3
    5692:	f7ff fc19 	bl	4ec8 <prv_servant_add_arrive>
    5696:	e002      	b.n	569e <prv_ef_sorting+0x6a>
        }else{
            pevent_item = prv_item_get_next( pevent_item );
    5698:	693b      	ldr	r3, [r7, #16]
    569a:	689b      	ldr	r3, [r3, #8]
    569c:	613b      	str	r3, [r7, #16]


    // sort the executable events
    pevent_item = prv_list_get_first_item( &xEventGlobalList );
    len = prv_list_get_length( &xEventGlobalList );
    for( i = 0; i < len; ++i){
    569e:	697b      	ldr	r3, [r7, #20]
    56a0:	3301      	adds	r3, #1
    56a2:	617b      	str	r3, [r7, #20]
    56a4:	697a      	ldr	r2, [r7, #20]
    56a6:	68bb      	ldr	r3, [r7, #8]
    56a8:	429a      	cmp	r2, r3
    56aa:	dbd9      	blt.n	5660 <prv_ef_sorting+0x2c>
            prv_servant_add_arrive( prv_event_get_dest((ps_event_t *)pevent_item->item ));
        }else{
            pevent_item = prv_item_get_next( pevent_item );
        }
    }
    prv_list_earlist_time_update( &xEventGlobalList);
    56ac:	f24a 707c 	movw	r0, #42876	; 0xa77c
    56b0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    56b4:	f000 fa1e 	bl	5af4 <prv_list_earlist_time_update>
}
    56b8:	3718      	adds	r7, #24
    56ba:	46bd      	mov	sp, r7
    56bc:	bd80      	pop	{r7, pc}
    56be:	bf00      	nop

000056c0 <prv_ef_triggering>:


void prv_ef_triggering()
{
    56c0:	b580      	push	{r7, lr}
    56c2:	b08a      	sub	sp, #40	; 0x28
    56c4:	af00      	add	r7, sp, #0
    item_t * pevent_item, *pevent_temp, *pevent_iterator;
    ps_servant_t * pservant;
    int src_num, i, j, len, flag;

    len = prv_list_get_length(&xEventLocalList);
    56c6:	f24a 738c 	movw	r3, #42892	; 0xa78c
    56ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56ce:	681b      	ldr	r3, [r3, #0]
    56d0:	617b      	str	r3, [r7, #20]
    pevent_item = prv_list_get_first_item(&xEventLocalList);
    56d2:	f24a 738c 	movw	r3, #42892	; 0xa78c
    56d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56da:	689b      	ldr	r3, [r3, #8]
    56dc:	627b      	str	r3, [r7, #36]	; 0x24

    for( i = 0 ; i < len;  i++){
    56de:	2300      	movs	r3, #0
    56e0:	61fb      	str	r3, [r7, #28]
    56e2:	e074      	b.n	57ce <prv_ef_triggering+0x10e>

        pservant = prv_event_get_dest((ps_event_t *)&pevent_item->item);
    56e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    56e6:	685b      	ldr	r3, [r3, #4]
    56e8:	613b      	str	r3, [r7, #16]
        src_num = prv_servant_get_num(pservant);
    56ea:	6938      	ldr	r0, [r7, #16]
    56ec:	f7ff fbba 	bl	4e64 <prv_servant_get_num>
    56f0:	60f8      	str	r0, [r7, #12]
        if(prv_servant_get_arrive(pservant) == src_num){
    56f2:	6938      	ldr	r0, [r7, #16]
    56f4:	f7ff fbc2 	bl	4e7c <prv_servant_get_arrive>
    56f8:	4602      	mov	r2, r0
    56fa:	68fb      	ldr	r3, [r7, #12]
    56fc:	429a      	cmp	r2, r3
    56fe:	d160      	bne.n	57c2 <prv_ef_triggering+0x102>
            prv_servant_clean_arrive(pservant);  // set the arrive of pservant to 0
    5700:	6938      	ldr	r0, [r7, #16]
    5702:	f7ff fbd5 	bl	4eb0 <prv_servant_clean_arrive>
            flag = prv_event_can_process((ps_event_t *)&pevent_item->item);
    5706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5708:	4618      	mov	r0, r3
    570a:	f7ff fdfd 	bl	5308 <prv_event_can_process>
    570e:	60b8      	str	r0, [r7, #8]

            if(2 == flag){
    5710:	68bb      	ldr	r3, [r7, #8]
    5712:	2b02      	cmp	r3, #2
    5714:	d112      	bne.n	573c <prv_ef_triggering+0x7c>
                // if events are I/O events
                pevent_temp = pevent_item;
    5716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5718:	607b      	str	r3, [r7, #4]
                pevent_item = prv_item_get_next(pevent_item);
    571a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    571c:	689b      	ldr	r3, [r3, #8]
    571e:	627b      	str	r3, [r7, #36]	; 0x24
                prv_list_remove(pevent_item);
    5720:	6a78      	ldr	r0, [r7, #36]	; 0x24
    5722:	f000 f9ab 	bl	5a7c <prv_list_remove>
                prv_list_insert(pevent_item, &xEventReadyList);
    5726:	6a78      	ldr	r0, [r7, #36]	; 0x24
    5728:	f24a 719c 	movw	r1, #42908	; 0xa79c
    572c:	f2c2 0100 	movt	r1, #8192	; 0x2000
    5730:	f000 f8ac 	bl	588c <prv_list_insert>

                prv_servant_trigger(pservant);
    5734:	6938      	ldr	r0, [r7, #16]
    5736:	f7ff fbd5 	bl	4ee4 <prv_servant_trigger>
                break;
    573a:	e04c      	b.n	57d6 <prv_ef_triggering+0x116>
            } else if( 1 == flag){
    573c:	68bb      	ldr	r3, [r7, #8]
    573e:	2b01      	cmp	r3, #1
    5740:	d12f      	bne.n	57a2 <prv_ef_triggering+0xe2>
                // if events are executable controller events, then process the events with same dest servant
                pevent_iterator = pevent_item;
    5742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5744:	623b      	str	r3, [r7, #32]
                for(j=0; j < src_num && i < len;){
    5746:	2300      	movs	r3, #0
    5748:	61bb      	str	r3, [r7, #24]
    574a:	e01e      	b.n	578a <prv_ef_triggering+0xca>
                    if(pservant == prv_event_get_dest((ps_event_t *)pevent_iterator->item)){
    574c:	6a3b      	ldr	r3, [r7, #32]
    574e:	681b      	ldr	r3, [r3, #0]
    5750:	685a      	ldr	r2, [r3, #4]
    5752:	693b      	ldr	r3, [r7, #16]
    5754:	429a      	cmp	r2, r3
    5756:	d112      	bne.n	577e <prv_ef_triggering+0xbe>
                        // send events to ready list
                        pevent_temp = pevent_iterator;
    5758:	6a3b      	ldr	r3, [r7, #32]
    575a:	607b      	str	r3, [r7, #4]
                        pevent_iterator = prv_item_get_next(pevent_iterator);
    575c:	6a3b      	ldr	r3, [r7, #32]
    575e:	689b      	ldr	r3, [r3, #8]
    5760:	623b      	str	r3, [r7, #32]
                        prv_list_remove(pevent_temp);
    5762:	6878      	ldr	r0, [r7, #4]
    5764:	f000 f98a 	bl	5a7c <prv_list_remove>
                        prv_list_insert(pevent_temp, &xEventReadyList);
    5768:	6878      	ldr	r0, [r7, #4]
    576a:	f24a 719c 	movw	r1, #42908	; 0xa79c
    576e:	f2c2 0100 	movt	r1, #8192	; 0x2000
    5772:	f000 f88b 	bl	588c <prv_list_insert>
                        j ++;
    5776:	69bb      	ldr	r3, [r7, #24]
    5778:	3301      	adds	r3, #1
    577a:	61bb      	str	r3, [r7, #24]
    577c:	e002      	b.n	5784 <prv_ef_triggering+0xc4>
                    }else{
                        pevent_iterator = prv_item_get_next(pevent_iterator);
    577e:	6a3b      	ldr	r3, [r7, #32]
    5780:	689b      	ldr	r3, [r3, #8]
    5782:	623b      	str	r3, [r7, #32]
                    }
                    i ++;
    5784:	69fb      	ldr	r3, [r7, #28]
    5786:	3301      	adds	r3, #1
    5788:	61fb      	str	r3, [r7, #28]
                prv_servant_trigger(pservant);
                break;
            } else if( 1 == flag){
                // if events are executable controller events, then process the events with same dest servant
                pevent_iterator = pevent_item;
                for(j=0; j < src_num && i < len;){
    578a:	69ba      	ldr	r2, [r7, #24]
    578c:	68fb      	ldr	r3, [r7, #12]
    578e:	429a      	cmp	r2, r3
    5790:	da03      	bge.n	579a <prv_ef_triggering+0xda>
    5792:	69fa      	ldr	r2, [r7, #28]
    5794:	697b      	ldr	r3, [r7, #20]
    5796:	429a      	cmp	r2, r3
    5798:	dbd8      	blt.n	574c <prv_ef_triggering+0x8c>
                        pevent_iterator = prv_item_get_next(pevent_iterator);
                    }
                    i ++;
                } // end for

                prv_servant_trigger(pservant);
    579a:	6938      	ldr	r0, [r7, #16]
    579c:	f7ff fba2 	bl	4ee4 <prv_servant_trigger>
                break;
    57a0:	e019      	b.n	57d6 <prv_ef_triggering+0x116>
            }else{
                // transit all the left event in local list into the global event list
                pevent_temp = pevent_item;
    57a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    57a4:	607b      	str	r3, [r7, #4]
                pevent_item = prv_item_get_next(pevent_item);
    57a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    57a8:	689b      	ldr	r3, [r3, #8]
    57aa:	627b      	str	r3, [r7, #36]	; 0x24
                prv_list_remove(pevent_temp);
    57ac:	6878      	ldr	r0, [r7, #4]
    57ae:	f000 f965 	bl	5a7c <prv_list_remove>
                prv_list_insert(pevent_temp,&xEventGlobalList);
    57b2:	6878      	ldr	r0, [r7, #4]
    57b4:	f24a 717c 	movw	r1, #42876	; 0xa77c
    57b8:	f2c2 0100 	movt	r1, #8192	; 0x2000
    57bc:	f000 f866 	bl	588c <prv_list_insert>
    57c0:	e002      	b.n	57c8 <prv_ef_triggering+0x108>
            }
        }
        else{
            pevent_item = prv_item_get_next(pevent_item);
    57c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    57c4:	689b      	ldr	r3, [r3, #8]
    57c6:	627b      	str	r3, [r7, #36]	; 0x24
    int src_num, i, j, len, flag;

    len = prv_list_get_length(&xEventLocalList);
    pevent_item = prv_list_get_first_item(&xEventLocalList);

    for( i = 0 ; i < len;  i++){
    57c8:	69fb      	ldr	r3, [r7, #28]
    57ca:	3301      	adds	r3, #1
    57cc:	61fb      	str	r3, [r7, #28]
    57ce:	69fa      	ldr	r2, [r7, #28]
    57d0:	697b      	ldr	r3, [r7, #20]
    57d2:	429a      	cmp	r2, r3
    57d4:	db86      	blt.n	56e4 <prv_ef_triggering+0x24>
        }
        else{
            pevent_item = prv_item_get_next(pevent_item);
        }
    }// end for
}
    57d6:	3728      	adds	r7, #40	; 0x28
    57d8:	46bd      	mov	sp, r7
    57da:	bd80      	pop	{r7, pc}

000057dc <R_Servant>:


static void R_Servant()
{
    57dc:	b580      	push	{r7, lr}
    57de:	af00      	add	r7, sp, #0
    while(1){
        port_wait(sem[NUMOFSERVANTS-1]);
    57e0:	f24d 33b0 	movw	r3, #54192	; 0xd3b0
    57e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    57e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    57ea:	4618      	mov	r0, r3
    57ec:	2100      	movs	r1, #0
    57ee:	f04f 32ff 	mov.w	r2, #4294967295
    57f2:	2300      	movs	r3, #0
    57f4:	f7fd fb06 	bl	2e04 <xQueueGenericReceive>

        port_print("i'm in R-Servant\n\r");
    57f8:	f246 50d0 	movw	r0, #26064	; 0x65d0
    57fc:	f2c0 0000 	movt	r0, #0
    5800:	f000 fc94 	bl	612c <vPrintString>
        prv_ef_sorting();
    5804:	f7ff ff16 	bl	5634 <prv_ef_sorting>
        prv_ef_triggering();
    5808:	f7ff ff5a 	bl	56c0 <prv_ef_triggering>
    }
    580c:	e7e8      	b.n	57e0 <R_Servant+0x4>
    580e:	bf00      	nop

00005810 <prv_ef_create>:
}

void prv_ef_create()
{
    5810:	b580      	push	{r7, lr}
    5812:	b084      	sub	sp, #16
    5814:	af04      	add	r7, sp, #16
    port_servant_create(R_Servant, 1);
    5816:	2301      	movs	r3, #1
    5818:	9300      	str	r3, [sp, #0]
    581a:	2300      	movs	r3, #0
    581c:	9301      	str	r3, [sp, #4]
    581e:	2300      	movs	r3, #0
    5820:	9302      	str	r3, [sp, #8]
    5822:	2300      	movs	r3, #0
    5824:	9303      	str	r3, [sp, #12]
    5826:	f245 70dd 	movw	r0, #22493	; 0x57dd
    582a:	f2c0 0000 	movt	r0, #0
    582e:	2100      	movs	r1, #0
    5830:	2280      	movs	r2, #128	; 0x80
    5832:	2300      	movs	r3, #0
    5834:	f7fd fd32 	bl	329c <xTaskGenericCreate>
}
    5838:	46bd      	mov	sp, r7
    583a:	bd80      	pop	{r7, pc}

0000583c <prv_list_initialize>:
#include "list_internal.h"
#include "event.h"

void prv_list_initialize(list_t * pEventList)
{
    583c:	b480      	push	{r7}
    583e:	b083      	sub	sp, #12
    5840:	af00      	add	r7, sp, #0
    5842:	6078      	str	r0, [r7, #4]
    pEventList->length = 0;
    5844:	687b      	ldr	r3, [r7, #4]
    5846:	2200      	movs	r2, #0
    5848:	601a      	str	r2, [r3, #0]
    pEventList->earliest_time = 0;
    584a:	687b      	ldr	r3, [r7, #4]
    584c:	2200      	movs	r2, #0
    584e:	605a      	str	r2, [r3, #4]
    pEventList->first = pEventList->last = NULL;
    5850:	687b      	ldr	r3, [r7, #4]
    5852:	2200      	movs	r2, #0
    5854:	60da      	str	r2, [r3, #12]
    5856:	687b      	ldr	r3, [r7, #4]
    5858:	68da      	ldr	r2, [r3, #12]
    585a:	687b      	ldr	r3, [r7, #4]
    585c:	609a      	str	r2, [r3, #8]
}
    585e:	370c      	adds	r7, #12
    5860:	46bd      	mov	sp, r7
    5862:	f85d 7b04 	ldr.w	r7, [sp], #4
    5866:	4770      	bx	lr

00005868 <prv_item_initialize>:

void prv_item_initialize(item_t * pEventItem)
{
    5868:	b480      	push	{r7}
    586a:	b083      	sub	sp, #12
    586c:	af00      	add	r7, sp, #0
    586e:	6078      	str	r0, [r7, #4]
    pEventItem->owner = NULL;
    5870:	687b      	ldr	r3, [r7, #4]
    5872:	2200      	movs	r2, #0
    5874:	605a      	str	r2, [r3, #4]
    pEventItem->next = NULL;
    5876:	687b      	ldr	r3, [r7, #4]
    5878:	2200      	movs	r2, #0
    587a:	609a      	str	r2, [r3, #8]
    pEventItem->prev = NULL;
    587c:	687b      	ldr	r3, [r7, #4]
    587e:	2200      	movs	r2, #0
    5880:	60da      	str	r2, [r3, #12]
}
    5882:	370c      	adds	r7, #12
    5884:	46bd      	mov	sp, r7
    5886:	f85d 7b04 	ldr.w	r7, [sp], #4
    588a:	4770      	bx	lr

0000588c <prv_list_insert>:

void prv_list_insert( item_t * pEventItem, list_t * pEventList)
{
    588c:	b480      	push	{r7}
    588e:	b085      	sub	sp, #20
    5890:	af00      	add	r7, sp, #0
    5892:	6078      	str	r0, [r7, #4]
    5894:	6039      	str	r1, [r7, #0]
    ps_event_t * pevent = (ps_event_t *) prv_item_get_entity(pEventItem);
    5896:	687b      	ldr	r3, [r7, #4]
    5898:	681b      	ldr	r3, [r3, #0]
    589a:	60fb      	str	r3, [r7, #12]

    if(pEventList->length == 0){
    589c:	683b      	ldr	r3, [r7, #0]
    589e:	681b      	ldr	r3, [r3, #0]
    58a0:	2b00      	cmp	r3, #0
    58a2:	d10d      	bne.n	58c0 <prv_list_insert+0x34>
        pEventList->first = pEventList->last = pEventItem;
    58a4:	683b      	ldr	r3, [r7, #0]
    58a6:	687a      	ldr	r2, [r7, #4]
    58a8:	60da      	str	r2, [r3, #12]
    58aa:	683b      	ldr	r3, [r7, #0]
    58ac:	68da      	ldr	r2, [r3, #12]
    58ae:	683b      	ldr	r3, [r7, #0]
    58b0:	609a      	str	r2, [r3, #8]
        pEventItem->prev = pEventItem;
    58b2:	687b      	ldr	r3, [r7, #4]
    58b4:	687a      	ldr	r2, [r7, #4]
    58b6:	60da      	str	r2, [r3, #12]
        pEventItem->next = pEventItem;
    58b8:	687b      	ldr	r3, [r7, #4]
    58ba:	687a      	ldr	r2, [r7, #4]
    58bc:	609a      	str	r2, [r3, #8]
    58be:	e00e      	b.n	58de <prv_list_insert+0x52>
    }else{
        pEventList->last->next = pEventItem;
    58c0:	683b      	ldr	r3, [r7, #0]
    58c2:	68db      	ldr	r3, [r3, #12]
    58c4:	687a      	ldr	r2, [r7, #4]
    58c6:	609a      	str	r2, [r3, #8]
        pEventItem->prev = pEventList->last;
    58c8:	683b      	ldr	r3, [r7, #0]
    58ca:	68da      	ldr	r2, [r3, #12]
    58cc:	687b      	ldr	r3, [r7, #4]
    58ce:	60da      	str	r2, [r3, #12]
        pEventItem->next = pEventList->first;
    58d0:	683b      	ldr	r3, [r7, #0]
    58d2:	689a      	ldr	r2, [r3, #8]
    58d4:	687b      	ldr	r3, [r7, #4]
    58d6:	609a      	str	r2, [r3, #8]
        pEventList->last = pEventItem;
    58d8:	683b      	ldr	r3, [r7, #0]
    58da:	687a      	ldr	r2, [r7, #4]
    58dc:	60da      	str	r2, [r3, #12]
    }

    if(pEventList->earliest_time > pevent->tag.timestamp){
    58de:	683b      	ldr	r3, [r7, #0]
    58e0:	685a      	ldr	r2, [r3, #4]
    58e2:	68fb      	ldr	r3, [r7, #12]
    58e4:	68db      	ldr	r3, [r3, #12]
    58e6:	429a      	cmp	r2, r3
    58e8:	dd03      	ble.n	58f2 <prv_list_insert+0x66>
        pEventList->earliest_time = pevent->tag.timestamp;
    58ea:	68fb      	ldr	r3, [r7, #12]
    58ec:	68da      	ldr	r2, [r3, #12]
    58ee:	683b      	ldr	r3, [r7, #0]
    58f0:	605a      	str	r2, [r3, #4]
    }
    pEventList->length ++;
    58f2:	683b      	ldr	r3, [r7, #0]
    58f4:	681b      	ldr	r3, [r3, #0]
    58f6:	1c5a      	adds	r2, r3, #1
    58f8:	683b      	ldr	r3, [r7, #0]
    58fa:	601a      	str	r2, [r3, #0]
    pEventItem->owner = (void *)pEventList;
    58fc:	687b      	ldr	r3, [r7, #4]
    58fe:	683a      	ldr	r2, [r7, #0]
    5900:	605a      	str	r2, [r3, #4]
}
    5902:	3714      	adds	r7, #20
    5904:	46bd      	mov	sp, r7
    5906:	f85d 7b04 	ldr.w	r7, [sp], #4
    590a:	4770      	bx	lr

0000590c <tag_compare>:

static int tag_compare(ps_event_t * pe1, ps_event_t *pe2)
{
    590c:	b480      	push	{r7}
    590e:	b083      	sub	sp, #12
    5910:	af00      	add	r7, sp, #0
    5912:	6078      	str	r0, [r7, #4]
    5914:	6039      	str	r1, [r7, #0]
    if( pe1->tag.timestamp < pe2->tag.timestamp ){
    5916:	687b      	ldr	r3, [r7, #4]
    5918:	68da      	ldr	r2, [r3, #12]
    591a:	683b      	ldr	r3, [r7, #0]
    591c:	68db      	ldr	r3, [r3, #12]
    591e:	429a      	cmp	r2, r3
    5920:	da01      	bge.n	5926 <tag_compare+0x1a>
        return 1;
    5922:	2301      	movs	r3, #1
    5924:	e01c      	b.n	5960 <tag_compare+0x54>
    }else if( pe1->tag.timestamp == pe2->tag.timestamp ){
    5926:	687b      	ldr	r3, [r7, #4]
    5928:	68da      	ldr	r2, [r3, #12]
    592a:	683b      	ldr	r3, [r7, #0]
    592c:	68db      	ldr	r3, [r3, #12]
    592e:	429a      	cmp	r2, r3
    5930:	d115      	bne.n	595e <tag_compare+0x52>
        if( pe1->tag.microstep < pe2->tag.microstep ){
    5932:	687b      	ldr	r3, [r7, #4]
    5934:	691a      	ldr	r2, [r3, #16]
    5936:	683b      	ldr	r3, [r7, #0]
    5938:	691b      	ldr	r3, [r3, #16]
    593a:	429a      	cmp	r2, r3
    593c:	da01      	bge.n	5942 <tag_compare+0x36>
            return 1;
    593e:	2301      	movs	r3, #1
    5940:	e00e      	b.n	5960 <tag_compare+0x54>
        }else if( pe1->tag.microstep == pe2->tag.microstep ){
    5942:	687b      	ldr	r3, [r7, #4]
    5944:	691a      	ldr	r2, [r3, #16]
    5946:	683b      	ldr	r3, [r7, #0]
    5948:	691b      	ldr	r3, [r3, #16]
    594a:	429a      	cmp	r2, r3
    594c:	d107      	bne.n	595e <tag_compare+0x52>
            if( pe1->tag.level < pe2->tag.level ){
    594e:	687b      	ldr	r3, [r7, #4]
    5950:	695a      	ldr	r2, [r3, #20]
    5952:	683b      	ldr	r3, [r7, #0]
    5954:	695b      	ldr	r3, [r3, #20]
    5956:	429a      	cmp	r2, r3
    5958:	da01      	bge.n	595e <tag_compare+0x52>
                return 1;
    595a:	2301      	movs	r3, #1
    595c:	e000      	b.n	5960 <tag_compare+0x54>
            }
        }
    }

    return 0;
    595e:	2300      	movs	r3, #0
}
    5960:	4618      	mov	r0, r3
    5962:	370c      	adds	r7, #12
    5964:	46bd      	mov	sp, r7
    5966:	f85d 7b04 	ldr.w	r7, [sp], #4
    596a:	4770      	bx	lr

0000596c <prv_list_insert_sorted>:

void prv_list_insert_sorted(item_t * pEventItem, list_t * pEventList)
{
    596c:	b580      	push	{r7, lr}
    596e:	b084      	sub	sp, #16
    5970:	af00      	add	r7, sp, #0
    5972:	6078      	str	r0, [r7, #4]
    5974:	6039      	str	r1, [r7, #0]
    ps_event_t * pevent = (ps_event_t *)prv_item_get_entity(pEventItem);
    5976:	687b      	ldr	r3, [r7, #4]
    5978:	681b      	ldr	r3, [r3, #0]
    597a:	60bb      	str	r3, [r7, #8]
    volatile  item_t * pIndex;

    if(pEventList->length == 0){
    597c:	683b      	ldr	r3, [r7, #0]
    597e:	681b      	ldr	r3, [r3, #0]
    5980:	2b00      	cmp	r3, #0
    5982:	d10d      	bne.n	59a0 <prv_list_insert_sorted+0x34>
        pEventList->first = pEventList->last = pEventItem;
    5984:	683b      	ldr	r3, [r7, #0]
    5986:	687a      	ldr	r2, [r7, #4]
    5988:	60da      	str	r2, [r3, #12]
    598a:	683b      	ldr	r3, [r7, #0]
    598c:	68da      	ldr	r2, [r3, #12]
    598e:	683b      	ldr	r3, [r7, #0]
    5990:	609a      	str	r2, [r3, #8]
        pEventItem->prev = pEventItem;
    5992:	687b      	ldr	r3, [r7, #4]
    5994:	687a      	ldr	r2, [r7, #4]
    5996:	60da      	str	r2, [r3, #12]
        pEventItem->next = pEventItem;
    5998:	687b      	ldr	r3, [r7, #4]
    599a:	687a      	ldr	r2, [r7, #4]
    599c:	609a      	str	r2, [r3, #8]
    599e:	e058      	b.n	5a52 <prv_list_insert_sorted+0xe6>
    }else{
        pIndex = prv_list_get_first_item(pEventList);
    59a0:	683b      	ldr	r3, [r7, #0]
    59a2:	689b      	ldr	r3, [r3, #8]
    59a4:	60fb      	str	r3, [r7, #12]
        for(; pIndex != prv_list_get_last_item(pEventList); pIndex = prv_item_get_next(pIndex)){
    59a6:	e023      	b.n	59f0 <prv_list_insert_sorted+0x84>
            if(1 == tag_compare(pevent, prv_item_get_entity(pIndex))){
    59a8:	68fb      	ldr	r3, [r7, #12]
    59aa:	681b      	ldr	r3, [r3, #0]
    59ac:	68b8      	ldr	r0, [r7, #8]
    59ae:	4619      	mov	r1, r3
    59b0:	f7ff ffac 	bl	590c <tag_compare>
    59b4:	4603      	mov	r3, r0
    59b6:	2b01      	cmp	r3, #1
    59b8:	d117      	bne.n	59ea <prv_list_insert_sorted+0x7e>
                pIndex->prev->next = pEventItem;
    59ba:	68fb      	ldr	r3, [r7, #12]
    59bc:	68db      	ldr	r3, [r3, #12]
    59be:	687a      	ldr	r2, [r7, #4]
    59c0:	609a      	str	r2, [r3, #8]
                pEventItem->prev = pIndex->prev;
    59c2:	68fb      	ldr	r3, [r7, #12]
    59c4:	68da      	ldr	r2, [r3, #12]
    59c6:	687b      	ldr	r3, [r7, #4]
    59c8:	60da      	str	r2, [r3, #12]

                pEventItem->next = (item_t *)pIndex;
    59ca:	687b      	ldr	r3, [r7, #4]
    59cc:	68fa      	ldr	r2, [r7, #12]
    59ce:	609a      	str	r2, [r3, #8]
                pIndex->prev = pEventItem;
    59d0:	68fb      	ldr	r3, [r7, #12]
    59d2:	687a      	ldr	r2, [r7, #4]
    59d4:	60da      	str	r2, [r3, #12]

                // if pEventItem is has smallest model time
                if(pIndex == prv_list_get_first_item(pEventList)){
    59d6:	683b      	ldr	r3, [r7, #0]
    59d8:	689a      	ldr	r2, [r3, #8]
    59da:	68fb      	ldr	r3, [r7, #12]
    59dc:	429a      	cmp	r2, r3
    59de:	d103      	bne.n	59e8 <prv_list_insert_sorted+0x7c>
                    pEventList->first = pEventItem;
    59e0:	683b      	ldr	r3, [r7, #0]
    59e2:	687a      	ldr	r2, [r7, #4]
    59e4:	609a      	str	r2, [r3, #8]
                }
                break;
    59e6:	e008      	b.n	59fa <prv_list_insert_sorted+0x8e>
    59e8:	e007      	b.n	59fa <prv_list_insert_sorted+0x8e>
        pEventList->first = pEventList->last = pEventItem;
        pEventItem->prev = pEventItem;
        pEventItem->next = pEventItem;
    }else{
        pIndex = prv_list_get_first_item(pEventList);
        for(; pIndex != prv_list_get_last_item(pEventList); pIndex = prv_item_get_next(pIndex)){
    59ea:	68fb      	ldr	r3, [r7, #12]
    59ec:	689b      	ldr	r3, [r3, #8]
    59ee:	60fb      	str	r3, [r7, #12]
    59f0:	683b      	ldr	r3, [r7, #0]
    59f2:	68da      	ldr	r2, [r3, #12]
    59f4:	68fb      	ldr	r3, [r7, #12]
    59f6:	429a      	cmp	r2, r3
    59f8:	d1d6      	bne.n	59a8 <prv_list_insert_sorted+0x3c>
                    pEventList->first = pEventItem;
                }
                break;
            }
        }
        if( pIndex == prv_list_get_last_item(pEventList) ){
    59fa:	683b      	ldr	r3, [r7, #0]
    59fc:	68da      	ldr	r2, [r3, #12]
    59fe:	68fb      	ldr	r3, [r7, #12]
    5a00:	429a      	cmp	r2, r3
    5a02:	d126      	bne.n	5a52 <prv_list_insert_sorted+0xe6>
            if(1 == tag_compare(pevent, prv_item_get_entity(pIndex))){
    5a04:	68fb      	ldr	r3, [r7, #12]
    5a06:	681b      	ldr	r3, [r3, #0]
    5a08:	68b8      	ldr	r0, [r7, #8]
    5a0a:	4619      	mov	r1, r3
    5a0c:	f7ff ff7e 	bl	590c <tag_compare>
    5a10:	4603      	mov	r3, r0
    5a12:	2b01      	cmp	r3, #1
    5a14:	d10e      	bne.n	5a34 <prv_list_insert_sorted+0xc8>
                pIndex->prev->next = pEventItem;
    5a16:	68fb      	ldr	r3, [r7, #12]
    5a18:	68db      	ldr	r3, [r3, #12]
    5a1a:	687a      	ldr	r2, [r7, #4]
    5a1c:	609a      	str	r2, [r3, #8]
                pEventItem->prev = pIndex->prev;
    5a1e:	68fb      	ldr	r3, [r7, #12]
    5a20:	68da      	ldr	r2, [r3, #12]
    5a22:	687b      	ldr	r3, [r7, #4]
    5a24:	60da      	str	r2, [r3, #12]

                pEventItem->next = (item_t *)pIndex;
    5a26:	687b      	ldr	r3, [r7, #4]
    5a28:	68fa      	ldr	r2, [r7, #12]
    5a2a:	609a      	str	r2, [r3, #8]
                pIndex->prev = pEventItem;
    5a2c:	68fb      	ldr	r3, [r7, #12]
    5a2e:	687a      	ldr	r2, [r7, #4]
    5a30:	60da      	str	r2, [r3, #12]
    5a32:	e00e      	b.n	5a52 <prv_list_insert_sorted+0xe6>

            }else{ // insert the pEventItem into the end of pEventList
                pEventList->last->next = pEventItem;
    5a34:	683b      	ldr	r3, [r7, #0]
    5a36:	68db      	ldr	r3, [r3, #12]
    5a38:	687a      	ldr	r2, [r7, #4]
    5a3a:	609a      	str	r2, [r3, #8]
                pEventItem->prev = pEventList->last;
    5a3c:	683b      	ldr	r3, [r7, #0]
    5a3e:	68da      	ldr	r2, [r3, #12]
    5a40:	687b      	ldr	r3, [r7, #4]
    5a42:	60da      	str	r2, [r3, #12]
                pEventItem->next = pEventList->first;
    5a44:	683b      	ldr	r3, [r7, #0]
    5a46:	689a      	ldr	r2, [r3, #8]
    5a48:	687b      	ldr	r3, [r7, #4]
    5a4a:	609a      	str	r2, [r3, #8]
                pEventList->last = pEventItem;
    5a4c:	683b      	ldr	r3, [r7, #0]
    5a4e:	687a      	ldr	r2, [r7, #4]
    5a50:	60da      	str	r2, [r3, #12]
            }
        }
    }

    if(pEventList->earliest_time > pevent->tag.timestamp){
    5a52:	683b      	ldr	r3, [r7, #0]
    5a54:	685a      	ldr	r2, [r3, #4]
    5a56:	68bb      	ldr	r3, [r7, #8]
    5a58:	68db      	ldr	r3, [r3, #12]
    5a5a:	429a      	cmp	r2, r3
    5a5c:	dd03      	ble.n	5a66 <prv_list_insert_sorted+0xfa>
        pEventList->earliest_time = pevent->tag.timestamp;
    5a5e:	68bb      	ldr	r3, [r7, #8]
    5a60:	68da      	ldr	r2, [r3, #12]
    5a62:	683b      	ldr	r3, [r7, #0]
    5a64:	605a      	str	r2, [r3, #4]
    }
    pEventList->length ++;
    5a66:	683b      	ldr	r3, [r7, #0]
    5a68:	681b      	ldr	r3, [r3, #0]
    5a6a:	1c5a      	adds	r2, r3, #1
    5a6c:	683b      	ldr	r3, [r7, #0]
    5a6e:	601a      	str	r2, [r3, #0]
    pEventItem->owner = (void *)pEventList;
    5a70:	687b      	ldr	r3, [r7, #4]
    5a72:	683a      	ldr	r2, [r7, #0]
    5a74:	605a      	str	r2, [r3, #4]
}
    5a76:	3710      	adds	r7, #16
    5a78:	46bd      	mov	sp, r7
    5a7a:	bd80      	pop	{r7, pc}

00005a7c <prv_list_remove>:

void prv_list_remove(item_t * pEventItem)
{
    5a7c:	b480      	push	{r7}
    5a7e:	b085      	sub	sp, #20
    5a80:	af00      	add	r7, sp, #0
    5a82:	6078      	str	r0, [r7, #4]
    list_t * pList = (list_t *)pEventItem->owner;
    5a84:	687b      	ldr	r3, [r7, #4]
    5a86:	685b      	ldr	r3, [r3, #4]
    5a88:	60fb      	str	r3, [r7, #12]

    if(pList->length == 1){
    5a8a:	68fb      	ldr	r3, [r7, #12]
    5a8c:	681b      	ldr	r3, [r3, #0]
    5a8e:	2b01      	cmp	r3, #1
    5a90:	d106      	bne.n	5aa0 <prv_list_remove+0x24>
        pList->first = NULL;
    5a92:	68fb      	ldr	r3, [r7, #12]
    5a94:	2200      	movs	r2, #0
    5a96:	609a      	str	r2, [r3, #8]
        pList->last = NULL;
    5a98:	68fb      	ldr	r3, [r7, #12]
    5a9a:	2200      	movs	r2, #0
    5a9c:	60da      	str	r2, [r3, #12]
    5a9e:	e011      	b.n	5ac4 <prv_list_remove+0x48>
    }else{
        if(pEventItem == prv_list_get_first_item(pList)){
    5aa0:	68fb      	ldr	r3, [r7, #12]
    5aa2:	689a      	ldr	r2, [r3, #8]
    5aa4:	687b      	ldr	r3, [r7, #4]
    5aa6:	429a      	cmp	r2, r3
    5aa8:	d103      	bne.n	5ab2 <prv_list_remove+0x36>
            pList->first = pEventItem->next;
    5aaa:	687b      	ldr	r3, [r7, #4]
    5aac:	689a      	ldr	r2, [r3, #8]
    5aae:	68fb      	ldr	r3, [r7, #12]
    5ab0:	609a      	str	r2, [r3, #8]
        }
        if(pEventItem == prv_list_get_last_item(pList)){
    5ab2:	68fb      	ldr	r3, [r7, #12]
    5ab4:	68da      	ldr	r2, [r3, #12]
    5ab6:	687b      	ldr	r3, [r7, #4]
    5ab8:	429a      	cmp	r2, r3
    5aba:	d103      	bne.n	5ac4 <prv_list_remove+0x48>
            pList->last = pEventItem->prev;
    5abc:	687b      	ldr	r3, [r7, #4]
    5abe:	68da      	ldr	r2, [r3, #12]
    5ac0:	68fb      	ldr	r3, [r7, #12]
    5ac2:	60da      	str	r2, [r3, #12]
        }
    }

    pEventItem->prev->next = pEventItem->next;
    5ac4:	687b      	ldr	r3, [r7, #4]
    5ac6:	68db      	ldr	r3, [r3, #12]
    5ac8:	687a      	ldr	r2, [r7, #4]
    5aca:	6892      	ldr	r2, [r2, #8]
    5acc:	609a      	str	r2, [r3, #8]
    pEventItem->next->prev = pEventItem->prev;
    5ace:	687b      	ldr	r3, [r7, #4]
    5ad0:	689b      	ldr	r3, [r3, #8]
    5ad2:	687a      	ldr	r2, [r7, #4]
    5ad4:	68d2      	ldr	r2, [r2, #12]
    5ad6:	60da      	str	r2, [r3, #12]
    pEventItem->owner = NULL;
    5ad8:	687b      	ldr	r3, [r7, #4]
    5ada:	2200      	movs	r2, #0
    5adc:	605a      	str	r2, [r3, #4]
    pList->length --;
    5ade:	68fb      	ldr	r3, [r7, #12]
    5ae0:	681b      	ldr	r3, [r3, #0]
    5ae2:	1e5a      	subs	r2, r3, #1
    5ae4:	68fb      	ldr	r3, [r7, #12]
    5ae6:	601a      	str	r2, [r3, #0]
}
    5ae8:	3714      	adds	r7, #20
    5aea:	46bd      	mov	sp, r7
    5aec:	f85d 7b04 	ldr.w	r7, [sp], #4
    5af0:	4770      	bx	lr
    5af2:	bf00      	nop

00005af4 <prv_list_earlist_time_update>:


void prv_list_earlist_time_update(list_t * pEventList)
{
    5af4:	b480      	push	{r7}
    5af6:	b085      	sub	sp, #20
    5af8:	af00      	add	r7, sp, #0
    5afa:	6078      	str	r0, [r7, #4]
    volatile  item_t * pIndex = prv_list_get_first_item(pEventList);
    5afc:	687b      	ldr	r3, [r7, #4]
    5afe:	689b      	ldr	r3, [r3, #8]
    5b00:	60fb      	str	r3, [r7, #12]
    pEventList->earliest_time = ((ps_event_t *)pIndex->item)->tag.timestamp;
    5b02:	68fb      	ldr	r3, [r7, #12]
    5b04:	681b      	ldr	r3, [r3, #0]
    5b06:	68da      	ldr	r2, [r3, #12]
    5b08:	687b      	ldr	r3, [r7, #4]
    5b0a:	605a      	str	r2, [r3, #4]

    for(; pIndex != prv_list_get_first_item(pEventList); pIndex = prv_item_get_next(pIndex)){
    5b0c:	e00e      	b.n	5b2c <prv_list_earlist_time_update+0x38>
        if(pEventList->earliest_time > ((ps_event_t *)pIndex->item)->tag.timestamp)
    5b0e:	687b      	ldr	r3, [r7, #4]
    5b10:	685a      	ldr	r2, [r3, #4]
    5b12:	68fb      	ldr	r3, [r7, #12]
    5b14:	681b      	ldr	r3, [r3, #0]
    5b16:	68db      	ldr	r3, [r3, #12]
    5b18:	429a      	cmp	r2, r3
    5b1a:	dd04      	ble.n	5b26 <prv_list_earlist_time_update+0x32>
        {
            pEventList->earliest_time = ((ps_event_t *)pIndex->item)->tag.timestamp;
    5b1c:	68fb      	ldr	r3, [r7, #12]
    5b1e:	681b      	ldr	r3, [r3, #0]
    5b20:	68da      	ldr	r2, [r3, #12]
    5b22:	687b      	ldr	r3, [r7, #4]
    5b24:	605a      	str	r2, [r3, #4]
void prv_list_earlist_time_update(list_t * pEventList)
{
    volatile  item_t * pIndex = prv_list_get_first_item(pEventList);
    pEventList->earliest_time = ((ps_event_t *)pIndex->item)->tag.timestamp;

    for(; pIndex != prv_list_get_first_item(pEventList); pIndex = prv_item_get_next(pIndex)){
    5b26:	68fb      	ldr	r3, [r7, #12]
    5b28:	689b      	ldr	r3, [r3, #8]
    5b2a:	60fb      	str	r3, [r7, #12]
    5b2c:	687b      	ldr	r3, [r7, #4]
    5b2e:	689a      	ldr	r2, [r3, #8]
    5b30:	68fb      	ldr	r3, [r7, #12]
    5b32:	429a      	cmp	r2, r3
    5b34:	d1eb      	bne.n	5b0e <prv_list_earlist_time_update+0x1a>
        if(pEventList->earliest_time > ((ps_event_t *)pIndex->item)->tag.timestamp)
        {
            pEventList->earliest_time = ((ps_event_t *)pIndex->item)->tag.timestamp;
        }
    }
}
    5b36:	3714      	adds	r7, #20
    5b38:	46bd      	mov	sp, r7
    5b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b3e:	4770      	bx	lr

00005b40 <prv_list_receive>:


item_t * prv_list_receive(list_t * pEventList)
{
    5b40:	b580      	push	{r7, lr}
    5b42:	b084      	sub	sp, #16
    5b44:	af00      	add	r7, sp, #0
    5b46:	6078      	str	r0, [r7, #4]
    item_t * pitem = pEventList->first;
    5b48:	687b      	ldr	r3, [r7, #4]
    5b4a:	689b      	ldr	r3, [r3, #8]
    5b4c:	60fb      	str	r3, [r7, #12]
    prv_list_remove(pitem);
    5b4e:	68f8      	ldr	r0, [r7, #12]
    5b50:	f7ff ff94 	bl	5a7c <prv_list_remove>

    return pitem;
    5b54:	68fb      	ldr	r3, [r7, #12]
}
    5b56:	4618      	mov	r0, r3
    5b58:	3710      	adds	r7, #16
    5b5a:	46bd      	mov	sp, r7
    5b5c:	bd80      	pop	{r7, pc}
    5b5e:	bf00      	nop

00005b60 <GCD>:
#include "model_time.h"

static tick_t xModelTimeStart ;
extern struct ps_mode_array_t mod;

static tick_t GCD(tick_t a, tick_t b){
    5b60:	b580      	push	{r7, lr}
    5b62:	b082      	sub	sp, #8
    5b64:	af00      	add	r7, sp, #0
    5b66:	6078      	str	r0, [r7, #4]
    5b68:	6039      	str	r1, [r7, #0]
	return b==0?a:GCD(b,a%b);
    5b6a:	683b      	ldr	r3, [r7, #0]
    5b6c:	2b00      	cmp	r3, #0
    5b6e:	d00d      	beq.n	5b8c <GCD+0x2c>
    5b70:	687b      	ldr	r3, [r7, #4]
    5b72:	683a      	ldr	r2, [r7, #0]
    5b74:	fb93 f2f2 	sdiv	r2, r3, r2
    5b78:	6839      	ldr	r1, [r7, #0]
    5b7a:	fb01 f202 	mul.w	r2, r1, r2
    5b7e:	1a9b      	subs	r3, r3, r2
    5b80:	6838      	ldr	r0, [r7, #0]
    5b82:	4619      	mov	r1, r3
    5b84:	f7ff ffec 	bl	5b60 <GCD>
    5b88:	4603      	mov	r3, r0
    5b8a:	e000      	b.n	5b8e <GCD+0x2e>
    5b8c:	687b      	ldr	r3, [r7, #4]
}
    5b8e:	4618      	mov	r0, r3
    5b90:	3708      	adds	r7, #8
    5b92:	46bd      	mov	sp, r7
    5b94:	bd80      	pop	{r7, pc}
    5b96:	bf00      	nop

00005b98 <prv_model_time_unit_length>:

static tick_t  prv_model_time_unit_length(ps_mode_t * pmode)
{
    5b98:	b580      	push	{r7, lr}
    5b9a:	b084      	sub	sp, #16
    5b9c:	af00      	add	r7, sp, #0
    5b9e:	6078      	str	r0, [r7, #4]
	int i;
	tick_t unit_len = pmode->tasks[0]->period;
    5ba0:	687b      	ldr	r3, [r7, #4]
    5ba2:	691b      	ldr	r3, [r3, #16]
    5ba4:	689b      	ldr	r3, [r3, #8]
    5ba6:	60bb      	str	r3, [r7, #8]
	for( i = 1; i < pmode->num; ++i){
    5ba8:	2301      	movs	r3, #1
    5baa:	60fb      	str	r3, [r7, #12]
    5bac:	e00d      	b.n	5bca <prv_model_time_unit_length+0x32>
		unit_len = GCD(unit_len, pmode->tasks[i]->period);
    5bae:	687b      	ldr	r3, [r7, #4]
    5bb0:	68fa      	ldr	r2, [r7, #12]
    5bb2:	3204      	adds	r2, #4
    5bb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5bb8:	689b      	ldr	r3, [r3, #8]
    5bba:	68b8      	ldr	r0, [r7, #8]
    5bbc:	4619      	mov	r1, r3
    5bbe:	f7ff ffcf 	bl	5b60 <GCD>
    5bc2:	60b8      	str	r0, [r7, #8]

static tick_t  prv_model_time_unit_length(ps_mode_t * pmode)
{
	int i;
	tick_t unit_len = pmode->tasks[0]->period;
	for( i = 1; i < pmode->num; ++i){
    5bc4:	68fb      	ldr	r3, [r7, #12]
    5bc6:	3301      	adds	r3, #1
    5bc8:	60fb      	str	r3, [r7, #12]
    5bca:	687b      	ldr	r3, [r7, #4]
    5bcc:	68da      	ldr	r2, [r3, #12]
    5bce:	68fb      	ldr	r3, [r7, #12]
    5bd0:	429a      	cmp	r2, r3
    5bd2:	dcec      	bgt.n	5bae <prv_model_time_unit_length+0x16>
		unit_len = GCD(unit_len, pmode->tasks[i]->period);
	}
	return unit_len;
    5bd4:	68bb      	ldr	r3, [r7, #8]
}
    5bd6:	4618      	mov	r0, r3
    5bd8:	3710      	adds	r7, #16
    5bda:	46bd      	mov	sp, r7
    5bdc:	bd80      	pop	{r7, pc}
    5bde:	bf00      	nop

00005be0 <prv_model_time_period_length>:

static tick_t prv_model_time_period_length(ps_mode_t * pmode)
{
    5be0:	b580      	push	{r7, lr}
    5be2:	b086      	sub	sp, #24
    5be4:	af00      	add	r7, sp, #0
    5be6:	6078      	str	r0, [r7, #4]
	int i;
	tick_t period_len = pmode->tasks[0]->period;
    5be8:	687b      	ldr	r3, [r7, #4]
    5bea:	691b      	ldr	r3, [r3, #16]
    5bec:	689b      	ldr	r3, [r3, #8]
    5bee:	613b      	str	r3, [r7, #16]
	tick_t gcd;
	for( i = 1; i < pmode->num; ++i){
    5bf0:	2301      	movs	r3, #1
    5bf2:	617b      	str	r3, [r7, #20]
    5bf4:	e01a      	b.n	5c2c <prv_model_time_period_length+0x4c>
		gcd = GCD(period_len, pmode->tasks[i]->period);
    5bf6:	687b      	ldr	r3, [r7, #4]
    5bf8:	697a      	ldr	r2, [r7, #20]
    5bfa:	3204      	adds	r2, #4
    5bfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5c00:	689b      	ldr	r3, [r3, #8]
    5c02:	6938      	ldr	r0, [r7, #16]
    5c04:	4619      	mov	r1, r3
    5c06:	f7ff ffab 	bl	5b60 <GCD>
    5c0a:	60f8      	str	r0, [r7, #12]
		period_len = (period_len * pmode->tasks[i]->period)/gcd;
    5c0c:	687b      	ldr	r3, [r7, #4]
    5c0e:	697a      	ldr	r2, [r7, #20]
    5c10:	3204      	adds	r2, #4
    5c12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5c16:	689b      	ldr	r3, [r3, #8]
    5c18:	693a      	ldr	r2, [r7, #16]
    5c1a:	fb02 f203 	mul.w	r2, r2, r3
    5c1e:	68fb      	ldr	r3, [r7, #12]
    5c20:	fb92 f3f3 	sdiv	r3, r2, r3
    5c24:	613b      	str	r3, [r7, #16]
static tick_t prv_model_time_period_length(ps_mode_t * pmode)
{
	int i;
	tick_t period_len = pmode->tasks[0]->period;
	tick_t gcd;
	for( i = 1; i < pmode->num; ++i){
    5c26:	697b      	ldr	r3, [r7, #20]
    5c28:	3301      	adds	r3, #1
    5c2a:	617b      	str	r3, [r7, #20]
    5c2c:	687b      	ldr	r3, [r7, #4]
    5c2e:	68da      	ldr	r2, [r3, #12]
    5c30:	697b      	ldr	r3, [r7, #20]
    5c32:	429a      	cmp	r2, r3
    5c34:	dcdf      	bgt.n	5bf6 <prv_model_time_period_length+0x16>
		gcd = GCD(period_len, pmode->tasks[i]->period);
		period_len = (period_len * pmode->tasks[i]->period)/gcd;
	}
	return period_len;
    5c36:	693b      	ldr	r3, [r7, #16]
}
    5c38:	4618      	mov	r0, r3
    5c3a:	3718      	adds	r7, #24
    5c3c:	46bd      	mov	sp, r7
    5c3e:	bd80      	pop	{r7, pc}

00005c40 <prv_model_time_unit_initialize>:

void prv_model_time_unit_initialize()
{
    5c40:	b580      	push	{r7, lr}
    5c42:	b082      	sub	sp, #8
    5c44:	af00      	add	r7, sp, #0
	int i;
	for( i = 0; i < mod.num; ++i){
    5c46:	2300      	movs	r3, #0
    5c48:	607b      	str	r3, [r7, #4]
    5c4a:	e012      	b.n	5c72 <prv_model_time_unit_initialize+0x32>
		prv_mode_set_mode_unit(i,prv_model_time_unit_length(mod.pmode[i]));
    5c4c:	f24a 12f4 	movw	r2, #41460	; 0xa1f4
    5c50:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5c54:	687b      	ldr	r3, [r7, #4]
    5c56:	009b      	lsls	r3, r3, #2
    5c58:	4413      	add	r3, r2
    5c5a:	685b      	ldr	r3, [r3, #4]
    5c5c:	4618      	mov	r0, r3
    5c5e:	f7ff ff9b 	bl	5b98 <prv_model_time_unit_length>
    5c62:	4603      	mov	r3, r0
    5c64:	6878      	ldr	r0, [r7, #4]
    5c66:	4619      	mov	r1, r3
    5c68:	f7fe fe96 	bl	4998 <prv_mode_set_mode_unit>
}

void prv_model_time_unit_initialize()
{
	int i;
	for( i = 0; i < mod.num; ++i){
    5c6c:	687b      	ldr	r3, [r7, #4]
    5c6e:	3301      	adds	r3, #1
    5c70:	607b      	str	r3, [r7, #4]
    5c72:	f24a 13f4 	movw	r3, #41460	; 0xa1f4
    5c76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c7a:	681a      	ldr	r2, [r3, #0]
    5c7c:	687b      	ldr	r3, [r7, #4]
    5c7e:	429a      	cmp	r2, r3
    5c80:	dce4      	bgt.n	5c4c <prv_model_time_unit_initialize+0xc>
		prv_mode_set_mode_unit(i,prv_model_time_unit_length(mod.pmode[i]));
	}

}
    5c82:	3708      	adds	r7, #8
    5c84:	46bd      	mov	sp, r7
    5c86:	bd80      	pop	{r7, pc}

00005c88 <prv_model_time_period_initialize>:

void prv_model_time_period_initialize()
{
    5c88:	b580      	push	{r7, lr}
    5c8a:	b082      	sub	sp, #8
    5c8c:	af00      	add	r7, sp, #0
	int i;
	for( i = 0; i < mod.num; ++i){
    5c8e:	2300      	movs	r3, #0
    5c90:	607b      	str	r3, [r7, #4]
    5c92:	e012      	b.n	5cba <prv_model_time_period_initialize+0x32>
		prv_mode_set_mode_period(i,prv_model_time_period_length(mod.pmode[i]));
    5c94:	f24a 12f4 	movw	r2, #41460	; 0xa1f4
    5c98:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5c9c:	687b      	ldr	r3, [r7, #4]
    5c9e:	009b      	lsls	r3, r3, #2
    5ca0:	4413      	add	r3, r2
    5ca2:	685b      	ldr	r3, [r3, #4]
    5ca4:	4618      	mov	r0, r3
    5ca6:	f7ff ff9b 	bl	5be0 <prv_model_time_period_length>
    5caa:	4603      	mov	r3, r0
    5cac:	6878      	ldr	r0, [r7, #4]
    5cae:	4619      	mov	r1, r3
    5cb0:	f7fe fe4a 	bl	4948 <prv_mode_set_mode_period>
}

void prv_model_time_period_initialize()
{
	int i;
	for( i = 0; i < mod.num; ++i){
    5cb4:	687b      	ldr	r3, [r7, #4]
    5cb6:	3301      	adds	r3, #1
    5cb8:	607b      	str	r3, [r7, #4]
    5cba:	f24a 13f4 	movw	r3, #41460	; 0xa1f4
    5cbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5cc2:	681a      	ldr	r2, [r3, #0]
    5cc4:	687b      	ldr	r3, [r7, #4]
    5cc6:	429a      	cmp	r2, r3
    5cc8:	dce4      	bgt.n	5c94 <prv_model_time_period_initialize+0xc>
		prv_mode_set_mode_period(i,prv_model_time_period_length(mod.pmode[i]));
	}
}
    5cca:	3708      	adds	r7, #8
    5ccc:	46bd      	mov	sp, r7
    5cce:	bd80      	pop	{r7, pc}

00005cd0 <prv_model_time_initialize>:

void prv_model_time_initialize()
{
    5cd0:	b580      	push	{r7, lr}
    5cd2:	af00      	add	r7, sp, #0
	prv_model_time_unit_initialize();
    5cd4:	f7ff ffb4 	bl	5c40 <prv_model_time_unit_initialize>
	prv_model_time_period_initialize();
    5cd8:	f7ff ffd6 	bl	5c88 <prv_model_time_period_initialize>
    prv_model_time_reset();
    5cdc:	f000 f83a 	bl	5d54 <prv_model_time_reset>
}
    5ce0:	bd80      	pop	{r7, pc}
    5ce2:	bf00      	nop

00005ce4 <prv_model_time_input_length>:

tick_t prv_model_time_input_length()
{
    5ce4:	b480      	push	{r7}
    5ce6:	af00      	add	r7, sp, #0
	return INPUT;
    5ce8:	2303      	movs	r3, #3
}
    5cea:	4618      	mov	r0, r3
    5cec:	46bd      	mov	sp, r7
    5cee:	f85d 7b04 	ldr.w	r7, [sp], #4
    5cf2:	4770      	bx	lr

00005cf4 <prv_model_time_output_length>:

tick_t prv_model_time_output_length()
{
    5cf4:	b480      	push	{r7}
    5cf6:	af00      	add	r7, sp, #0
	return OUTPUT;
    5cf8:	2303      	movs	r3, #3
}
    5cfa:	4618      	mov	r0, r3
    5cfc:	46bd      	mov	sp, r7
    5cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d02:	4770      	bx	lr

00005d04 <prv_model_time_unit_start>:


tick_t prv_model_time_unit_start()
{
    5d04:	b580      	push	{r7, lr}
    5d06:	b084      	sub	sp, #16
    5d08:	af00      	add	r7, sp, #0
	ps_mode_t * pmode = prv_mode_get_current_mode();
    5d0a:	f7fe fde9 	bl	48e0 <prv_mode_get_current_mode>
    5d0e:	60f8      	str	r0, [r7, #12]
	id_t mode_id = pmode->mode_id;
    5d10:	68fb      	ldr	r3, [r7, #12]
    5d12:	681b      	ldr	r3, [r3, #0]
    5d14:	60bb      	str	r3, [r7, #8]
	tick_t current_model_time = port_get_current_time();
    5d16:	f7fd ff29 	bl	3b6c <xTaskGetTickCount>
    5d1a:	4603      	mov	r3, r0
    5d1c:	607b      	str	r3, [r7, #4]

	return current_model_time - (current_model_time - xModelTimeStart)%(mod.pmode[mode_id]->unit);  // return absolute time
    5d1e:	f64d 1334 	movw	r3, #55604	; 0xd934
    5d22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d26:	681b      	ldr	r3, [r3, #0]
    5d28:	687a      	ldr	r2, [r7, #4]
    5d2a:	1ad1      	subs	r1, r2, r3
    5d2c:	f24a 12f4 	movw	r2, #41460	; 0xa1f4
    5d30:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5d34:	68bb      	ldr	r3, [r7, #8]
    5d36:	009b      	lsls	r3, r3, #2
    5d38:	4413      	add	r3, r2
    5d3a:	685b      	ldr	r3, [r3, #4]
    5d3c:	689b      	ldr	r3, [r3, #8]
    5d3e:	fb91 f2f3 	sdiv	r2, r1, r3
    5d42:	fb03 f302 	mul.w	r3, r3, r2
    5d46:	1acb      	subs	r3, r1, r3
    5d48:	687a      	ldr	r2, [r7, #4]
    5d4a:	1ad3      	subs	r3, r2, r3
}
    5d4c:	4618      	mov	r0, r3
    5d4e:	3710      	adds	r7, #16
    5d50:	46bd      	mov	sp, r7
    5d52:	bd80      	pop	{r7, pc}

00005d54 <prv_model_time_reset>:

void prv_model_time_reset()
{
    5d54:	b580      	push	{r7, lr}
    5d56:	af00      	add	r7, sp, #0
	xModelTimeStart = port_get_current_time();
    5d58:	f7fd ff08 	bl	3b6c <xTaskGetTickCount>
    5d5c:	4603      	mov	r3, r0
    5d5e:	461a      	mov	r2, r3
    5d60:	f64d 1334 	movw	r3, #55604	; 0xd934
    5d64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d68:	601a      	str	r2, [r3, #0]
}
    5d6a:	bd80      	pop	{r7, pc}

00005d6c <prv_model_time_get_model_time>:

tick_t prv_model_time_get_model_time()
{
    5d6c:	b480      	push	{r7}
    5d6e:	af00      	add	r7, sp, #0
	return xModelTimeStart;
    5d70:	f64d 1334 	movw	r3, #55604	; 0xd934
    5d74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d78:	681b      	ldr	r3, [r3, #0]
}
    5d7a:	4618      	mov	r0, r3
    5d7c:	46bd      	mov	sp, r7
    5d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d82:	4770      	bx	lr

00005d84 <prv_model_time_input_end>:

tick_t prv_model_time_input_end()
{
    5d84:	b580      	push	{r7, lr}
    5d86:	af00      	add	r7, sp, #0
	return prv_model_time_unit_start()+INPUT;
    5d88:	f7ff ffbc 	bl	5d04 <prv_model_time_unit_start>
    5d8c:	4603      	mov	r3, r0
    5d8e:	3303      	adds	r3, #3
}
    5d90:	4618      	mov	r0, r3
    5d92:	bd80      	pop	{r7, pc}

00005d94 <prv_model_time_output_end>:

tick_t prv_model_time_output_end()
{
    5d94:	b580      	push	{r7, lr}
    5d96:	b082      	sub	sp, #8
    5d98:	af00      	add	r7, sp, #0
	ps_mode_t *pmode = prv_mode_get_current_mode();
    5d9a:	f7fe fda1 	bl	48e0 <prv_mode_get_current_mode>
    5d9e:	6078      	str	r0, [r7, #4]
	id_t mode_id = pmode->mode_id;
    5da0:	687b      	ldr	r3, [r7, #4]
    5da2:	681b      	ldr	r3, [r3, #0]
    5da4:	603b      	str	r3, [r7, #0]
	return prv_model_time_unit_start()+mod.pmode[mode_id]->unit;
    5da6:	f7ff ffad 	bl	5d04 <prv_model_time_unit_start>
    5daa:	4601      	mov	r1, r0
    5dac:	f24a 12f4 	movw	r2, #41460	; 0xa1f4
    5db0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5db4:	683b      	ldr	r3, [r7, #0]
    5db6:	009b      	lsls	r3, r3, #2
    5db8:	4413      	add	r3, r2
    5dba:	685b      	ldr	r3, [r3, #4]
    5dbc:	689b      	ldr	r3, [r3, #8]
    5dbe:	440b      	add	r3, r1
}
    5dc0:	4618      	mov	r0, r3
    5dc2:	3708      	adds	r7, #8
    5dc4:	46bd      	mov	sp, r7
    5dc6:	bd80      	pop	{r7, pc}

00005dc8 <prv_model_time_output_start>:

tick_t prv_model_time_output_start()
{
    5dc8:	b580      	push	{r7, lr}
    5dca:	af00      	add	r7, sp, #0
	return prv_model_time_output_end()-OUTPUT;
    5dcc:	f7ff ffe2 	bl	5d94 <prv_model_time_output_end>
    5dd0:	4603      	mov	r3, r0
    5dd2:	3b03      	subs	r3, #3
}
    5dd4:	4618      	mov	r0, r3
    5dd6:	bd80      	pop	{r7, pc}

00005dd8 <prv_model_time_is_mode_end>:

int prv_model_time_is_mode_end()
{
    5dd8:	b580      	push	{r7, lr}
    5dda:	b084      	sub	sp, #16
    5ddc:	af00      	add	r7, sp, #0
	ps_mode_t *pmode = prv_mode_get_current_mode();
    5dde:	f7fe fd7f 	bl	48e0 <prv_mode_get_current_mode>
    5de2:	60f8      	str	r0, [r7, #12]
	id_t mode_id = pmode->mode_id;
    5de4:	68fb      	ldr	r3, [r7, #12]
    5de6:	681b      	ldr	r3, [r3, #0]
    5de8:	60bb      	str	r3, [r7, #8]
	tick_t current_time = port_get_current_time();
    5dea:	f7fd febf 	bl	3b6c <xTaskGetTickCount>
    5dee:	4603      	mov	r3, r0
    5df0:	607b      	str	r3, [r7, #4]

	if( current_time > xModelTimeStart && 0 == ( current_time - xModelTimeStart ) % mod.pmode[mode_id]->period){
    5df2:	f64d 1334 	movw	r3, #55604	; 0xd934
    5df6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5dfa:	681b      	ldr	r3, [r3, #0]
    5dfc:	687a      	ldr	r2, [r7, #4]
    5dfe:	429a      	cmp	r2, r3
    5e00:	dd18      	ble.n	5e34 <prv_model_time_is_mode_end+0x5c>
    5e02:	f64d 1334 	movw	r3, #55604	; 0xd934
    5e06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e0a:	681b      	ldr	r3, [r3, #0]
    5e0c:	687a      	ldr	r2, [r7, #4]
    5e0e:	1ad1      	subs	r1, r2, r3
    5e10:	f24a 12f4 	movw	r2, #41460	; 0xa1f4
    5e14:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5e18:	68bb      	ldr	r3, [r7, #8]
    5e1a:	009b      	lsls	r3, r3, #2
    5e1c:	4413      	add	r3, r2
    5e1e:	685b      	ldr	r3, [r3, #4]
    5e20:	685b      	ldr	r3, [r3, #4]
    5e22:	fb91 f2f3 	sdiv	r2, r1, r3
    5e26:	fb03 f302 	mul.w	r3, r3, r2
    5e2a:	1acb      	subs	r3, r1, r3
    5e2c:	2b00      	cmp	r3, #0
    5e2e:	d101      	bne.n	5e34 <prv_model_time_is_mode_end+0x5c>
		return 1;
    5e30:	2301      	movs	r3, #1
    5e32:	e000      	b.n	5e36 <prv_model_time_is_mode_end+0x5e>
	}else{
		return 0;
    5e34:	2300      	movs	r3, #0
	}
}
    5e36:	4618      	mov	r0, r3
    5e38:	3710      	adds	r7, #16
    5e3a:	46bd      	mov	sp, r7
    5e3c:	bd80      	pop	{r7, pc}
    5e3e:	bf00      	nop

00005e40 <sensor1>:
#include "app.h"

void sensor1()
{
    5e40:	b580      	push	{r7, lr}
    5e42:	af00      	add	r7, sp, #0
	while(1){
        // blocking for periodic timing event arriving
		ps_event_wait();
    5e44:	f7ff fa7e 	bl	5344 <ps_event_wait>

		// process pevent including tag and data
		port_print("sensor 1\n\r");
    5e48:	f246 50e4 	movw	r0, #26084	; 0x65e4
    5e4c:	f2c0 0000 	movt	r0, #0
    5e50:	f000 f96c 	bl	612c <vPrintString>

        // parameter :pointer of struct data
        ps_event_create(NULL);
    5e54:	2000      	movs	r0, #0
    5e56:	f7ff faf1 	bl	543c <ps_event_create>

        // release CPU and trigger R-Sevant to execute
		ps_servant_cooperate();
    5e5a:	f7ff f8a7 	bl	4fac <ps_servant_cooperate>
	}
    5e5e:	e7f1      	b.n	5e44 <sensor1+0x4>

00005e60 <controller1>:
}

void controller1()
{
    5e60:	b580      	push	{r7, lr}
    5e62:	b082      	sub	sp, #8
    5e64:	af00      	add	r7, sp, #0
	ps_data_t * data;

	while(1){
        // blocking for message-arrival event arriving
		ps_event_wait();
    5e66:	f7ff fa6d 	bl	5344 <ps_event_wait>
        // receive ready event from xEventReadyList
		data = ps_event_receive();
    5e6a:	f7ff fa85 	bl	5378 <ps_event_receive>
    5e6e:	6078      	str	r0, [r7, #4]

		// process pevent including tag and data
		port_print("controller 1\n\r");
    5e70:	f246 50f0 	movw	r0, #26096	; 0x65f0
    5e74:	f2c0 0000 	movt	r0, #0
    5e78:	f000 f958 	bl	612c <vPrintString>

        // parameter one is not NULL mean that sysmem will upate the existing event
        ps_event_create(data);
    5e7c:	6878      	ldr	r0, [r7, #4]
    5e7e:	f7ff fadd 	bl	543c <ps_event_create>
		ps_servant_cooperate();
    5e82:	f7ff f893 	bl	4fac <ps_servant_cooperate>
	}
    5e86:	e7ee      	b.n	5e66 <controller1+0x6>

00005e88 <actuator1>:
}

void actuator1()
{
    5e88:	b580      	push	{r7, lr}
    5e8a:	b082      	sub	sp, #8
    5e8c:	af00      	add	r7, sp, #0
	ps_data_t * data;

	while(1){
		ps_event_wait();
    5e8e:	f7ff fa59 	bl	5344 <ps_event_wait>
		data = ps_event_receive();
    5e92:	f7ff fa71 	bl	5378 <ps_event_receive>
    5e96:	6078      	str	r0, [r7, #4]

		// process pevent including tag and data
		port_print("actuator 1\n\r");
    5e98:	f246 6000 	movw	r0, #26112	; 0x6600
    5e9c:	f2c0 0000 	movt	r0, #0
    5ea0:	f000 f944 	bl	612c <vPrintString>

        // output the event's data to physical device
		ps_servant_cooperate();
    5ea4:	f7ff f882 	bl	4fac <ps_servant_cooperate>
	}
    5ea8:	e7f1      	b.n	5e8e <actuator1+0x6>
    5eaa:	bf00      	nop

00005eac <sensor2>:
}

void sensor2()
{
    5eac:	b580      	push	{r7, lr}
    5eae:	af00      	add	r7, sp, #0
	while(1){
		ps_event_wait();
    5eb0:	f7ff fa48 	bl	5344 <ps_event_wait>

		// process pevent including tag and data
		port_print("sensor 2\n\r");
    5eb4:	f246 6010 	movw	r0, #26128	; 0x6610
    5eb8:	f2c0 0000 	movt	r0, #0
    5ebc:	f000 f936 	bl	612c <vPrintString>

		ps_event_create(NULL);
    5ec0:	2000      	movs	r0, #0
    5ec2:	f7ff fabb 	bl	543c <ps_event_create>
		ps_servant_cooperate();
    5ec6:	f7ff f871 	bl	4fac <ps_servant_cooperate>
	}
    5eca:	e7f1      	b.n	5eb0 <sensor2+0x4>

00005ecc <controller2>:

}

void controller2()
{
    5ecc:	b580      	push	{r7, lr}
    5ece:	b082      	sub	sp, #8
    5ed0:	af00      	add	r7, sp, #0
    ps_data_t * data;

	while(1){
		ps_event_wait();
    5ed2:	f7ff fa37 	bl	5344 <ps_event_wait>
		data = ps_event_receive();
    5ed6:	f7ff fa4f 	bl	5378 <ps_event_receive>
    5eda:	6078      	str	r0, [r7, #4]

		// process pevent including tag and data
		port_print("controller 2\n\r");
    5edc:	f246 601c 	movw	r0, #26140	; 0x661c
    5ee0:	f2c0 0000 	movt	r0, #0
    5ee4:	f000 f922 	bl	612c <vPrintString>

		ps_event_create(NULL);
    5ee8:	2000      	movs	r0, #0
    5eea:	f7ff faa7 	bl	543c <ps_event_create>
		ps_servant_cooperate();
    5eee:	f7ff f85d 	bl	4fac <ps_servant_cooperate>
	}
    5ef2:	e7ee      	b.n	5ed2 <controller2+0x6>

00005ef4 <actuator2>:

}

void actuator2()
{
    5ef4:	b580      	push	{r7, lr}
    5ef6:	b082      	sub	sp, #8
    5ef8:	af00      	add	r7, sp, #0
    ps_data_t * data;

	while(1){
		ps_event_wait();
    5efa:	f7ff fa23 	bl	5344 <ps_event_wait>
		data = ps_event_receive();
    5efe:	f7ff fa3b 	bl	5378 <ps_event_receive>
    5f02:	6078      	str	r0, [r7, #4]

		// process pevent including tag and data
		port_print("actuator 2\n\r");
    5f04:	f246 602c 	movw	r0, #26156	; 0x662c
    5f08:	f2c0 0000 	movt	r0, #0
    5f0c:	f000 f90e 	bl	612c <vPrintString>
        // output the event's data to physical device

		ps_servant_cooperate();
    5f10:	f7ff f84c 	bl	4fac <ps_servant_cooperate>
	}
    5f14:	e7f1      	b.n	5efa <actuator2+0x6>
    5f16:	bf00      	nop

00005f18 <init_led>:
#include "stm32f10x_usart.h"
#include "stm32f10x_exti.h"
#include "misc.h"

void init_led(void)
{
    5f18:	b580      	push	{r7, lr}
    5f1a:	b082      	sub	sp, #8
    5f1c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO C clock. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
    5f1e:	2010      	movs	r0, #16
    5f20:	2101      	movs	r1, #1
    5f22:	f7fa ff75 	bl	e10 <RCC_APB2PeriphClockCmd>

    /* Set the LED pin state such that the LED is off.  The LED is connected
     * between power and the microcontroller pin, which makes it turn on when
     * the pin is low.
     */
    GPIO_WriteBit(GPIOC,GPIO_Pin_12,Bit_SET);
    5f26:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    5f2a:	f2c4 0001 	movt	r0, #16385	; 0x4001
    5f2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    5f32:	2201      	movs	r2, #1
    5f34:	f7fb fa7c 	bl	1430 <GPIO_WriteBit>

    /* Configure the LED pin as push-pull output. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_12;
    5f38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    5f3c:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    5f3e:	2310      	movs	r3, #16
    5f40:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    5f42:	2303      	movs	r3, #3
    5f44:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
    5f46:	1d3b      	adds	r3, r7, #4
    5f48:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    5f4c:	f2c4 0001 	movt	r0, #16385	; 0x4001
    5f50:	4619      	mov	r1, r3
    5f52:	f7fb f931 	bl	11b8 <GPIO_Init>
}
    5f56:	3708      	adds	r7, #8
    5f58:	46bd      	mov	sp, r7
    5f5a:	bd80      	pop	{r7, pc}

00005f5c <init_button>:

void init_button(void)
{
    5f5c:	b580      	push	{r7, lr}
    5f5e:	b082      	sub	sp, #8
    5f60:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO A clock */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
    5f62:	2004      	movs	r0, #4
    5f64:	2101      	movs	r1, #1
    5f66:	f7fa ff53 	bl	e10 <RCC_APB2PeriphClockCmd>

    /* Configure the button pin as a floating input. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_0;
    5f6a:	2301      	movs	r3, #1
    5f6c:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    5f6e:	2304      	movs	r3, #4
    5f70:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    5f72:	2303      	movs	r3, #3
    5f74:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
    5f76:	1d3b      	adds	r3, r7, #4
    5f78:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    5f7c:	f2c4 0001 	movt	r0, #16385	; 0x4001
    5f80:	4619      	mov	r1, r3
    5f82:	f7fb f919 	bl	11b8 <GPIO_Init>
}
    5f86:	3708      	adds	r7, #8
    5f88:	46bd      	mov	sp, r7
    5f8a:	bd80      	pop	{r7, pc}

00005f8c <enable_button_interrupts>:

void enable_button_interrupts(void)
{
    5f8c:	b580      	push	{r7, lr}
    5f8e:	b084      	sub	sp, #16
    5f90:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable the AFIO clock.  GPIO_EXTILineConfig sets registers in
     * the AFIO.
     */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
    5f92:	2001      	movs	r0, #1
    5f94:	2101      	movs	r1, #1
    5f96:	f7fa ff3b 	bl	e10 <RCC_APB2PeriphClockCmd>

    /* Connect EXTI Line 0 to the button GPIO Pin */
    GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource0);
    5f9a:	2000      	movs	r0, #0
    5f9c:	2100      	movs	r1, #0
    5f9e:	f7fb fb3f 	bl	1620 <GPIO_EXTILineConfig>

    /* Configure the EXTI line to generate an interrupt when the button is
     * pressed.  The button pin is high when pressed, so it needs to trigger
     * when rising from low to high. */
    EXTI_InitStructure.EXTI_Line = EXTI_Line0;
    5fa2:	2301      	movs	r3, #1
    5fa4:	60bb      	str	r3, [r7, #8]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
    5fa6:	2300      	movs	r3, #0
    5fa8:	733b      	strb	r3, [r7, #12]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
    5faa:	2308      	movs	r3, #8
    5fac:	737b      	strb	r3, [r7, #13]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
    5fae:	2301      	movs	r3, #1
    5fb0:	73bb      	strb	r3, [r7, #14]
    EXTI_Init(&EXTI_InitStructure);
    5fb2:	f107 0308 	add.w	r3, r7, #8
    5fb6:	4618      	mov	r0, r3
    5fb8:	f7fc f838 	bl	202c <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
    5fbc:	2306      	movs	r3, #6
    5fbe:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
    5fc0:	230f      	movs	r3, #15
    5fc2:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
    5fc4:	230f      	movs	r3, #15
    5fc6:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    5fc8:	2301      	movs	r3, #1
    5fca:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
    5fcc:	1d3b      	adds	r3, r7, #4
    5fce:	4618      	mov	r0, r3
    5fd0:	f7fc f966 	bl	22a0 <NVIC_Init>
}
    5fd4:	3710      	adds	r7, #16
    5fd6:	46bd      	mov	sp, r7
    5fd8:	bd80      	pop	{r7, pc}
    5fda:	bf00      	nop

00005fdc <init_rs232>:

void init_rs232(void)
{
    5fdc:	b580      	push	{r7, lr}
    5fde:	b086      	sub	sp, #24
    5fe0:	af00      	add	r7, sp, #0
    USART_InitTypeDef USART_InitStructure;
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable peripheral clocks. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
    5fe2:	2005      	movs	r0, #5
    5fe4:	2101      	movs	r1, #1
    5fe6:	f7fa ff13 	bl	e10 <RCC_APB2PeriphClockCmd>
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
    5fea:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    5fee:	2101      	movs	r1, #1
    5ff0:	f7fa ff36 	bl	e60 <RCC_APB1PeriphClockCmd>

    /* Configure USART2 Rx pin as floating input. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
    5ff4:	2308      	movs	r3, #8
    5ff6:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    5ff8:	2304      	movs	r3, #4
    5ffa:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
    5ffc:	1d3b      	adds	r3, r7, #4
    5ffe:	f44f 6000 	mov.w	r0, #2048	; 0x800
    6002:	f2c4 0001 	movt	r0, #16385	; 0x4001
    6006:	4619      	mov	r1, r3
    6008:	f7fb f8d6 	bl	11b8 <GPIO_Init>

    /* Configure USART2 Tx as alternate function push-pull. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
    600c:	2304      	movs	r3, #4
    600e:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    6010:	2303      	movs	r3, #3
    6012:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    6014:	2318      	movs	r3, #24
    6016:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
    6018:	1d3b      	adds	r3, r7, #4
    601a:	f44f 6000 	mov.w	r0, #2048	; 0x800
    601e:	f2c4 0001 	movt	r0, #16385	; 0x4001
    6022:	4619      	mov	r1, r3
    6024:	f7fb f8c8 	bl	11b8 <GPIO_Init>

    /* Configure the USART2 */
    USART_InitStructure.USART_BaudRate = 9600;
    6028:	f44f 5316 	mov.w	r3, #9600	; 0x2580
    602c:	60bb      	str	r3, [r7, #8]
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
    602e:	2300      	movs	r3, #0
    6030:	81bb      	strh	r3, [r7, #12]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
    6032:	2300      	movs	r3, #0
    6034:	81fb      	strh	r3, [r7, #14]
    USART_InitStructure.USART_Parity = USART_Parity_No;
    6036:	2300      	movs	r3, #0
    6038:	823b      	strh	r3, [r7, #16]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    603a:	2300      	movs	r3, #0
    603c:	82bb      	strh	r3, [r7, #20]
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    603e:	230c      	movs	r3, #12
    6040:	827b      	strh	r3, [r7, #18]
    USART_Init(USART2, &USART_InitStructure);
    6042:	f107 0308 	add.w	r3, r7, #8
    6046:	f44f 4088 	mov.w	r0, #17408	; 0x4400
    604a:	f2c4 0000 	movt	r0, #16384	; 0x4000
    604e:	4619      	mov	r1, r3
    6050:	f7fb fb9a 	bl	1788 <USART_Init>
    USART_Cmd(USART2, ENABLE);
    6054:	f44f 4088 	mov.w	r0, #17408	; 0x4400
    6058:	f2c4 0000 	movt	r0, #16384	; 0x4000
    605c:	2101      	movs	r1, #1
    605e:	f7fb fcb1 	bl	19c4 <USART_Cmd>
}
    6062:	3718      	adds	r7, #24
    6064:	46bd      	mov	sp, r7
    6066:	bd80      	pop	{r7, pc}

00006068 <enable_rs232_interrupts>:

void enable_rs232_interrupts(void)
{
    6068:	b580      	push	{r7, lr}
    606a:	b082      	sub	sp, #8
    606c:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable transmit and receive interrupts for the USART2. */
    USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
    606e:	f44f 4088 	mov.w	r0, #17408	; 0x4400
    6072:	f2c4 0000 	movt	r0, #16384	; 0x4000
    6076:	f240 7127 	movw	r1, #1831	; 0x727
    607a:	2200      	movs	r2, #0
    607c:	f7fb fcc2 	bl	1a04 <USART_ITConfig>
    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
    6080:	f44f 4088 	mov.w	r0, #17408	; 0x4400
    6084:	f2c4 0000 	movt	r0, #16384	; 0x4000
    6088:	f240 5125 	movw	r1, #1317	; 0x525
    608c:	2201      	movs	r2, #1
    608e:	f7fb fcb9 	bl	1a04 <USART_ITConfig>

    /* Enable the USART2 IRQ in the NVIC module (so that the USART2 interrupt
     * handler is enabled). */
    NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
    6092:	2326      	movs	r3, #38	; 0x26
    6094:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
    6096:	2300      	movs	r3, #0
    6098:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    609a:	2301      	movs	r3, #1
    609c:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
    609e:	1d3b      	adds	r3, r7, #4
    60a0:	4618      	mov	r0, r3
    60a2:	f7fc f8fd 	bl	22a0 <NVIC_Init>
}
    60a6:	3708      	adds	r7, #8
    60a8:	46bd      	mov	sp, r7
    60aa:	bd80      	pop	{r7, pc}

000060ac <enable_rs232>:

void enable_rs232(void)
{
    60ac:	b580      	push	{r7, lr}
    60ae:	af00      	add	r7, sp, #0
    /* Enable the RS232 port. */
    USART_Cmd(USART2, ENABLE);
    60b0:	f44f 4088 	mov.w	r0, #17408	; 0x4400
    60b4:	f2c4 0000 	movt	r0, #16384	; 0x4000
    60b8:	2101      	movs	r1, #1
    60ba:	f7fb fc83 	bl	19c4 <USART_Cmd>
}
    60be:	bd80      	pop	{r7, pc}

000060c0 <send_byte>:

void send_byte(uint8_t b)
{
    60c0:	b580      	push	{r7, lr}
    60c2:	b082      	sub	sp, #8
    60c4:	af00      	add	r7, sp, #0
    60c6:	4603      	mov	r3, r0
    60c8:	71fb      	strb	r3, [r7, #7]
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET);
    60ca:	bf00      	nop
    60cc:	f44f 4088 	mov.w	r0, #17408	; 0x4400
    60d0:	f2c4 0000 	movt	r0, #16384	; 0x4000
    60d4:	2180      	movs	r1, #128	; 0x80
    60d6:	f7fb fee1 	bl	1e9c <USART_GetFlagStatus>
    60da:	4603      	mov	r3, r0
    60dc:	2b00      	cmp	r3, #0
    60de:	d0f5      	beq.n	60cc <send_byte+0xc>
    
    GPIOC->ODR ^= 0x00001000;
    60e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    60e4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    60e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    60ec:	f2c4 0201 	movt	r2, #16385	; 0x4001
    60f0:	68d2      	ldr	r2, [r2, #12]
    60f2:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
    60f6:	60da      	str	r2, [r3, #12]

    USART_SendData(USART2, b);
    60f8:	79fb      	ldrb	r3, [r7, #7]
    60fa:	b29b      	uxth	r3, r3
    60fc:	f44f 4088 	mov.w	r0, #17408	; 0x4400
    6100:	f2c4 0000 	movt	r0, #16384	; 0x4000
    6104:	4619      	mov	r1, r3
    6106:	f7fb fd7d 	bl	1c04 <USART_SendData>
}
    610a:	3708      	adds	r7, #8
    610c:	46bd      	mov	sp, r7
    610e:	bd80      	pop	{r7, pc}

00006110 <send_num>:
/**
 *  can print a num which is smaller than 10
 */

void send_num(uint8_t b)
{
    6110:	b580      	push	{r7, lr}
    6112:	b082      	sub	sp, #8
    6114:	af00      	add	r7, sp, #0
    6116:	4603      	mov	r3, r0
    6118:	71fb      	strb	r3, [r7, #7]
    send_byte(b+'0'); 
    611a:	79fb      	ldrb	r3, [r7, #7]
    611c:	3330      	adds	r3, #48	; 0x30
    611e:	b2db      	uxtb	r3, r3
    6120:	4618      	mov	r0, r3
    6122:	f7ff ffcd 	bl	60c0 <send_byte>
}
    6126:	3708      	adds	r7, #8
    6128:	46bd      	mov	sp, r7
    612a:	bd80      	pop	{r7, pc}

0000612c <vPrintString>:
 * print a string
 *
 * */

void vPrintString( const char * string)
{
    612c:	b580      	push	{r7, lr}
    612e:	b084      	sub	sp, #16
    6130:	af00      	add	r7, sp, #0
    6132:	6078      	str	r0, [r7, #4]
    int i = 0;
    6134:	2300      	movs	r3, #0
    6136:	60fb      	str	r3, [r7, #12]
    while(string[i] != '\0')
    6138:	e009      	b.n	614e <vPrintString+0x22>
    {
        send_byte(string[i]);
    613a:	68fb      	ldr	r3, [r7, #12]
    613c:	687a      	ldr	r2, [r7, #4]
    613e:	4413      	add	r3, r2
    6140:	781b      	ldrb	r3, [r3, #0]
    6142:	4618      	mov	r0, r3
    6144:	f7ff ffbc 	bl	60c0 <send_byte>
        i++;
    6148:	68fb      	ldr	r3, [r7, #12]
    614a:	3301      	adds	r3, #1
    614c:	60fb      	str	r3, [r7, #12]
 * */

void vPrintString( const char * string)
{
    int i = 0;
    while(string[i] != '\0')
    614e:	68fb      	ldr	r3, [r7, #12]
    6150:	687a      	ldr	r2, [r7, #4]
    6152:	4413      	add	r3, r2
    6154:	781b      	ldrb	r3, [r3, #0]
    6156:	2b00      	cmp	r3, #0
    6158:	d1ef      	bne.n	613a <vPrintString+0xe>
    {
        send_byte(string[i]);
        i++;
    }
}
    615a:	3710      	adds	r7, #16
    615c:	46bd      	mov	sp, r7
    615e:	bd80      	pop	{r7, pc}

00006160 <vPrintNumber>:
/*
 * print a number which is less than 10
 *
 * */
void vPrintNumber( const long c_num)
{
    6160:	b580      	push	{r7, lr}
    6162:	b08a      	sub	sp, #40	; 0x28
    6164:	af00      	add	r7, sp, #0
    6166:	6078      	str	r0, [r7, #4]
    char time[15], tmp;
    unsigned int i, count = 0;
    6168:	2300      	movs	r3, #0
    616a:	623b      	str	r3, [r7, #32]
    long num = c_num;
    616c:	687b      	ldr	r3, [r7, #4]
    616e:	61fb      	str	r3, [r7, #28]

    if(num == 0)
    6170:	69fb      	ldr	r3, [r7, #28]
    6172:	2b00      	cmp	r3, #0
    6174:	d106      	bne.n	6184 <vPrintNumber+0x24>
    {
        vPrintString("0\n\r");
    6176:	f246 603c 	movw	r0, #26172	; 0x663c
    617a:	f2c0 0000 	movt	r0, #0
    617e:	f7ff ffd5 	bl	612c <vPrintString>
    6182:	e062      	b.n	624a <vPrintNumber+0xea>
    }
    else
    {
        // transform long into char * 
        while( num  )
    6184:	e024      	b.n	61d0 <vPrintNumber+0x70>
        {
            time[count] = num%10 +'0';
    6186:	69f9      	ldr	r1, [r7, #28]
    6188:	f246 6367 	movw	r3, #26215	; 0x6667
    618c:	f2c6 6366 	movt	r3, #26214	; 0x6666
    6190:	fb83 2301 	smull	r2, r3, r3, r1
    6194:	109a      	asrs	r2, r3, #2
    6196:	17cb      	asrs	r3, r1, #31
    6198:	1ad2      	subs	r2, r2, r3
    619a:	4613      	mov	r3, r2
    619c:	009b      	lsls	r3, r3, #2
    619e:	4413      	add	r3, r2
    61a0:	005b      	lsls	r3, r3, #1
    61a2:	1aca      	subs	r2, r1, r3
    61a4:	b2d3      	uxtb	r3, r2
    61a6:	3330      	adds	r3, #48	; 0x30
    61a8:	b2da      	uxtb	r2, r3
    61aa:	f107 010c 	add.w	r1, r7, #12
    61ae:	6a3b      	ldr	r3, [r7, #32]
    61b0:	440b      	add	r3, r1
    61b2:	701a      	strb	r2, [r3, #0]
            count ++;
    61b4:	6a3b      	ldr	r3, [r7, #32]
    61b6:	3301      	adds	r3, #1
    61b8:	623b      	str	r3, [r7, #32]
            num /= 10;
    61ba:	69fa      	ldr	r2, [r7, #28]
    61bc:	f246 6367 	movw	r3, #26215	; 0x6667
    61c0:	f2c6 6366 	movt	r3, #26214	; 0x6666
    61c4:	fb83 1302 	smull	r1, r3, r3, r2
    61c8:	1099      	asrs	r1, r3, #2
    61ca:	17d3      	asrs	r3, r2, #31
    61cc:	1acb      	subs	r3, r1, r3
    61ce:	61fb      	str	r3, [r7, #28]
        vPrintString("0\n\r");
    }
    else
    {
        // transform long into char * 
        while( num  )
    61d0:	69fb      	ldr	r3, [r7, #28]
    61d2:	2b00      	cmp	r3, #0
    61d4:	d1d7      	bne.n	6186 <vPrintNumber+0x26>
            time[count] = num%10 +'0';
            count ++;
            num /= 10;

        }
        time[count] = '\0';
    61d6:	f107 020c 	add.w	r2, r7, #12
    61da:	6a3b      	ldr	r3, [r7, #32]
    61dc:	4413      	add	r3, r2
    61de:	2200      	movs	r2, #0
    61e0:	701a      	strb	r2, [r3, #0]

        // reverse
        for( i = 0; i < count/2; ++i )
    61e2:	2300      	movs	r3, #0
    61e4:	627b      	str	r3, [r7, #36]	; 0x24
    61e6:	e020      	b.n	622a <vPrintNumber+0xca>
        {
            tmp = time[i];
    61e8:	f107 020c 	add.w	r2, r7, #12
    61ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    61ee:	4413      	add	r3, r2
    61f0:	781b      	ldrb	r3, [r3, #0]
    61f2:	76fb      	strb	r3, [r7, #27]
            time[i] = time[count-1-i];
    61f4:	6a3a      	ldr	r2, [r7, #32]
    61f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    61f8:	1ad3      	subs	r3, r2, r3
    61fa:	3b01      	subs	r3, #1
    61fc:	f107 0228 	add.w	r2, r7, #40	; 0x28
    6200:	4413      	add	r3, r2
    6202:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
    6206:	f107 010c 	add.w	r1, r7, #12
    620a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    620c:	440b      	add	r3, r1
    620e:	701a      	strb	r2, [r3, #0]
            time[count-1-i] = tmp;
    6210:	6a3a      	ldr	r2, [r7, #32]
    6212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6214:	1ad3      	subs	r3, r2, r3
    6216:	3b01      	subs	r3, #1
    6218:	f107 0128 	add.w	r1, r7, #40	; 0x28
    621c:	440b      	add	r3, r1
    621e:	7efa      	ldrb	r2, [r7, #27]
    6220:	f803 2c1c 	strb.w	r2, [r3, #-28]

        }
        time[count] = '\0';

        // reverse
        for( i = 0; i < count/2; ++i )
    6224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6226:	3301      	adds	r3, #1
    6228:	627b      	str	r3, [r7, #36]	; 0x24
    622a:	6a3b      	ldr	r3, [r7, #32]
    622c:	085a      	lsrs	r2, r3, #1
    622e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6230:	429a      	cmp	r2, r3
    6232:	d8d9      	bhi.n	61e8 <vPrintNumber+0x88>
            tmp = time[i];
            time[i] = time[count-1-i];
            time[count-1-i] = tmp;

        }
        vPrintString(time);
    6234:	f107 030c 	add.w	r3, r7, #12
    6238:	4618      	mov	r0, r3
    623a:	f7ff ff77 	bl	612c <vPrintString>
        vPrintString("\n\r");
    623e:	f246 6040 	movw	r0, #26176	; 0x6640
    6242:	f2c0 0000 	movt	r0, #0
    6246:	f7ff ff71 	bl	612c <vPrintString>
    }
}
    624a:	3728      	adds	r7, #40	; 0x28
    624c:	46bd      	mov	sp, r7
    624e:	bd80      	pop	{r7, pc}

00006250 <mode_switch1>:
   void ps_mode_switch_create(bool (*condition)(void), id_t mode_dest)


 */
bool mode_switch1()
{
    6250:	b480      	push	{r7}
    6252:	af00      	add	r7, sp, #0
	return 1;
    6254:	2301      	movs	r3, #1
}
    6256:	4618      	mov	r0, r3
    6258:	46bd      	mov	sp, r7
    625a:	f85d 7b04 	ldr.w	r7, [sp], #4
    625e:	4770      	bx	lr

00006260 <myHardwareInit>:

void myHardwareInit(){
    6260:	b580      	push	{r7, lr}
    6262:	af00      	add	r7, sp, #0
	init_led();
    6264:	f7ff fe58 	bl	5f18 <init_led>
	init_rs232();
    6268:	f7ff feb8 	bl	5fdc <init_rs232>
	enable_rs232_interrupts();
    626c:	f7ff fefc 	bl	6068 <enable_rs232_interrupts>
	enable_rs232();
    6270:	f7ff ff1c 	bl	60ac <enable_rs232>
}
    6274:	bd80      	pop	{r7, pc}
    6276:	bf00      	nop

00006278 <main>:


int main()
{
    6278:	b580      	push	{r7, lr}
    627a:	b0a6      	sub	sp, #152	; 0x98
    627c:	af02      	add	r7, sp, #8
	myHardwareInit();
    627e:	f7ff ffef 	bl	6260 <myHardwareInit>

	ps_servant_t * ps_servants[NUMOFSERVANTS];
	ps_task_t * ps_tasks[NUMOFTASKS];

	ps_servants[0] = ps_servant_create(0, 0, 3, 0, NULL, sensor1);
    6282:	2300      	movs	r3, #0
    6284:	9300      	str	r3, [sp, #0]
    6286:	f645 6341 	movw	r3, #24129	; 0x5e41
    628a:	f2c0 0300 	movt	r3, #0
    628e:	9301      	str	r3, [sp, #4]
    6290:	2000      	movs	r0, #0
    6292:	2100      	movs	r1, #0
    6294:	2203      	movs	r2, #3
    6296:	2300      	movs	r3, #0
    6298:	f7fe fe40 	bl	4f1c <ps_servant_create>
    629c:	4603      	mov	r3, r0
    629e:	613b      	str	r3, [r7, #16]
	ps_servants[1] = ps_servant_create(1, 1, 10, 1, ps_servants, controller1);
    62a0:	f107 0310 	add.w	r3, r7, #16
    62a4:	9300      	str	r3, [sp, #0]
    62a6:	f645 6361 	movw	r3, #24161	; 0x5e61
    62aa:	f2c0 0300 	movt	r3, #0
    62ae:	9301      	str	r3, [sp, #4]
    62b0:	2001      	movs	r0, #1
    62b2:	2101      	movs	r1, #1
    62b4:	220a      	movs	r2, #10
    62b6:	2301      	movs	r3, #1
    62b8:	f7fe fe30 	bl	4f1c <ps_servant_create>
    62bc:	4603      	mov	r3, r0
    62be:	617b      	str	r3, [r7, #20]
	ps_servants[2] = ps_servant_create(2, 2, 3, 1, ps_servants+1, actuator1);
    62c0:	f107 0310 	add.w	r3, r7, #16
    62c4:	3304      	adds	r3, #4
    62c6:	9300      	str	r3, [sp, #0]
    62c8:	f645 6389 	movw	r3, #24201	; 0x5e89
    62cc:	f2c0 0300 	movt	r3, #0
    62d0:	9301      	str	r3, [sp, #4]
    62d2:	2002      	movs	r0, #2
    62d4:	2102      	movs	r1, #2
    62d6:	2203      	movs	r2, #3
    62d8:	2301      	movs	r3, #1
    62da:	f7fe fe1f 	bl	4f1c <ps_servant_create>
    62de:	4603      	mov	r3, r0
    62e0:	61bb      	str	r3, [r7, #24]


	ps_servants[3] = ps_servant_create(3, 0, 3, 0, NULL, sensor2);
    62e2:	2300      	movs	r3, #0
    62e4:	9300      	str	r3, [sp, #0]
    62e6:	f645 63ad 	movw	r3, #24237	; 0x5ead
    62ea:	f2c0 0300 	movt	r3, #0
    62ee:	9301      	str	r3, [sp, #4]
    62f0:	2003      	movs	r0, #3
    62f2:	2100      	movs	r1, #0
    62f4:	2203      	movs	r2, #3
    62f6:	2300      	movs	r3, #0
    62f8:	f7fe fe10 	bl	4f1c <ps_servant_create>
    62fc:	4603      	mov	r3, r0
    62fe:	61fb      	str	r3, [r7, #28]
	ps_servants[4] = ps_servant_create(4, 1, 20, 1, ps_servants+3, controller2);
    6300:	f107 0310 	add.w	r3, r7, #16
    6304:	330c      	adds	r3, #12
    6306:	9300      	str	r3, [sp, #0]
    6308:	f645 63cd 	movw	r3, #24269	; 0x5ecd
    630c:	f2c0 0300 	movt	r3, #0
    6310:	9301      	str	r3, [sp, #4]
    6312:	2004      	movs	r0, #4
    6314:	2101      	movs	r1, #1
    6316:	2214      	movs	r2, #20
    6318:	2301      	movs	r3, #1
    631a:	f7fe fdff 	bl	4f1c <ps_servant_create>
    631e:	4603      	mov	r3, r0
    6320:	623b      	str	r3, [r7, #32]
	ps_servants[5] = ps_servant_create(5, 2, 3, 1, ps_servants+4, actuator2);
    6322:	f107 0310 	add.w	r3, r7, #16
    6326:	3310      	adds	r3, #16
    6328:	9300      	str	r3, [sp, #0]
    632a:	f645 63f5 	movw	r3, #24309	; 0x5ef5
    632e:	f2c0 0300 	movt	r3, #0
    6332:	9301      	str	r3, [sp, #4]
    6334:	2005      	movs	r0, #5
    6336:	2102      	movs	r1, #2
    6338:	2203      	movs	r2, #3
    633a:	2301      	movs	r3, #1
    633c:	f7fe fdee 	bl	4f1c <ps_servant_create>
    6340:	4603      	mov	r3, r0
    6342:	627b      	str	r3, [r7, #36]	; 0x24


	ps_tasks[0] = ps_task_create(0, 500, ps_servants, 3);
    6344:	f107 0310 	add.w	r3, r7, #16
    6348:	2000      	movs	r0, #0
    634a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    634e:	461a      	mov	r2, r3
    6350:	2303      	movs	r3, #3
    6352:	f7fe fc93 	bl	4c7c <ps_task_create>
    6356:	4603      	mov	r3, r0
    6358:	603b      	str	r3, [r7, #0]
	ps_tasks[1] = ps_task_create(1, 1000,  ps_servants+3, 3);
    635a:	f107 0310 	add.w	r3, r7, #16
    635e:	330c      	adds	r3, #12
    6360:	2001      	movs	r0, #1
    6362:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    6366:	461a      	mov	r2, r3
    6368:	2303      	movs	r3, #3
    636a:	f7fe fc87 	bl	4c7c <ps_task_create>
    636e:	4603      	mov	r3, r0
    6370:	607b      	str	r3, [r7, #4]

	ps_mode_create(0, ps_tasks, 2);
    6372:	463b      	mov	r3, r7
    6374:	2000      	movs	r0, #0
    6376:	4619      	mov	r1, r3
    6378:	2202      	movs	r2, #2
    637a:	f7fe fb21 	bl	49c0 <ps_mode_create>
	ps_mode_switch_create( mode_switch1, 0);
    637e:	f246 2051 	movw	r0, #25169	; 0x6251
    6382:	f2c0 0000 	movt	r0, #0
    6386:	2100      	movs	r1, #0
    6388:	f7fe fb92 	bl	4ab0 <ps_mode_switch_create>
	system_start();
    638c:	f7fe fc00 	bl	4b90 <system_start>

}
    6390:	4618      	mov	r0, r3
    6392:	3790      	adds	r7, #144	; 0x90
    6394:	46bd      	mov	sp, r7
    6396:	bd80      	pop	{r7, pc}

00006398 <myTraceCreate>:

void myTraceCreate      (){
    6398:	b480      	push	{r7}
    639a:	af00      	add	r7, sp, #0
}
    639c:	46bd      	mov	sp, r7
    639e:	f85d 7b04 	ldr.w	r7, [sp], #4
    63a2:	4770      	bx	lr

000063a4 <myTraceSwitchedIn>:

void myTraceSwitchedIn  (){
    63a4:	b480      	push	{r7}
    63a6:	af00      	add	r7, sp, #0
}
    63a8:	46bd      	mov	sp, r7
    63aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    63ae:	4770      	bx	lr

000063b0 <myTraceSwitchedOut>:

void myTraceSwitchedOut	(){
    63b0:	b480      	push	{r7}
    63b2:	af00      	add	r7, sp, #0
}
    63b4:	46bd      	mov	sp, r7
    63b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    63ba:	4770      	bx	lr

000063bc <vApplicationTickHook>:


void vApplicationTickHook( void )
{
    63bc:	b580      	push	{r7, lr}
    63be:	af00      	add	r7, sp, #0
	ps_mode_switch();
    63c0:	f7fe fba0 	bl	4b04 <ps_mode_switch>
}
    63c4:	bd80      	pop	{r7, pc}
    63c6:	bf00      	nop

000063c8 <memcpy>:
    63c8:	2a0f      	cmp	r2, #15
    63ca:	b4f0      	push	{r4, r5, r6, r7}
    63cc:	d945      	bls.n	645a <memcpy+0x92>
    63ce:	ea40 0301 	orr.w	r3, r0, r1
    63d2:	079b      	lsls	r3, r3, #30
    63d4:	d145      	bne.n	6462 <memcpy+0x9a>
    63d6:	f1a2 0710 	sub.w	r7, r2, #16
    63da:	460c      	mov	r4, r1
    63dc:	4603      	mov	r3, r0
    63de:	093f      	lsrs	r7, r7, #4
    63e0:	eb00 1607 	add.w	r6, r0, r7, lsl #4
    63e4:	3610      	adds	r6, #16
    63e6:	6825      	ldr	r5, [r4, #0]
    63e8:	3310      	adds	r3, #16
    63ea:	3410      	adds	r4, #16
    63ec:	f843 5c10 	str.w	r5, [r3, #-16]
    63f0:	f854 5c0c 	ldr.w	r5, [r4, #-12]
    63f4:	f843 5c0c 	str.w	r5, [r3, #-12]
    63f8:	f854 5c08 	ldr.w	r5, [r4, #-8]
    63fc:	f843 5c08 	str.w	r5, [r3, #-8]
    6400:	f854 5c04 	ldr.w	r5, [r4, #-4]
    6404:	f843 5c04 	str.w	r5, [r3, #-4]
    6408:	42b3      	cmp	r3, r6
    640a:	d1ec      	bne.n	63e6 <memcpy+0x1e>
    640c:	1c7b      	adds	r3, r7, #1
    640e:	f002 0c0f 	and.w	ip, r2, #15
    6412:	f1bc 0f03 	cmp.w	ip, #3
    6416:	ea4f 1303 	mov.w	r3, r3, lsl #4
    641a:	4419      	add	r1, r3
    641c:	4403      	add	r3, r0
    641e:	d922      	bls.n	6466 <memcpy+0x9e>
    6420:	460e      	mov	r6, r1
    6422:	461d      	mov	r5, r3
    6424:	4664      	mov	r4, ip
    6426:	f856 7b04 	ldr.w	r7, [r6], #4
    642a:	3c04      	subs	r4, #4
    642c:	2c03      	cmp	r4, #3
    642e:	f845 7b04 	str.w	r7, [r5], #4
    6432:	d8f8      	bhi.n	6426 <memcpy+0x5e>
    6434:	f1ac 0404 	sub.w	r4, ip, #4
    6438:	f002 0203 	and.w	r2, r2, #3
    643c:	f024 0403 	bic.w	r4, r4, #3
    6440:	3404      	adds	r4, #4
    6442:	4423      	add	r3, r4
    6444:	4421      	add	r1, r4
    6446:	b132      	cbz	r2, 6456 <memcpy+0x8e>
    6448:	440a      	add	r2, r1
    644a:	f811 4b01 	ldrb.w	r4, [r1], #1
    644e:	4291      	cmp	r1, r2
    6450:	f803 4b01 	strb.w	r4, [r3], #1
    6454:	d1f9      	bne.n	644a <memcpy+0x82>
    6456:	bcf0      	pop	{r4, r5, r6, r7}
    6458:	4770      	bx	lr
    645a:	4603      	mov	r3, r0
    645c:	2a00      	cmp	r2, #0
    645e:	d1f3      	bne.n	6448 <memcpy+0x80>
    6460:	e7f9      	b.n	6456 <memcpy+0x8e>
    6462:	4603      	mov	r3, r0
    6464:	e7f0      	b.n	6448 <memcpy+0x80>
    6466:	4662      	mov	r2, ip
    6468:	2a00      	cmp	r2, #0
    646a:	d1ed      	bne.n	6448 <memcpy+0x80>
    646c:	e7f3      	b.n	6456 <memcpy+0x8e>
    646e:	bf00      	nop

00006470 <memset>:
    6470:	0783      	lsls	r3, r0, #30
    6472:	b4f0      	push	{r4, r5, r6, r7}
    6474:	d048      	beq.n	6508 <memset+0x98>
    6476:	1e54      	subs	r4, r2, #1
    6478:	2a00      	cmp	r2, #0
    647a:	d043      	beq.n	6504 <memset+0x94>
    647c:	b2cd      	uxtb	r5, r1
    647e:	4603      	mov	r3, r0
    6480:	e002      	b.n	6488 <memset+0x18>
    6482:	2c00      	cmp	r4, #0
    6484:	d03e      	beq.n	6504 <memset+0x94>
    6486:	4614      	mov	r4, r2
    6488:	f803 5b01 	strb.w	r5, [r3], #1
    648c:	f013 0f03 	tst.w	r3, #3
    6490:	f104 32ff 	add.w	r2, r4, #4294967295
    6494:	d1f5      	bne.n	6482 <memset+0x12>
    6496:	2c03      	cmp	r4, #3
    6498:	d92d      	bls.n	64f6 <memset+0x86>
    649a:	b2cd      	uxtb	r5, r1
    649c:	2c0f      	cmp	r4, #15
    649e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    64a2:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    64a6:	d918      	bls.n	64da <memset+0x6a>
    64a8:	f1a4 0710 	sub.w	r7, r4, #16
    64ac:	f103 0610 	add.w	r6, r3, #16
    64b0:	461a      	mov	r2, r3
    64b2:	093f      	lsrs	r7, r7, #4
    64b4:	eb06 1607 	add.w	r6, r6, r7, lsl #4
    64b8:	6015      	str	r5, [r2, #0]
    64ba:	3210      	adds	r2, #16
    64bc:	f842 5c0c 	str.w	r5, [r2, #-12]
    64c0:	f842 5c08 	str.w	r5, [r2, #-8]
    64c4:	f842 5c04 	str.w	r5, [r2, #-4]
    64c8:	42b2      	cmp	r2, r6
    64ca:	d1f5      	bne.n	64b8 <memset+0x48>
    64cc:	f004 040f 	and.w	r4, r4, #15
    64d0:	3701      	adds	r7, #1
    64d2:	2c03      	cmp	r4, #3
    64d4:	eb03 1307 	add.w	r3, r3, r7, lsl #4
    64d8:	d90d      	bls.n	64f6 <memset+0x86>
    64da:	461e      	mov	r6, r3
    64dc:	4622      	mov	r2, r4
    64de:	3a04      	subs	r2, #4
    64e0:	f846 5b04 	str.w	r5, [r6], #4
    64e4:	2a03      	cmp	r2, #3
    64e6:	d8fa      	bhi.n	64de <memset+0x6e>
    64e8:	1f22      	subs	r2, r4, #4
    64ea:	f004 0403 	and.w	r4, r4, #3
    64ee:	f022 0203 	bic.w	r2, r2, #3
    64f2:	3204      	adds	r2, #4
    64f4:	4413      	add	r3, r2
    64f6:	b12c      	cbz	r4, 6504 <memset+0x94>
    64f8:	b2c9      	uxtb	r1, r1
    64fa:	441c      	add	r4, r3
    64fc:	f803 1b01 	strb.w	r1, [r3], #1
    6500:	42a3      	cmp	r3, r4
    6502:	d1fb      	bne.n	64fc <memset+0x8c>
    6504:	bcf0      	pop	{r4, r5, r6, r7}
    6506:	4770      	bx	lr
    6508:	4614      	mov	r4, r2
    650a:	4603      	mov	r3, r0
    650c:	e7c3      	b.n	6496 <memset+0x26>
    650e:	bf00      	nop

00006510 <strncpy>:
    6510:	ea40 0301 	orr.w	r3, r0, r1
    6514:	079b      	lsls	r3, r3, #30
    6516:	b470      	push	{r4, r5, r6}
    6518:	d12b      	bne.n	6572 <strncpy+0x62>
    651a:	2a03      	cmp	r2, #3
    651c:	bf84      	itt	hi
    651e:	460b      	movhi	r3, r1
    6520:	4605      	movhi	r5, r0
    6522:	d926      	bls.n	6572 <strncpy+0x62>
    6524:	4619      	mov	r1, r3
    6526:	f853 4b04 	ldr.w	r4, [r3], #4
    652a:	f1a4 3601 	sub.w	r6, r4, #16843009	; 0x1010101
    652e:	ea26 0604 	bic.w	r6, r6, r4
    6532:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
    6536:	d105      	bne.n	6544 <strncpy+0x34>
    6538:	3a04      	subs	r2, #4
    653a:	f845 4b04 	str.w	r4, [r5], #4
    653e:	2a03      	cmp	r2, #3
    6540:	4619      	mov	r1, r3
    6542:	d8ef      	bhi.n	6524 <strncpy+0x14>
    6544:	b19a      	cbz	r2, 656e <strncpy+0x5e>
    6546:	780c      	ldrb	r4, [r1, #0]
    6548:	3a01      	subs	r2, #1
    654a:	1c6b      	adds	r3, r5, #1
    654c:	702c      	strb	r4, [r5, #0]
    654e:	b13c      	cbz	r4, 6560 <strncpy+0x50>
    6550:	b16a      	cbz	r2, 656e <strncpy+0x5e>
    6552:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    6556:	3a01      	subs	r2, #1
    6558:	f803 4b01 	strb.w	r4, [r3], #1
    655c:	2c00      	cmp	r4, #0
    655e:	d1f7      	bne.n	6550 <strncpy+0x40>
    6560:	b12a      	cbz	r2, 656e <strncpy+0x5e>
    6562:	441a      	add	r2, r3
    6564:	2100      	movs	r1, #0
    6566:	f803 1b01 	strb.w	r1, [r3], #1
    656a:	4293      	cmp	r3, r2
    656c:	d1fb      	bne.n	6566 <strncpy+0x56>
    656e:	bc70      	pop	{r4, r5, r6}
    6570:	4770      	bx	lr
    6572:	4605      	mov	r5, r0
    6574:	e7e6      	b.n	6544 <strncpy+0x34>
    6576:	bf00      	nop

00006578 <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:	

/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
    6578:	2100      	movs	r1, #0
  b	LoopCopyDataInit
    657a:	e003      	b.n	6584 <LoopCopyDataInit>

0000657c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
    657c:	4b0a      	ldr	r3, [pc, #40]	; (65a8 <LoopFillZerobss+0x10>)
	ldr	r3, [r3, r1]
    657e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
    6580:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
    6582:	3104      	adds	r1, #4

00006584 <LoopCopyDataInit>:
    
LoopCopyDataInit:
	ldr	r0, =_sdata
    6584:	4809      	ldr	r0, [pc, #36]	; (65ac <LoopFillZerobss+0x14>)
	ldr	r3, =_edata
    6586:	4b0a      	ldr	r3, [pc, #40]	; (65b0 <LoopFillZerobss+0x18>)
	adds	r2, r0, r1
    6588:	1842      	adds	r2, r0, r1
	cmp	r2, r3
    658a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
    658c:	d3f6      	bcc.n	657c <CopyDataInit>
	ldr	r2, =_sbss
    658e:	4a09      	ldr	r2, [pc, #36]	; (65b4 <LoopFillZerobss+0x1c>)
	b	LoopFillZerobss
    6590:	e002      	b.n	6598 <LoopFillZerobss>

00006592 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
	movs	r3, #0
    6592:	2300      	movs	r3, #0
	str	r3, [r2], #4
    6594:	f842 3b04 	str.w	r3, [r2], #4

00006598 <LoopFillZerobss>:
    
LoopFillZerobss:
	ldr	r3, = _ebss
    6598:	4b07      	ldr	r3, [pc, #28]	; (65b8 <LoopFillZerobss+0x20>)
	cmp	r2, r3
    659a:	429a      	cmp	r2, r3
	bcc	FillZerobss
    659c:	d3f9      	bcc.n	6592 <FillZerobss>
/* Call the clock system intitialization function.*/
  bl  SystemInit 	
    659e:	f7f9 fef5 	bl	38c <SystemInit>
/* Call the application's entry point.*/
	bl	main
    65a2:	f7ff fe69 	bl	6278 <main>
	bx	lr    
    65a6:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
    65a8:	00006644 	.word	0x00006644
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4
    
LoopCopyDataInit:
	ldr	r0, =_sdata
    65ac:	20000000 	.word	0x20000000
	ldr	r3, =_edata
    65b0:	20000034 	.word	0x20000034
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
    65b4:	20000038 	.word	0x20000038
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4
    
LoopFillZerobss:
	ldr	r3, = _ebss
    65b8:	2000d938 	.word	0x2000d938

000065bc <ADC1_2_IRQHandler>:
 * @retval None       
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
    65bc:	e7fe      	b.n	65bc <ADC1_2_IRQHandler>
    65be:	0000      	movs	r0, r0
    65c0:	454c4449 	.word	0x454c4449
    65c4:	00000000 	.word	0x00000000

000065c8 <ulKernelPriority>:
    65c8:	0000007f                                ....

000065cc <heapSTRUCT_SIZE>:
    65cc:	00000010 206d2769 52206e69 7265532d     ....i'm in R-Ser
    65dc:	746e6176 00000d0a 736e6573 3120726f     vant....sensor 1
    65ec:	00000d0a 746e6f63 6c6c6f72 31207265     ....controller 1
    65fc:	00000d0a 75746361 726f7461 0d0a3120     ....actuator 1..
    660c:	00000000 736e6573 3220726f 00000d0a     ....sensor 2....
    661c:	746e6f63 6c6c6f72 32207265 00000d0a     controller 2....
    662c:	75746361 726f7461 0d0a3220 00000000     actuator 2......
    663c:	000d0a30 00000d0a                       0.......
